* Log / record *canonicalized* command line for semantic information derived from compiler command line

* Allow running analyzer on individual project file for use during build

* For the FileSystemCodexStore, it will need to also serialize any data that is currently transformed and removed prior to indexing (i.e. SourceFileInfo.Properties)
so that it can replay those without lose of data. Check types for instances of this and handle somehow.

* Generate abstract IndexBehaviors types which will require indicating behavior of indexable fields at compile time
Example:

[Generated]
public interface IDefinitionIndexBehaviors
{	
	public SearchBehavior ShortName { get; }

	public SearchBehavior ContainerQualifiedName { get; }
}

[Generated]
public class DefaultDefinitionIndexBehaviors
{
	// Notice that this is a field to prevent this from implementing the interface
	// because this should be an explicit choice to make this field searchable/stored
	public readonly SearchBehavior ShortName = SearchBehavior.Prefix;

	public readonly SearchBehavior ContainerQualifiedName = SearchBehavior.PrefixFullName;

	// This is not really the case, but its just to show an example
	public readonly SearchBehavior SymbolDepth = SearchBehavior.Term;
}

[UserDefined]
public DefinitionIndexBehaviors : IDefinitionIndexBehaviors
{
	public readonly DefaultDefinitionIndexBehaviors Defaults;

	public SearchBehavior ShortName => Defaults.ShortName;

	public SearchBehavior ContainerQualifiedName => Defaults.ContainerQualifiedName;

	// Forcing this field to not be indexed
	public SearchBehavior SymbolDepth => SearchBehavior.None;
}

* Commit, branch, repository should all have definition symbols which show up in search. They should be outside of the stored filter
built for the commit (except for the commit stored filter which should be inside the stored filter as well).

* When repository or branch is added, they should not overwrite properties like Description with null. Instead, they should pull the current value
and use that.

* Progress reporting on web site for ingestion.

* Some sort of state for commits.

* Adding to batch should implicitly set Uid and ContentId

IMPORTANT!!!
* Cumulative commit filter - a filter which includes all files in the commit and its parent commits transitively
	This is complicated when commits are indexed out of order. When indexed in order, the current commit can just union with the cumulative commits of parents
	but this is not possible if the parent commits are not yet indexed. Naturally, text can always be indexed in order (though should NOT be a requirement because you don't want to
	have to index all of history in order to see the latest info), but semantic info would likely be added retroactively for commits prior to the start of using Codex. It does not scale to have to modify
	all the transitive child commit stored filters in this case so I'm thinking this should be done on demand (i.e. when doing an operation which specifically needs to know the cumulative stored filter). Even
	then the question becomes how to efficiently compute the cumulative stored filter.
	Idea: Have cron job rewalk history from beginning to end to reconstruct cumulative filters in order. Its worth noting that if a descendant commit already has integrated a prior commits incomplete cumululative filter.
	Its sufficient to just union with the updated cumulative filter rather than reconstructing from scratch. Luckily, the cumulative stored filter is mainly useful for viewing history which is based off of git data
	that doesn't require any special analysis.

Prefix indexing with Lucene
	Currently in ElasticSearch for a given term "SolutionProjectAnalyzer", the following terms would be added for auto prefix:
		"^SolutionProjectAnalyzer$"
		"ProjectAnalyzer$"
		"Analyzer$"

	Notice that the first term containing the full string will be preceded by '^' character. This is to prioritize full name matches. However, this does make for less efficient use of the trie constructed in Lucene for terms. How can we still annotate the term is  a full name match without forking the trie with terms preceded by '^' or not. Maybe move leading '^' to end. Also need "skip list" to only search full name terms.

Example:
Names: ["SolutionProjectAnalyzer", "SolutionFileAnalyzer", "ManagedSolutionProjectAnalyzer", "InvocationSolutionInfoBuilderBase"]

Terms:
[
	// From: SolutionProjectAnalyzer
	"^SolutionProjectAnalyzer$",
	"ProjectAnalyzer$",
	"Analyzer$",

	// From: SolutionFileAnalyzer
	"^SolutionFileAnalyzer$",
	"FileAnalyzer$",
	"Analyzer$",

	// From: ManagedSolutionProjectAnalyzer
	"^ManagedSolutionProjectAnalyzer",
	"SolutionProjectAnalyzer$",
	"ProjectAnalyzer$",
	"Analyzer$",

	// From: InvocationSolutionInfoBuilder
	"^InvocationSolutionInfoBuilder$",
	"SolutionInfoBuilder$",
	"InfoBuilder$",
	"Builder$",
]

Prefixes:
[
	"^Solution"
	"^SolutionProjectAnalyzer$"
	"Solution"
	"SolutionInfoBuilder"
	"ProjectAnalyzer$"
	"Analyzer$"

]


	New terms:
		[0]: "Analyzer$"
		[1]: "ProjectAnalyzer$"
		[2]: "SolutionProjectAnalyzer$^"

	Full name skip list: [2]
