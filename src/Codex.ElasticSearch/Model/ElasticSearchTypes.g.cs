//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codex.ElasticSearch {
    
    
    public partial class ElasticSearchStoreBase {
        
        private ElasticSearchEntityStore<Codex.IDefinitionSearchModel> m_DefinitionStore;
        
        private ElasticSearchEntityStore<Codex.IReferenceSearchModel> m_ReferenceStore;
        
        private ElasticSearchEntityStore<Codex.ITextSourceSearchModel> m_TextSourceStore;
        
        private ElasticSearchEntityStore<Codex.IBoundSourceSearchModel> m_BoundSourceStore;
        
        private ElasticSearchEntityStore<Codex.ILanguageSearchModel> m_LanguageStore;
        
        private ElasticSearchEntityStore<Codex.IRepositorySearchModel> m_RepositoryStore;
        
        private ElasticSearchEntityStore<Codex.IProjectSearchModel> m_ProjectStore;
        
        private ElasticSearchEntityStore<Codex.ICommitSearchModel> m_CommitStore;
        
        private ElasticSearchEntityStore<Codex.ICommitFilesSearchModel> m_CommitFilesStore;
        
        private ElasticSearchEntityStore<Codex.IProjectReferenceSearchModel> m_ProjectReferenceStore;
        
        private ElasticSearchEntityStore<Codex.IPropertySearchModel> m_PropertyStore;
        
        private ElasticSearchEntityStore<Codex.IStoredFilter> m_StoredFilterStore;
        
        private ElasticSearchEntityStore<Codex.IStableIdMarker> m_StableIdMarkerStore;
        
        private ElasticSearchEntityStore<Codex.IRegisteredEntity> m_RegisteredEntityStore;
        
        public virtual ElasticSearchEntityStore<Codex.IDefinitionSearchModel> DefinitionStore {
            get {
                return this.m_DefinitionStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IReferenceSearchModel> ReferenceStore {
            get {
                return this.m_ReferenceStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.ITextSourceSearchModel> TextSourceStore {
            get {
                return this.m_TextSourceStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IBoundSourceSearchModel> BoundSourceStore {
            get {
                return this.m_BoundSourceStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.ILanguageSearchModel> LanguageStore {
            get {
                return this.m_LanguageStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IRepositorySearchModel> RepositoryStore {
            get {
                return this.m_RepositoryStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IProjectSearchModel> ProjectStore {
            get {
                return this.m_ProjectStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.ICommitSearchModel> CommitStore {
            get {
                return this.m_CommitStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.ICommitFilesSearchModel> CommitFilesStore {
            get {
                return this.m_CommitFilesStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IProjectReferenceSearchModel> ProjectReferenceStore {
            get {
                return this.m_ProjectReferenceStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IPropertySearchModel> PropertyStore {
            get {
                return this.m_PropertyStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IStoredFilter> StoredFilterStore {
            get {
                return this.m_StoredFilterStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IStableIdMarker> StableIdMarkerStore {
            get {
                return this.m_StableIdMarkerStore;
            }
        }
        
        public virtual ElasticSearchEntityStore<Codex.IRegisteredEntity> RegisteredEntityStore {
            get {
                return this.m_RegisteredEntityStore;
            }
        }
        
        public virtual async System.Threading.Tasks.Task InitializeAsync() {
            m_DefinitionStore = await this.CreateStoreAsync<Codex.IDefinitionSearchModel>(Codex.SearchTypes.Definition);
            m_ReferenceStore = await this.CreateStoreAsync<Codex.IReferenceSearchModel>(Codex.SearchTypes.Reference);
            m_TextSourceStore = await this.CreateStoreAsync<Codex.ITextSourceSearchModel>(Codex.SearchTypes.TextSource);
            m_BoundSourceStore = await this.CreateStoreAsync<Codex.IBoundSourceSearchModel>(Codex.SearchTypes.BoundSource);
            m_LanguageStore = await this.CreateStoreAsync<Codex.ILanguageSearchModel>(Codex.SearchTypes.Language);
            m_RepositoryStore = await this.CreateStoreAsync<Codex.IRepositorySearchModel>(Codex.SearchTypes.Repository);
            m_ProjectStore = await this.CreateStoreAsync<Codex.IProjectSearchModel>(Codex.SearchTypes.Project);
            m_CommitStore = await this.CreateStoreAsync<Codex.ICommitSearchModel>(Codex.SearchTypes.Commit);
            m_CommitFilesStore = await this.CreateStoreAsync<Codex.ICommitFilesSearchModel>(Codex.SearchTypes.CommitFiles);
            m_ProjectReferenceStore = await this.CreateStoreAsync<Codex.IProjectReferenceSearchModel>(Codex.SearchTypes.ProjectReference);
            m_PropertyStore = await this.CreateStoreAsync<Codex.IPropertySearchModel>(Codex.SearchTypes.Property);
            m_StoredFilterStore = await this.CreateStoreAsync<Codex.IStoredFilter>(Codex.SearchTypes.StoredFilter);
            m_StableIdMarkerStore = await this.CreateStoreAsync<Codex.IStableIdMarker>(Codex.SearchTypes.StableIdMarker);
            m_RegisteredEntityStore = await this.CreateStoreAsync<Codex.IRegisteredEntity>(Codex.SearchTypes.RegisteredEntity);
        }
        
        public virtual async System.Threading.Tasks.Task FinalizeAsync() {
            await m_DefinitionStore.FinalizeAsync();
            await m_ReferenceStore.FinalizeAsync();
            await m_TextSourceStore.FinalizeAsync();
            await m_BoundSourceStore.FinalizeAsync();
            await m_LanguageStore.FinalizeAsync();
            await m_RepositoryStore.FinalizeAsync();
            await m_ProjectStore.FinalizeAsync();
            await m_CommitStore.FinalizeAsync();
            await m_CommitFilesStore.FinalizeAsync();
            await m_ProjectReferenceStore.FinalizeAsync();
            await m_PropertyStore.FinalizeAsync();
            await m_StoredFilterStore.FinalizeAsync();
            await m_StableIdMarkerStore.FinalizeAsync();
            await m_RegisteredEntityStore.FinalizeAsync();
        }
    }
}
