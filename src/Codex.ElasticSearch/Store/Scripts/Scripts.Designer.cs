//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codex.ElasticSearch.Store.Scripts {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Scripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Scripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Codex.ElasticSearch.Store.Scripts.Scripts", typeof(Scripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // This defines an ElasticSearch Painless script for &apos;committing&apos; a pending reservation which
        ///// adds unused reserved stable ids to the free list and removes the pending reservation
        ///// CommitReservation(string reservationId, int[] unusedIds)
        ///
        ///// Parameters
        ///int[] unusedIds = params.returnedIds;
        ///String reservationId = params.reservationId;
        ///
        ///// Add all unused ids to the free list
        ///ctx._source.freeList.addAll(unusedIds);
        ///
        ///// Remove the reservation id
        ///ctx._source.pendingReservations.removeIf(item -&gt; i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommitReservation {
            get {
                return ResourceManager.GetString("CommitReservation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // This defines an ElasticSearch Painless script for reserving stable ids from a document
        ///// Reserve(string reservationId, int reserveCount)
        ///
        ///// Parameters
        ///int reserveCount = params.reserveCount;
        ///String reservationId = params.reservationId;
        ///
        ///def sourceDoc = ctx._source;
        ///int nextValue = sourceDoc.nextValue;
        ///List freeList = sourceDoc.freeList;
        ///List reservedIds = new ArrayList();
        ///
        ///// Remove entries from free list
        ///while (reserveCount &gt; 0 &amp;&amp; freeList.size() &gt; 0)
        ///{
        ///    int lastIndex = freeList.size [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Reserve {
            get {
                return ResourceManager.GetString("Reserve", resourceCulture);
            }
        }
    }
}
