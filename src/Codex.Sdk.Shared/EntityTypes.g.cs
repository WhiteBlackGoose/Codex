//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codex.ObjectModel {
    using System.Threading.Tasks;
    using Codex.Framework.Types;
    
    
    public partial class CodexTypeUtilities {
        
        private static System.Collections.Generic.IReadOnlyDictionary<System.Type, System.Type> s_typeMappings = CreateTypeMapping();
        
        private static System.Collections.Generic.Dictionary<System.Type, System.Type> CreateTypeMapping() {
            System.Collections.Generic.Dictionary<System.Type, System.Type> typeMapping = new System.Collections.Generic.Dictionary<System.Type, System.Type>();
            typeMapping.Add(typeof(Codex.ICommit), typeof(Commit));
            typeMapping.Add(typeof(Commit), typeof(Codex.ICommit));
            typeMapping.Add(typeof(Codex.ICommitChangedFile), typeof(CommitChangedFile));
            typeMapping.Add(typeof(CommitChangedFile), typeof(Codex.ICommitChangedFile));
            typeMapping.Add(typeof(Codex.ICommitFileLink), typeof(CommitFileLink));
            typeMapping.Add(typeof(CommitFileLink), typeof(Codex.ICommitFileLink));
            typeMapping.Add(typeof(Codex.IBranch), typeof(Branch));
            typeMapping.Add(typeof(Branch), typeof(Codex.IBranch));
            typeMapping.Add(typeof(Codex.IBoundSourceFile), typeof(BoundSourceFile));
            typeMapping.Add(typeof(BoundSourceFile), typeof(Codex.IBoundSourceFile));
            typeMapping.Add(typeof(Codex.IBoundSourceInfo), typeof(BoundSourceInfo));
            typeMapping.Add(typeof(BoundSourceInfo), typeof(Codex.IBoundSourceInfo));
            typeMapping.Add(typeof(Codex.ISourceControlFileInfo), typeof(SourceControlFileInfo));
            typeMapping.Add(typeof(SourceControlFileInfo), typeof(Codex.ISourceControlFileInfo));
            typeMapping.Add(typeof(Codex.ISourceFileInfo), typeof(SourceFileInfo));
            typeMapping.Add(typeof(SourceFileInfo), typeof(Codex.ISourceFileInfo));
            typeMapping.Add(typeof(Codex.IEncodingDescription), typeof(EncodingDescription));
            typeMapping.Add(typeof(EncodingDescription), typeof(Codex.IEncodingDescription));
            typeMapping.Add(typeof(Codex.ISourceFile), typeof(SourceFile));
            typeMapping.Add(typeof(SourceFile), typeof(Codex.ISourceFile));
            typeMapping.Add(typeof(Codex.IOutliningRegion), typeof(OutliningRegion));
            typeMapping.Add(typeof(OutliningRegion), typeof(Codex.IOutliningRegion));
            typeMapping.Add(typeof(Codex.IDefinitionSpan), typeof(DefinitionSpan));
            typeMapping.Add(typeof(DefinitionSpan), typeof(Codex.IDefinitionSpan));
            typeMapping.Add(typeof(Codex.IParameterDefinitionSpan), typeof(ParameterDefinitionSpan));
            typeMapping.Add(typeof(ParameterDefinitionSpan), typeof(Codex.IParameterDefinitionSpan));
            typeMapping.Add(typeof(Codex.IReferenceSpan), typeof(ReferenceSpan));
            typeMapping.Add(typeof(ReferenceSpan), typeof(Codex.IReferenceSpan));
            typeMapping.Add(typeof(Codex.IParameterReferenceSpan), typeof(ParameterReferenceSpan));
            typeMapping.Add(typeof(ParameterReferenceSpan), typeof(Codex.IParameterReferenceSpan));
            typeMapping.Add(typeof(Codex.IClassificationSpan), typeof(ClassificationSpan));
            typeMapping.Add(typeof(ClassificationSpan), typeof(Codex.IClassificationSpan));
            typeMapping.Add(typeof(Codex.ISymbolSpan), typeof(SymbolSpan));
            typeMapping.Add(typeof(SymbolSpan), typeof(Codex.ISymbolSpan));
            typeMapping.Add(typeof(Codex.ITextLineSpan), typeof(TextLineSpan));
            typeMapping.Add(typeof(TextLineSpan), typeof(Codex.ITextLineSpan));
            typeMapping.Add(typeof(Codex.ILineSpan), typeof(LineSpan));
            typeMapping.Add(typeof(LineSpan), typeof(Codex.ILineSpan));
            typeMapping.Add(typeof(Codex.ISpan), typeof(Span));
            typeMapping.Add(typeof(Span), typeof(Codex.ISpan));
            typeMapping.Add(typeof(Codex.ICodeReview), typeof(CodeReview));
            typeMapping.Add(typeof(CodeReview), typeof(Codex.ICodeReview));
            typeMapping.Add(typeof(Codex.ICodeReviewIteration), typeof(CodeReviewIteration));
            typeMapping.Add(typeof(CodeReviewIteration), typeof(Codex.ICodeReviewIteration));
            typeMapping.Add(typeof(Codex.ICodeReviewerInfo), typeof(CodeReviewerInfo));
            typeMapping.Add(typeof(CodeReviewerInfo), typeof(Codex.ICodeReviewerInfo));
            typeMapping.Add(typeof(Codex.ICodeReviewFile), typeof(CodeReviewFile));
            typeMapping.Add(typeof(CodeReviewFile), typeof(Codex.ICodeReviewFile));
            typeMapping.Add(typeof(Codex.ICodeReviewCommentThread), typeof(CodeReviewCommentThread));
            typeMapping.Add(typeof(CodeReviewCommentThread), typeof(Codex.ICodeReviewCommentThread));
            typeMapping.Add(typeof(Codex.ICodeReviewComment), typeof(CodeReviewComment));
            typeMapping.Add(typeof(CodeReviewComment), typeof(Codex.ICodeReviewComment));
            typeMapping.Add(typeof(Codex.IStableIdMarker), typeof(StableIdMarker));
            typeMapping.Add(typeof(StableIdMarker), typeof(Codex.IStableIdMarker));
            typeMapping.Add(typeof(Codex.IStableIdReservation), typeof(StableIdReservation));
            typeMapping.Add(typeof(StableIdReservation), typeof(Codex.IStableIdReservation));
            typeMapping.Add(typeof(Codex.ILanguageInfo), typeof(LanguageInfo));
            typeMapping.Add(typeof(LanguageInfo), typeof(Codex.ILanguageInfo));
            typeMapping.Add(typeof(Codex.IClassificationStyle), typeof(ClassificationStyle));
            typeMapping.Add(typeof(ClassificationStyle), typeof(Codex.IClassificationStyle));
            typeMapping.Add(typeof(Codex.IProject), typeof(AnalyzedProject));
            typeMapping.Add(typeof(AnalyzedProject), typeof(Codex.IProject));
            typeMapping.Add(typeof(Codex.IReferencedProject), typeof(ReferencedProject));
            typeMapping.Add(typeof(ReferencedProject), typeof(Codex.IReferencedProject));
            typeMapping.Add(typeof(Codex.IProjectFileLink), typeof(ProjectFileLink));
            typeMapping.Add(typeof(ProjectFileLink), typeof(Codex.IProjectFileLink));
            typeMapping.Add(typeof(Codex.IDocumentationInfo), typeof(DocumentationInfo));
            typeMapping.Add(typeof(DocumentationInfo), typeof(Codex.IDocumentationInfo));
            typeMapping.Add(typeof(Codex.IParameterDocumentation), typeof(ParameterDocumentation));
            typeMapping.Add(typeof(ParameterDocumentation), typeof(Codex.IParameterDocumentation));
            typeMapping.Add(typeof(Codex.ITypedParameterDocumentation), typeof(TypedParameterDocumentation));
            typeMapping.Add(typeof(TypedParameterDocumentation), typeof(Codex.ITypedParameterDocumentation));
            typeMapping.Add(typeof(Codex.IDocumentationReferenceSymbol), typeof(DocumentationReferenceSymbol));
            typeMapping.Add(typeof(DocumentationReferenceSymbol), typeof(Codex.IDocumentationReferenceSymbol));
            typeMapping.Add(typeof(Codex.IPropertySearchModel), typeof(PropertySearchModel));
            typeMapping.Add(typeof(PropertySearchModel), typeof(Codex.IPropertySearchModel));
            typeMapping.Add(typeof(Codex.IPropertyMap), typeof(PropertyMap));
            typeMapping.Add(typeof(PropertyMap), typeof(Codex.IPropertyMap));
            typeMapping.Add(typeof(Codex.IRepository), typeof(Repository));
            typeMapping.Add(typeof(Repository), typeof(Codex.IRepository));
            typeMapping.Add(typeof(Codex.IRepositoryReference), typeof(RepositoryReference));
            typeMapping.Add(typeof(RepositoryReference), typeof(Codex.IRepositoryReference));
            typeMapping.Add(typeof(Codex.ISearchEntity), typeof(SearchEntity));
            typeMapping.Add(typeof(SearchEntity), typeof(Codex.ISearchEntity));
            typeMapping.Add(typeof(Codex.IRepoScopeEntity), typeof(RepoScopeEntity));
            typeMapping.Add(typeof(RepoScopeEntity), typeof(Codex.IRepoScopeEntity));
            typeMapping.Add(typeof(Codex.ICommitScopeEntity), typeof(CommitScopeEntity));
            typeMapping.Add(typeof(CommitScopeEntity), typeof(Codex.ICommitScopeEntity));
            typeMapping.Add(typeof(Codex.IProjectScopeEntity), typeof(ProjectScopeEntity));
            typeMapping.Add(typeof(ProjectScopeEntity), typeof(Codex.IProjectScopeEntity));
            typeMapping.Add(typeof(Codex.IRepoFileScopeEntity), typeof(RepoFileScopeEntity));
            typeMapping.Add(typeof(RepoFileScopeEntity), typeof(Codex.IRepoFileScopeEntity));
            typeMapping.Add(typeof(Codex.IProjectFileScopeEntity), typeof(ProjectFileScopeEntity));
            typeMapping.Add(typeof(ProjectFileScopeEntity), typeof(Codex.IProjectFileScopeEntity));
            typeMapping.Add(typeof(Codex.IRegisteredEntity), typeof(RegisteredEntity));
            typeMapping.Add(typeof(RegisteredEntity), typeof(Codex.IRegisteredEntity));
            typeMapping.Add(typeof(Codex.IStoredFilter), typeof(StoredFilter));
            typeMapping.Add(typeof(StoredFilter), typeof(Codex.IStoredFilter));
            typeMapping.Add(typeof(Codex.IChildFilterReference), typeof(ChildFilterReference));
            typeMapping.Add(typeof(ChildFilterReference), typeof(Codex.IChildFilterReference));
            typeMapping.Add(typeof(Codex.IGroupedStoredFilterIds), typeof(GroupedStoredFilterIds));
            typeMapping.Add(typeof(GroupedStoredFilterIds), typeof(Codex.IGroupedStoredFilterIds));
            typeMapping.Add(typeof(Codex.IDefinitionSearchModel), typeof(DefinitionSearchModel));
            typeMapping.Add(typeof(DefinitionSearchModel), typeof(Codex.IDefinitionSearchModel));
            typeMapping.Add(typeof(Codex.ILanguageSearchModel), typeof(LanguageSearchModel));
            typeMapping.Add(typeof(LanguageSearchModel), typeof(Codex.ILanguageSearchModel));
            typeMapping.Add(typeof(Codex.IReferenceSearchModel), typeof(ReferenceSearchModel));
            typeMapping.Add(typeof(ReferenceSearchModel), typeof(Codex.IReferenceSearchModel));
            typeMapping.Add(typeof(Codex.ISourceSearchModelBase), typeof(SourceSearchModelBase));
            typeMapping.Add(typeof(SourceSearchModelBase), typeof(Codex.ISourceSearchModelBase));
            typeMapping.Add(typeof(Codex.IBoundSourceSearchModel), typeof(BoundSourceSearchModel));
            typeMapping.Add(typeof(BoundSourceSearchModel), typeof(Codex.IBoundSourceSearchModel));
            typeMapping.Add(typeof(Codex.ITextSourceSearchModel), typeof(TextSourceSearchModel));
            typeMapping.Add(typeof(TextSourceSearchModel), typeof(Codex.ITextSourceSearchModel));
            typeMapping.Add(typeof(Codex.IRepositorySearchModel), typeof(RepositorySearchModel));
            typeMapping.Add(typeof(RepositorySearchModel), typeof(Codex.IRepositorySearchModel));
            typeMapping.Add(typeof(Codex.IProjectSearchModel), typeof(ProjectSearchModel));
            typeMapping.Add(typeof(ProjectSearchModel), typeof(Codex.IProjectSearchModel));
            typeMapping.Add(typeof(Codex.IProjectReferenceSearchModel), typeof(ProjectReferenceSearchModel));
            typeMapping.Add(typeof(ProjectReferenceSearchModel), typeof(Codex.IProjectReferenceSearchModel));
            typeMapping.Add(typeof(Codex.ICommitSearchModel), typeof(CommitSearchModel));
            typeMapping.Add(typeof(CommitSearchModel), typeof(Codex.ICommitSearchModel));
            typeMapping.Add(typeof(Codex.ICommitFilesSearchModel), typeof(CommitFilesSearchModel));
            typeMapping.Add(typeof(CommitFilesSearchModel), typeof(Codex.ICommitFilesSearchModel));
            typeMapping.Add(typeof(Codex.IFileStatistics), typeof(FileStatistics));
            typeMapping.Add(typeof(FileStatistics), typeof(Codex.IFileStatistics));
            typeMapping.Add(typeof(Codex.IRepositoryStoreInfo), typeof(RepositoryStoreInfo));
            typeMapping.Add(typeof(RepositoryStoreInfo), typeof(Codex.IRepositoryStoreInfo));
            typeMapping.Add(typeof(Codex.ICommitFilesDirectory), typeof(CommitFilesDirectory));
            typeMapping.Add(typeof(CommitFilesDirectory), typeof(Codex.ICommitFilesDirectory));
            typeMapping.Add(typeof(Codex.IDefinitionSymbol), typeof(DefinitionSymbol));
            typeMapping.Add(typeof(DefinitionSymbol), typeof(Codex.IDefinitionSymbol));
            typeMapping.Add(typeof(Codex.IReferenceSymbol), typeof(ReferenceSymbol));
            typeMapping.Add(typeof(ReferenceSymbol), typeof(Codex.IReferenceSymbol));
            typeMapping.Add(typeof(Codex.ICodeSymbol), typeof(Symbol));
            typeMapping.Add(typeof(Symbol), typeof(Codex.ICodeSymbol));
            typeMapping.Add(typeof(Codex.Sdk.Search.IReferenceSearchResult), typeof(ReferenceSearchResult));
            typeMapping.Add(typeof(ReferenceSearchResult), typeof(Codex.Sdk.Search.IReferenceSearchResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.ITextLineSpanResult), typeof(TextLineSpanResult));
            typeMapping.Add(typeof(TextLineSpanResult), typeof(Codex.Sdk.Search.ITextLineSpanResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.ISearchResult), typeof(SearchResult));
            typeMapping.Add(typeof(SearchResult), typeof(Codex.Sdk.Search.ISearchResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.IIndex), typeof(Index));
            typeMapping.Add(typeof(Index), typeof(Codex.Sdk.Search.IIndex));
            return typeMapping;
        }
    }
    
    /// <summary>
    /// Describes a commit in version control
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommit))]
    public partial class Commit : CommitScopeEntity, Codex.ICommit {
        
        private string m_Description;
        
        private System.DateTime m_DateUploaded;
        
        private System.DateTime m_DateCommitted;
        
        private System.Collections.Generic.List<string> m_ParentCommitIds = new System.Collections.Generic.List<string>();
        
        private System.Collections.Generic.List<CommitChangedFile> m_ChangedFiles = new System.Collections.Generic.List<CommitChangedFile>();
        
        public Commit() {
        }
        
        public Commit(Codex.ICommit value) {
            this.CopyFrom<Commit>(value);
        }
        
        public Commit(Codex.ICommitScopeEntity value) : 
                base(value) {
        }
        
        public Commit(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The commit description describing the changes
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// The date the commit was stored to the index
        /// </summary>
        public virtual System.DateTime DateUploaded {
            get {
                return this.m_DateUploaded;
            }
            set {
                this.m_DateUploaded = value;
            }
        }
        
        /// <summary>
        /// The date of the commit
        /// </summary>
        public virtual System.DateTime DateCommitted {
            get {
                return this.m_DateCommitted;
            }
            set {
                this.m_DateCommitted = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ICommitScopeEntity.CommitId" /> of the parent commits
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.ICommit.ParentCommitIds {
            get {
                return this.ParentCommitIds;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ICommitScopeEntity.CommitId" /> of the parent commits
        /// </summary>
        public virtual System.Collections.Generic.List<string> ParentCommitIds {
            get {
                return this.m_ParentCommitIds;
            }
            set {
                this.m_ParentCommitIds = value;
            }
        }
        
        /// <summary>
        /// The files changed in the commit
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ICommitChangedFile> Codex.ICommit.ChangedFiles {
            get {
                return this.ChangedFiles;
            }
        }
        
        /// <summary>
        /// The files changed in the commit
        /// </summary>
        public virtual System.Collections.Generic.List<CommitChangedFile> ChangedFiles {
            get {
                return this.m_ChangedFiles;
            }
            set {
                this.m_ChangedFiles = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommit value)
            where TTarget : Commit {
            this.m_Description = ((Codex.ICommit)(value)).Description;
            this.m_DateUploaded = ((Codex.ICommit)(value)).DateUploaded;
            this.m_DateCommitted = ((Codex.ICommit)(value)).DateCommitted;
            this.m_ParentCommitIds = new System.Collections.Generic.List<string>(((Codex.ICommit)(value)).ParentCommitIds);
            this.m_ChangedFiles = new System.Collections.Generic.List<CommitChangedFile>(System.Linq.Enumerable.Select(((Codex.ICommit)(value)).ChangedFiles, v => EntityUtilities.NullOrCopy(v, _v => new CommitChangedFile().CopyFrom<CommitChangedFile>(_v))));
            base.CopyFrom<CommitScopeEntity>(((Codex.ICommitScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Represents a changed file in a commit
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitChangedFile))]
    public partial class CommitChangedFile : CommitFileLink, Codex.ICommitChangedFile {
        
        private Codex.FileChangeKind m_ChangeKind;
        
        private string m_OriginalFilePath;
        
        public CommitChangedFile() {
        }
        
        public CommitChangedFile(Codex.ICommitChangedFile value) {
            this.CopyFrom<CommitChangedFile>(value);
        }
        
        public CommitChangedFile(Codex.ICommitFileLink value) : 
                base(value) {
        }
        
        /// <summary>
        /// The type of change applied to the file
        /// </summary>
        public virtual Codex.FileChangeKind ChangeKind {
            get {
                return this.m_ChangeKind;
            }
            set {
                this.m_ChangeKind = value;
            }
        }
        
        /// <summary>
        /// For a renamed file, the path to the file prior to the rename
        /// </summary>
        public virtual string OriginalFilePath {
            get {
                return this.m_OriginalFilePath;
            }
            set {
                this.m_OriginalFilePath = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitChangedFile value)
            where TTarget : CommitChangedFile {
            this.m_ChangeKind = ((Codex.ICommitChangedFile)(value)).ChangeKind;
            this.m_OriginalFilePath = ((Codex.ICommitChangedFile)(value)).OriginalFilePath;
            base.CopyFrom<CommitFileLink>(((Codex.ICommitFileLink)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Represents a version of a repository file for a commit
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFileLink))]
    public partial class CommitFileLink : Codex.EntityBase, Codex.ICommitFileLink {
        
        private string m_RepoRelativePath;
        
        private string m_FileId;
        
        private string m_VersionControlFileId;
        
        public CommitFileLink() {
            Initialize();
        }
        
        public CommitFileLink(Codex.ICommitFileLink value) {
            Initialize();
            this.CopyFrom<CommitFileLink>(value);
        }
        
        /// <summary>
        /// The relative path in the repository to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// Unique identifer for file
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        /// <summary>
        /// Unique identifer for file content as determined by version control
        /// (i.e. the blob hash)
        /// </summary>
        public virtual string VersionControlFileId {
            get {
                return this.m_VersionControlFileId;
            }
            set {
                this.m_VersionControlFileId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitFileLink value)
            where TTarget : CommitFileLink {
            this.m_RepoRelativePath = ((Codex.ICommitFileLink)(value)).RepoRelativePath;
            this.m_FileId = ((Codex.ICommitFileLink)(value)).FileId;
            this.m_VersionControlFileId = ((Codex.ICommitFileLink)(value)).VersionControlFileId;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Describes a branch in a repository
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBranch))]
    public partial class Branch : Codex.EntityBase, Codex.IBranch {
        
        private string m_Name;
        
        private string m_Description;
        
        private string m_HeadCommitId;
        
        public Branch() {
            Initialize();
        }
        
        public Branch(Codex.IBranch value) {
            Initialize();
            this.CopyFrom<Branch>(value);
        }
        
        /// <summary>
        /// The name of the branch
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The branch description
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// The head commit of the branch
        /// </summary>
        public virtual string HeadCommitId {
            get {
                return this.m_HeadCommitId;
            }
            set {
                this.m_HeadCommitId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IBranch value)
            where TTarget : Branch {
            this.m_Name = ((Codex.IBranch)(value)).Name;
            this.m_Description = ((Codex.IBranch)(value)).Description;
            this.m_HeadCommitId = ((Codex.IBranch)(value)).HeadCommitId;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Represents a source file with associated semantic bindings
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceFile))]
    public partial class BoundSourceFile : BoundSourceInfo, Codex.IBoundSourceFile {
        
        private SourceFile m_SourceFile;
        
        public BoundSourceFile() {
        }
        
        public BoundSourceFile(Codex.IBoundSourceFile value) {
            this.CopyFrom<BoundSourceFile>(value);
        }
        
        public BoundSourceFile(Codex.IBoundSourceInfo value) : 
                base(value) {
        }
        
        public BoundSourceFile(Codex.IProjectFileScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The source file
        /// </summary>
        Codex.ISourceFile Codex.IBoundSourceFile.SourceFile {
            get {
                return this.SourceFile;
            }
        }
        
        /// <summary>
        /// The source file
        /// </summary>
        public virtual SourceFile SourceFile {
            get {
                return this.m_SourceFile;
            }
            set {
                this.m_SourceFile = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IBoundSourceFile value)
            where TTarget : BoundSourceFile {
            this.m_SourceFile = EntityUtilities.NullOrCopy(value.SourceFile, v => new SourceFile().CopyFrom<SourceFile>(v));;
            base.CopyFrom<BoundSourceInfo>(((Codex.IBoundSourceInfo)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceInfo))]
    public partial class BoundSourceInfo : ProjectFileScopeEntity, Codex.IBoundSourceInfo {
        
        private System.Nullable<int> m_ReferenceCount;
        
        private System.Nullable<int> m_DefinitionCount;
        
        private string m_Language;
        
        private System.Collections.Generic.IReadOnlyList<ReferenceSpan> m_References = Codex.Utilities.CollectionUtilities.Empty<ReferenceSpan>.Array;
        
        private System.Collections.Generic.List<DefinitionSpan> m_Definitions = new System.Collections.Generic.List<DefinitionSpan>();
        
        private System.Collections.Generic.IReadOnlyList<ClassificationSpan> m_Classifications = Codex.Utilities.CollectionUtilities.Empty<ClassificationSpan>.Array;
        
        private System.Collections.Generic.List<OutliningRegion> m_OutliningRegions = new System.Collections.Generic.List<OutliningRegion>();
        
        private bool m_ExcludeFromSearch;
        
        public BoundSourceInfo() {
        }
        
        public BoundSourceInfo(Codex.IBoundSourceInfo value) {
            this.CopyFrom<BoundSourceInfo>(value);
        }
        
        public BoundSourceInfo(Codex.IProjectFileScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The number of references in the file
        /// </summary>
        public virtual int ReferenceCount {
            get {
                return this.CoerceReferenceCount(this.m_ReferenceCount);
            }
            set {
                this.m_ReferenceCount = value;
            }
        }
        
        /// <summary>
        /// The number of definitions in the file
        /// </summary>
        public virtual int DefinitionCount {
            get {
                return this.CoerceDefinitionCount(this.m_DefinitionCount);
            }
            set {
                this.m_DefinitionCount = value;
            }
        }
        
        /// <summary>
        /// The language of the file
        /// TODO: Remove
        /// </summary>
        public virtual string Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        /// <summary>
        /// References for the document. Sorted. May overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IReferenceSpan> Codex.IBoundSourceInfo.References {
            get {
                return this.References;
            }
        }
        
        /// <summary>
        /// References for the document. Sorted. May overlap.
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ReferenceSpan> References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// Definitions for the document. Sorted. No overlap?
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDefinitionSpan> Codex.IBoundSourceInfo.Definitions {
            get {
                return this.Definitions;
            }
        }
        
        /// <summary>
        /// Definitions for the document. Sorted. No overlap?
        /// </summary>
        public virtual System.Collections.Generic.List<DefinitionSpan> Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// Classifications for the document. Sorted by start index. No overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IClassificationSpan> Codex.IBoundSourceInfo.Classifications {
            get {
                return this.Classifications;
            }
        }
        
        /// <summary>
        /// Classifications for the document. Sorted by start index. No overlap.
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ClassificationSpan> Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        /// <summary>
        /// Outlining regions for the document. May overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IOutliningRegion> Codex.IBoundSourceInfo.OutliningRegions {
            get {
                return this.OutliningRegions;
            }
        }
        
        /// <summary>
        /// Outlining regions for the document. May overlap.
        /// </summary>
        public virtual System.Collections.Generic.List<OutliningRegion> OutliningRegions {
            get {
                return this.m_OutliningRegions;
            }
            set {
                this.m_OutliningRegions = value;
            }
        }
        
        /// <summary>
        /// Indicates that the file should be excluded from text search
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IBoundSourceInfo value)
            where TTarget : BoundSourceInfo {
            this.m_ReferenceCount = ((Codex.IBoundSourceInfo)(value)).ReferenceCount;
            this.m_DefinitionCount = ((Codex.IBoundSourceInfo)(value)).DefinitionCount;
            this.m_Language = ((Codex.IBoundSourceInfo)(value)).Language;
            this.m_References = new System.Collections.Generic.List<ReferenceSpan>(System.Linq.Enumerable.Select(((Codex.IBoundSourceInfo)(value)).References, v => EntityUtilities.NullOrCopy(v, _v => new ReferenceSpan().CopyFrom<ReferenceSpan>(_v))));
            this.m_Definitions = new System.Collections.Generic.List<DefinitionSpan>(System.Linq.Enumerable.Select(((Codex.IBoundSourceInfo)(value)).Definitions, v => EntityUtilities.NullOrCopy(v, _v => new DefinitionSpan().CopyFrom<DefinitionSpan>(_v))));
            this.m_Classifications = new System.Collections.Generic.List<ClassificationSpan>(System.Linq.Enumerable.Select(((Codex.IBoundSourceInfo)(value)).Classifications, v => EntityUtilities.NullOrCopy(v, _v => new ClassificationSpan().CopyFrom<ClassificationSpan>(_v))));
            this.m_OutliningRegions = new System.Collections.Generic.List<OutliningRegion>(System.Linq.Enumerable.Select(((Codex.IBoundSourceInfo)(value)).OutliningRegions, v => EntityUtilities.NullOrCopy(v, _v => new OutliningRegion().CopyFrom<OutliningRegion>(_v))));
            this.m_ExcludeFromSearch = ((Codex.IBoundSourceInfo)(value)).ExcludeFromSearch;
            base.CopyFrom<ProjectFileScopeEntity>(((Codex.IProjectFileScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Information about a source file as defined by the source control provider
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceControlFileInfo))]
    public partial class SourceControlFileInfo : Codex.EntityBase, Codex.ISourceControlFileInfo {
        
        private string m_SourceControlContentId;
        
        public SourceControlFileInfo() {
            Initialize();
        }
        
        public SourceControlFileInfo(Codex.ISourceControlFileInfo value) {
            Initialize();
            this.CopyFrom<SourceControlFileInfo>(value);
        }
        
        /// <summary>
        /// Unique id for the source file content as defined by the source control provider (i.e. git SHA)
        /// </summary>
        public virtual string SourceControlContentId {
            get {
                return this.m_SourceControlContentId;
            }
            set {
                this.m_SourceControlContentId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceControlFileInfo value)
            where TTarget : SourceControlFileInfo {
            this.m_SourceControlContentId = ((Codex.ISourceControlFileInfo)(value)).SourceControlContentId;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFileInfo))]
    public partial class SourceFileInfo : Codex.EntityBase, Codex.ISourceFileInfo {
        
        private int m_Lines;
        
        private int m_Size;
        
        private string m_Language;
        
        private string m_WebAddress;
        
        private EncodingDescription m_Encoding;
        
        private PropertyMap m_Properties;
        
        private string m_RepoRelativePath;
        
        private string m_RepositoryName;
        
        private string m_SourceControlContentId;
        
        private string m_ProjectRelativePath;
        
        private string m_ProjectId;
        
        public SourceFileInfo() {
            Initialize();
        }
        
        public SourceFileInfo(Codex.ISourceFileInfo value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        public SourceFileInfo(Codex.IRepoFileScopeEntity value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        public SourceFileInfo(Codex.IRepoScopeEntity value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        public SourceFileInfo(Codex.ISourceControlFileInfo value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        public SourceFileInfo(Codex.IProjectFileScopeEntity value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        public SourceFileInfo(Codex.IProjectScopeEntity value) {
            Initialize();
            this.CopyFrom<SourceFileInfo>(value);
        }
        
        /// <summary>
        /// The number of lines in the file
        /// </summary>
        public virtual int Lines {
            get {
                return this.m_Lines;
            }
            set {
                this.m_Lines = value;
            }
        }
        
        /// <summary>
        /// The size of the file in bytes
        /// </summary>
        public virtual int Size {
            get {
                return this.m_Size;
            }
            set {
                this.m_Size = value;
            }
        }
        
        /// <summary>
        /// The language of the file
        /// TODO: Remove
        /// </summary>
        public virtual string Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        /// <summary>
        /// The web address of the file. TODO: Remove? Is repo relative path enough?
        /// </summary>
        public virtual string WebAddress {
            get {
                return this.m_WebAddress;
            }
            set {
                this.m_WebAddress = value;
            }
        }
        
        /// <summary>
        /// The encoding used for the file
        /// </summary>
        Codex.IEncodingDescription Codex.ISourceFileInfo.Encoding {
            get {
                return this.Encoding;
            }
        }
        
        /// <summary>
        /// The encoding used for the file
        /// </summary>
        public virtual EncodingDescription Encoding {
            get {
                return this.m_Encoding;
            }
            set {
                this.m_Encoding = value;
            }
        }
        
        /// <summary>
        /// Extensible key value properties for the document.
        /// </summary>
        Codex.IPropertyMap Codex.ISourceFileInfo.Properties {
            get {
                return this.Properties;
            }
        }
        
        /// <summary>
        /// Extensible key value properties for the document.
        /// </summary>
        public virtual PropertyMap Properties {
            get {
                return this.m_Properties;
            }
            set {
                this.m_Properties = value;
            }
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        /// <summary>
        /// Unique id for the source file content as defined by the source control provider (i.e. git SHA)
        /// </summary>
        public virtual string SourceControlContentId {
            get {
                return this.m_SourceControlContentId;
            }
            set {
                this.m_SourceControlContentId = value;
            }
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : SourceFileInfo {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoFileScopeEntity value)
            where TTarget : SourceFileInfo {
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceControlFileInfo value)
            where TTarget : SourceFileInfo {
            this.m_SourceControlContentId = ((Codex.ISourceControlFileInfo)(value)).SourceControlContentId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectScopeEntity value)
            where TTarget : SourceFileInfo {
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectFileScopeEntity value)
            where TTarget : SourceFileInfo {
            this.m_ProjectRelativePath = ((Codex.IProjectFileScopeEntity)(value)).ProjectRelativePath;
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceFileInfo value)
            where TTarget : SourceFileInfo {
            this.m_Lines = ((Codex.ISourceFileInfo)(value)).Lines;
            this.m_Size = ((Codex.ISourceFileInfo)(value)).Size;
            this.m_Language = ((Codex.ISourceFileInfo)(value)).Language;
            this.m_WebAddress = ((Codex.ISourceFileInfo)(value)).WebAddress;
            this.m_Encoding = EntityUtilities.NullOrCopy(value.Encoding, v => new EncodingDescription().CopyFrom<EncodingDescription>(v));;
            this.m_Properties = EntityUtilities.NullOrCopy(value.Properties, v => new PropertyMap().CopyFrom<PropertyMap>(v));;
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            this.m_SourceControlContentId = ((Codex.ISourceControlFileInfo)(value)).SourceControlContentId;
            this.m_ProjectRelativePath = ((Codex.IProjectFileScopeEntity)(value)).ProjectRelativePath;
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Describes encoding so that file may be reconstituted in a byte-identical form
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IEncodingDescription))]
    public partial class EncodingDescription : Codex.EntityBase, Codex.IEncodingDescription {
        
        private string m_Name;
        
        private byte[] m_Preamble;
        
        public EncodingDescription() {
            Initialize();
        }
        
        public EncodingDescription(Codex.IEncodingDescription value) {
            Initialize();
            this.CopyFrom<EncodingDescription>(value);
        }
        
        /// <summary>
        /// The name of the encoding
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The encoding preamble
        /// </summary>
        public virtual byte[] Preamble {
            get {
                return this.m_Preamble;
            }
            set {
                this.m_Preamble = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IEncodingDescription value)
            where TTarget : EncodingDescription {
            this.m_Name = ((Codex.IEncodingDescription)(value)).Name;
            this.m_Preamble = ((Codex.IEncodingDescription)(value)).Preamble;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Defines text contents of a file and associated data
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFile))]
    public partial class SourceFile : Codex.EntityBase, Codex.ISourceFile {
        
        private SourceFileInfo m_Info;
        
        private string m_Content;
        
        private bool m_ExcludeFromSearch;
        
        public SourceFile() {
            Initialize();
        }
        
        public SourceFile(Codex.ISourceFile value) {
            Initialize();
            this.CopyFrom<SourceFile>(value);
        }
        
        /// <summary>
        /// The information about the source file
        /// </summary>
        Codex.ISourceFileInfo Codex.ISourceFile.Info {
            get {
                return this.Info;
            }
        }
        
        /// <summary>
        /// The information about the source file
        /// </summary>
        public virtual SourceFileInfo Info {
            get {
                return this.m_Info;
            }
            set {
                this.m_Info = value;
            }
        }
        
        /// <summary>
        /// The content of the file
        /// </summary>
        public virtual string Content {
            get {
                return this.m_Content;
            }
            set {
                this.m_Content = value;
            }
        }
        
        /// <summary>
        /// Indicates that the file should be excluded from text search
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceFile value)
            where TTarget : SourceFile {
            this.m_Info = EntityUtilities.NullOrCopy(value.Info, v => new SourceFileInfo().CopyFrom<SourceFileInfo>(v));;
            this.m_Content = ((Codex.ISourceFile)(value)).Content;
            this.m_ExcludeFromSearch = ((Codex.ISourceFile)(value)).ExcludeFromSearch;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IOutliningRegion))]
    public partial class OutliningRegion : Codex.EntityBase, Codex.IOutliningRegion {
        
        private string m_Kind;
        
        private LineSpan m_Header;
        
        private LineSpan m_Content;
        
        public OutliningRegion() {
            Initialize();
        }
        
        public OutliningRegion(Codex.IOutliningRegion value) {
            Initialize();
            this.CopyFrom<OutliningRegion>(value);
        }
        
        public virtual string Kind {
            get {
                return this.m_Kind;
            }
            set {
                this.m_Kind = value;
            }
        }
        
        /// <summary>
        /// Defines the region containing the header text of the outlining region
        /// </summary>
        Codex.ILineSpan Codex.IOutliningRegion.Header {
            get {
                return this.Header;
            }
        }
        
        /// <summary>
        /// Defines the region containing the header text of the outlining region
        /// </summary>
        public virtual LineSpan Header {
            get {
                return this.m_Header;
            }
            set {
                this.m_Header = value;
            }
        }
        
        /// <summary>
        /// Defines the region containing the collapsible content region of the outlining region
        /// </summary>
        Codex.ILineSpan Codex.IOutliningRegion.Content {
            get {
                return this.Content;
            }
        }
        
        /// <summary>
        /// Defines the region containing the collapsible content region of the outlining region
        /// </summary>
        public virtual LineSpan Content {
            get {
                return this.m_Content;
            }
            set {
                this.m_Content = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IOutliningRegion value)
            where TTarget : OutliningRegion {
            this.m_Kind = ((Codex.IOutliningRegion)(value)).Kind;
            this.m_Header = EntityUtilities.NullOrCopy(value.Header, v => new LineSpan().CopyFrom<LineSpan>(v));;
            this.m_Content = EntityUtilities.NullOrCopy(value.Content, v => new LineSpan().CopyFrom<LineSpan>(v));;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSpan))]
    public partial class DefinitionSpan : Span, Codex.IDefinitionSpan {
        
        private DefinitionSymbol m_Definition;
        
        private System.Collections.Generic.IReadOnlyList<ParameterDefinitionSpan> m_Parameters = Codex.Utilities.CollectionUtilities.Empty<ParameterDefinitionSpan>.Array;
        
        public DefinitionSpan() {
        }
        
        public DefinitionSpan(Codex.IDefinitionSpan value) {
            this.CopyFrom<DefinitionSpan>(value);
        }
        
        public DefinitionSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The definition symbol referred to by the span
        /// </summary>
        Codex.IDefinitionSymbol Codex.IDefinitionSpan.Definition {
            get {
                return this.Definition;
            }
        }
        
        /// <summary>
        /// The definition symbol referred to by the span
        /// </summary>
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        /// <summary>
        /// Gets the definitions for parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterDefinitionSpan> Codex.IDefinitionSpan.Parameters {
            get {
                return this.Parameters;
            }
        }
        
        /// <summary>
        /// Gets the definitions for parameters
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ParameterDefinitionSpan> Parameters {
            get {
                return this.m_Parameters;
            }
            set {
                this.m_Parameters = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IDefinitionSpan value)
            where TTarget : DefinitionSpan {
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().CopyFrom<DefinitionSymbol>(v));;
            this.m_Parameters = new System.Collections.Generic.List<ParameterDefinitionSpan>(System.Linq.Enumerable.Select(((Codex.IDefinitionSpan)(value)).Parameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterDefinitionSpan().CopyFrom<ParameterDefinitionSpan>(_v))));
            base.CopyFrom<Span>(((Codex.ISpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// A specialized definition span referring to a parameter of a method/property
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterDefinitionSpan))]
    public partial class ParameterDefinitionSpan : LineSpan, Codex.IParameterDefinitionSpan {
        
        private int m_ParameterIndex;
        
        private string m_Name;
        
        public ParameterDefinitionSpan() {
        }
        
        public ParameterDefinitionSpan(Codex.IParameterDefinitionSpan value) {
            this.CopyFrom<ParameterDefinitionSpan>(value);
        }
        
        public ParameterDefinitionSpan(Codex.ILineSpan value) : 
                base(value) {
        }
        
        public ParameterDefinitionSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The index of the parameter in the list of parameters for the method
        /// </summary>
        public virtual int ParameterIndex {
            get {
                return this.m_ParameterIndex;
            }
            set {
                this.m_ParameterIndex = value;
            }
        }
        
        /// <summary>
        /// The name of the parameter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IParameterDefinitionSpan value)
            where TTarget : ParameterDefinitionSpan {
            this.m_ParameterIndex = ((Codex.IParameterDefinitionSpan)(value)).ParameterIndex;
            this.m_Name = ((Codex.IParameterDefinitionSpan)(value)).Name;
            base.CopyFrom<LineSpan>(((Codex.ILineSpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSpan))]
    public partial class ReferenceSpan : SymbolSpan, Codex.IReferenceSpan {
        
        private Codex.ObjectModel.SymbolId m_RelatedDefinition;
        
        private ReferenceSymbol m_Reference;
        
        private System.Collections.Generic.IReadOnlyList<ParameterReferenceSpan> m_Parameters = Codex.Utilities.CollectionUtilities.Empty<ParameterReferenceSpan>.Array;
        
        public ReferenceSpan() {
        }
        
        public ReferenceSpan(Codex.IReferenceSpan value) {
            this.CopyFrom<ReferenceSpan>(value);
        }
        
        public ReferenceSpan(Codex.ISymbolSpan value) : 
                base(value) {
        }
        
        public ReferenceSpan(Codex.ITextLineSpan value) : 
                base(value) {
        }
        
        public ReferenceSpan(Codex.ILineSpan value) : 
                base(value) {
        }
        
        public ReferenceSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// Gets the symbol id of the definition which provides this reference
        /// (i.e. method definition for interface implementation)
        /// </summary>
        public virtual Codex.ObjectModel.SymbolId RelatedDefinition {
            get {
                return this.m_RelatedDefinition;
            }
            set {
                this.m_RelatedDefinition = value;
            }
        }
        
        /// <summary>
        /// The reference symbol referred to by the span
        /// </summary>
        Codex.IReferenceSymbol Codex.IReferenceSpan.Reference {
            get {
                return this.Reference;
            }
        }
        
        /// <summary>
        /// The reference symbol referred to by the span
        /// </summary>
        public virtual ReferenceSymbol Reference {
            get {
                return this.m_Reference;
            }
            set {
                this.m_Reference = value;
            }
        }
        
        /// <summary>
        /// Gets the references to parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterReferenceSpan> Codex.IReferenceSpan.Parameters {
            get {
                return this.Parameters;
            }
        }
        
        /// <summary>
        /// Gets the references to parameters
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ParameterReferenceSpan> Parameters {
            get {
                return this.m_Parameters;
            }
            set {
                this.m_Parameters = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IReferenceSpan value)
            where TTarget : ReferenceSpan {
            this.m_RelatedDefinition = ((Codex.IReferenceSpan)(value)).RelatedDefinition;
            this.m_Reference = EntityUtilities.NullOrCopy(value.Reference, v => new ReferenceSymbol().CopyFrom<ReferenceSymbol>(v));;
            this.m_Parameters = new System.Collections.Generic.List<ParameterReferenceSpan>(System.Linq.Enumerable.Select(((Codex.IReferenceSpan)(value)).Parameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterReferenceSpan().CopyFrom<ParameterReferenceSpan>(_v))));
            base.CopyFrom<SymbolSpan>(((Codex.ISymbolSpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// A specialized reference span referring to a parameter to a method/property
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterReferenceSpan))]
    public partial class ParameterReferenceSpan : SymbolSpan, Codex.IParameterReferenceSpan {
        
        private int m_ParameterIndex;
        
        public ParameterReferenceSpan() {
        }
        
        public ParameterReferenceSpan(Codex.IParameterReferenceSpan value) {
            this.CopyFrom<ParameterReferenceSpan>(value);
        }
        
        public ParameterReferenceSpan(Codex.ISymbolSpan value) : 
                base(value) {
        }
        
        public ParameterReferenceSpan(Codex.ITextLineSpan value) : 
                base(value) {
        }
        
        public ParameterReferenceSpan(Codex.ILineSpan value) : 
                base(value) {
        }
        
        public ParameterReferenceSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The index of the parameter in the list of parameters for the method
        /// </summary>
        public virtual int ParameterIndex {
            get {
                return this.m_ParameterIndex;
            }
            set {
                this.m_ParameterIndex = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IParameterReferenceSpan value)
            where TTarget : ParameterReferenceSpan {
            this.m_ParameterIndex = ((Codex.IParameterReferenceSpan)(value)).ParameterIndex;
            base.CopyFrom<SymbolSpan>(((Codex.ISymbolSpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Defines a classified span of text
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IClassificationSpan))]
    public partial class ClassificationSpan : Span, Codex.IClassificationSpan {
        
        private int m_DefaultClassificationColor;
        
        private string m_Classification;
        
        private int m_LocalGroupId;
        
        public ClassificationSpan() {
        }
        
        public ClassificationSpan(Codex.IClassificationSpan value) {
            this.CopyFrom<ClassificationSpan>(value);
        }
        
        public ClassificationSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The default classification color for the span. This is used for
        /// contexts where a mapping from classification id to color is not
        /// available.
        /// </summary>
        public virtual int DefaultClassificationColor {
            get {
                return this.m_DefaultClassificationColor;
            }
            set {
                this.m_DefaultClassificationColor = value;
            }
        }
        
        /// <summary>
        /// The classification identifier for the span
        /// </summary>
        public virtual string Classification {
            get {
                return this.m_Classification;
            }
            set {
                this.m_Classification = value;
            }
        }
        
        /// <summary>
        /// The identifier to the local group of spans which refer to the same common symbol
        /// </summary>
        public virtual int LocalGroupId {
            get {
                return this.m_LocalGroupId;
            }
            set {
                this.m_LocalGroupId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IClassificationSpan value)
            where TTarget : ClassificationSpan {
            this.m_DefaultClassificationColor = ((Codex.IClassificationSpan)(value)).DefaultClassificationColor;
            this.m_Classification = ((Codex.IClassificationSpan)(value)).Classification;
            this.m_LocalGroupId = ((Codex.IClassificationSpan)(value)).LocalGroupId;
            base.CopyFrom<Span>(((Codex.ISpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISymbolSpan))]
    public partial class SymbolSpan : TextLineSpan, Codex.ISymbolSpan {
        
        public SymbolSpan() {
        }
        
        public SymbolSpan(Codex.ISymbolSpan value) {
            this.CopyFrom<SymbolSpan>(value);
        }
        
        public SymbolSpan(Codex.ITextLineSpan value) : 
                base(value) {
        }
        
        public SymbolSpan(Codex.ILineSpan value) : 
                base(value) {
        }
        
        public SymbolSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISymbolSpan value)
            where TTarget : SymbolSpan {
            base.CopyFrom<TextLineSpan>(((Codex.ITextLineSpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITextLineSpan))]
    public partial class TextLineSpan : LineSpan, Codex.ITextLineSpan {
        
        private string m_LineSpanText;
        
        public TextLineSpan() {
        }
        
        public TextLineSpan(Codex.ITextLineSpan value) {
            this.CopyFrom<TextLineSpan>(value);
        }
        
        public TextLineSpan(Codex.ILineSpan value) : 
                base(value) {
        }
        
        public TextLineSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The line text
        /// TODO: It would be nice to not store this here and instead apply it as a join
        /// </summary>
        public virtual string LineSpanText {
            get {
                return this.m_LineSpanText;
            }
            set {
                this.m_LineSpanText = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ITextLineSpan value)
            where TTarget : TextLineSpan {
            this.m_LineSpanText = ((Codex.ITextLineSpan)(value)).LineSpanText;
            base.CopyFrom<LineSpan>(((Codex.ILineSpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILineSpan))]
    public partial class LineSpan : Span, Codex.ILineSpan {
        
        private System.Nullable<int> m_LineIndex;
        
        private System.Nullable<int> m_LineNumber;
        
        private int m_LineSpanStart;
        
        private int m_LineOffset;
        
        public LineSpan() {
        }
        
        public LineSpan(Codex.ILineSpan value) {
            this.CopyFrom<LineSpan>(value);
        }
        
        public LineSpan(Codex.ISpan value) : 
                base(value) {
        }
        
        /// <summary>
        /// The 0-based index of the line containing the span
        /// </summary>
        public virtual int LineIndex {
            get {
                return this.CoerceLineIndex(this.m_LineIndex);
            }
            set {
                this.m_LineIndex = value;
            }
        }
        
        /// <summary>
        /// The 1-based line number of the line containing the span
        /// </summary>
        public virtual int LineNumber {
            get {
                return this.CoerceLineNumber(this.m_LineNumber);
            }
            set {
                this.m_LineNumber = value;
            }
        }
        
        /// <summary>
        /// The character position where the span starts in the line text
        /// </summary>
        public virtual int LineSpanStart {
            get {
                return this.m_LineSpanStart;
            }
            set {
                this.m_LineSpanStart = value;
            }
        }
        
        /// <summary>
        /// If positive, the offset of the line span from the beginning of the line
        /// If negative, the offset of the linespan from the end of the next line
        /// </summary>
        public virtual int LineOffset {
            get {
                return this.m_LineOffset;
            }
            set {
                this.m_LineOffset = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ILineSpan value)
            where TTarget : LineSpan {
            this.m_LineIndex = ((Codex.ILineSpan)(value)).LineIndex;
            this.m_LineNumber = ((Codex.ILineSpan)(value)).LineNumber;
            this.m_LineSpanStart = ((Codex.ILineSpan)(value)).LineSpanStart;
            this.m_LineOffset = ((Codex.ILineSpan)(value)).LineOffset;
            base.CopyFrom<Span>(((Codex.ISpan)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISpan))]
    public partial class Span : Codex.EntityBase, Codex.ISpan {
        
        private int m_Start;
        
        private int m_Length;
        
        public Span() {
            Initialize();
        }
        
        public Span(Codex.ISpan value) {
            Initialize();
            this.CopyFrom<Span>(value);
        }
        
        /// <summary>
        /// The absolute character offset of the span within the document
        /// </summary>
        public virtual int Start {
            get {
                return this.m_Start;
            }
            set {
                this.m_Start = value;
            }
        }
        
        /// <summary>
        /// The length of the span
        /// </summary>
        public virtual int Length {
            get {
                return this.m_Length;
            }
            set {
                this.m_Length = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISpan value)
            where TTarget : Span {
            this.m_Start = ((Codex.ISpan)(value)).Start;
            this.m_Length = ((Codex.ISpan)(value)).Length;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReview))]
    public partial class CodeReview : Codex.EntityBase, Codex.ICodeReview {
        
        private string m_Id;
        
        private string m_Description;
        
        private string m_Url;
        
        private Codex.CodeReviewStatus m_Status;
        
        public CodeReview() {
            Initialize();
        }
        
        public CodeReview(Codex.ICodeReview value) {
            Initialize();
            this.CopyFrom<CodeReview>(value);
        }
        
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// Url for accessing code review in source control management (i.e. GitHub or VSO)
        /// </summary>
        public virtual string Url {
            get {
                return this.m_Url;
            }
            set {
                this.m_Url = value;
            }
        }
        
        public virtual Codex.CodeReviewStatus Status {
            get {
                return this.m_Status;
            }
            set {
                this.m_Status = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReview value)
            where TTarget : CodeReview {
            this.m_Id = ((Codex.ICodeReview)(value)).Id;
            this.m_Description = ((Codex.ICodeReview)(value)).Description;
            this.m_Url = ((Codex.ICodeReview)(value)).Url;
            this.m_Status = ((Codex.ICodeReview)(value)).Status;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewIteration))]
    public partial class CodeReviewIteration : Codex.EntityBase, Codex.ICodeReviewIteration {
        
        private int m_IterationNumber;
        
        private string m_ReviewId;
        
        private string m_Description;
        
        private System.Collections.Generic.List<CodeReviewFile> m_Files = new System.Collections.Generic.List<CodeReviewFile>();
        
        public CodeReviewIteration() {
            Initialize();
        }
        
        public CodeReviewIteration(Codex.ICodeReviewIteration value) {
            Initialize();
            this.CopyFrom<CodeReviewIteration>(value);
        }
        
        public virtual int IterationNumber {
            get {
                return this.m_IterationNumber;
            }
            set {
                this.m_IterationNumber = value;
            }
        }
        
        public virtual string ReviewId {
            get {
                return this.m_ReviewId;
            }
            set {
                this.m_ReviewId = value;
            }
        }
        
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICodeReviewFile> Codex.ICodeReviewIteration.Files {
            get {
                return this.Files;
            }
        }
        
        public virtual System.Collections.Generic.List<CodeReviewFile> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReviewIteration value)
            where TTarget : CodeReviewIteration {
            this.m_IterationNumber = ((Codex.ICodeReviewIteration)(value)).IterationNumber;
            this.m_ReviewId = ((Codex.ICodeReviewIteration)(value)).ReviewId;
            this.m_Description = ((Codex.ICodeReviewIteration)(value)).Description;
            this.m_Files = new System.Collections.Generic.List<CodeReviewFile>(System.Linq.Enumerable.Select(((Codex.ICodeReviewIteration)(value)).Files, v => EntityUtilities.NullOrCopy(v, _v => new CodeReviewFile().CopyFrom<CodeReviewFile>(_v))));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewerInfo))]
    public partial class CodeReviewerInfo : Codex.EntityBase, Codex.ICodeReviewerInfo {
        
        private string m_Name;
        
        public CodeReviewerInfo() {
            Initialize();
        }
        
        public CodeReviewerInfo(Codex.ICodeReviewerInfo value) {
            Initialize();
            this.CopyFrom<CodeReviewerInfo>(value);
        }
        
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReviewerInfo value)
            where TTarget : CodeReviewerInfo {
            this.m_Name = ((Codex.ICodeReviewerInfo)(value)).Name;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewFile))]
    public partial class CodeReviewFile : Codex.EntityBase, Codex.ICodeReviewFile {
        
        private int m_StartIteration;
        
        private string m_RepoRelativePath;
        
        private string m_FileId;
        
        private string m_BaselineFileId;
        
        private Codex.FileChangeKind m_ChangeKind;
        
        public CodeReviewFile() {
            Initialize();
        }
        
        public CodeReviewFile(Codex.ICodeReviewFile value) {
            Initialize();
            this.CopyFrom<CodeReviewFile>(value);
        }
        
        /// <summary>
        /// The first iteration in which this file appears
        /// </summary>
        public virtual int StartIteration {
            get {
                return this.m_StartIteration;
            }
            set {
                this.m_StartIteration = value;
            }
        }
        
        /// <summary>
        /// The relative path in the repository
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The file id of the new version of the file
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        /// <summary>
        /// The file id of the baseline version of the file
        /// </summary>
        public virtual string BaselineFileId {
            get {
                return this.m_BaselineFileId;
            }
            set {
                this.m_BaselineFileId = value;
            }
        }
        
        /// <summary>
        /// The type of change applied to the file
        /// </summary>
        public virtual Codex.FileChangeKind ChangeKind {
            get {
                return this.m_ChangeKind;
            }
            set {
                this.m_ChangeKind = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReviewFile value)
            where TTarget : CodeReviewFile {
            this.m_StartIteration = ((Codex.ICodeReviewFile)(value)).StartIteration;
            this.m_RepoRelativePath = ((Codex.ICodeReviewFile)(value)).RepoRelativePath;
            this.m_FileId = ((Codex.ICodeReviewFile)(value)).FileId;
            this.m_BaselineFileId = ((Codex.ICodeReviewFile)(value)).BaselineFileId;
            this.m_ChangeKind = ((Codex.ICodeReviewFile)(value)).ChangeKind;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewCommentThread))]
    public partial class CodeReviewCommentThread : Codex.EntityBase, Codex.ICodeReviewCommentThread {
        
        private LineSpan m_OriginalSpan;
        
        private int m_StartIteration;
        
        private System.DateTime m_LastUpdated;
        
        private string m_FileRepoRelativePath;
        
        private System.Collections.Generic.List<CodeReviewComment> m_Comments = new System.Collections.Generic.List<CodeReviewComment>();
        
        public CodeReviewCommentThread() {
            Initialize();
        }
        
        public CodeReviewCommentThread(Codex.ICodeReviewCommentThread value) {
            Initialize();
            this.CopyFrom<CodeReviewCommentThread>(value);
        }
        
        /// <summary>
        /// The original location for the comment in the originating iteration
        /// </summary>
        Codex.ILineSpan Codex.ICodeReviewCommentThread.OriginalSpan {
            get {
                return this.OriginalSpan;
            }
        }
        
        /// <summary>
        /// The original location for the comment in the originating iteration
        /// </summary>
        public virtual LineSpan OriginalSpan {
            get {
                return this.m_OriginalSpan;
            }
            set {
                this.m_OriginalSpan = value;
            }
        }
        
        /// <summary>
        /// The iteration where the comment originated
        /// </summary>
        public virtual int StartIteration {
            get {
                return this.m_StartIteration;
            }
            set {
                this.m_StartIteration = value;
            }
        }
        
        /// <summary>
        /// The last tie
        /// </summary>
        public virtual System.DateTime LastUpdated {
            get {
                return this.m_LastUpdated;
            }
            set {
                this.m_LastUpdated = value;
            }
        }
        
        public virtual string FileRepoRelativePath {
            get {
                return this.m_FileRepoRelativePath;
            }
            set {
                this.m_FileRepoRelativePath = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICodeReviewComment> Codex.ICodeReviewCommentThread.Comments {
            get {
                return this.Comments;
            }
        }
        
        public virtual System.Collections.Generic.List<CodeReviewComment> Comments {
            get {
                return this.m_Comments;
            }
            set {
                this.m_Comments = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReviewCommentThread value)
            where TTarget : CodeReviewCommentThread {
            this.m_OriginalSpan = EntityUtilities.NullOrCopy(value.OriginalSpan, v => new LineSpan().CopyFrom<LineSpan>(v));;
            this.m_StartIteration = ((Codex.ICodeReviewCommentThread)(value)).StartIteration;
            this.m_LastUpdated = ((Codex.ICodeReviewCommentThread)(value)).LastUpdated;
            this.m_FileRepoRelativePath = ((Codex.ICodeReviewCommentThread)(value)).FileRepoRelativePath;
            this.m_Comments = new System.Collections.Generic.List<CodeReviewComment>(System.Linq.Enumerable.Select(((Codex.ICodeReviewCommentThread)(value)).Comments, v => EntityUtilities.NullOrCopy(v, _v => new CodeReviewComment().CopyFrom<CodeReviewComment>(_v))));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewComment))]
    public partial class CodeReviewComment : Codex.EntityBase, Codex.ICodeReviewComment {
        
        private string m_Text;
        
        private string m_Reviewer;
        
        private Codex.CommentImportance m_Importance;
        
        private System.DateTime m_CommentTime;
        
        public CodeReviewComment() {
            Initialize();
        }
        
        public CodeReviewComment(Codex.ICodeReviewComment value) {
            Initialize();
            this.CopyFrom<CodeReviewComment>(value);
        }
        
        public virtual string Text {
            get {
                return this.m_Text;
            }
            set {
                this.m_Text = value;
            }
        }
        
        /// <summary>
        /// The name of the reviewer which made the comment
        /// </summary>
        public virtual string Reviewer {
            get {
                return this.m_Reviewer;
            }
            set {
                this.m_Reviewer = value;
            }
        }
        
        /// <summary>
        /// The importance of the comment
        /// </summary>
        public virtual Codex.CommentImportance Importance {
            get {
                return this.m_Importance;
            }
            set {
                this.m_Importance = value;
            }
        }
        
        /// <summary>
        /// The time when the comment was submitted
        /// </summary>
        public virtual System.DateTime CommentTime {
            get {
                return this.m_CommentTime;
            }
            set {
                this.m_CommentTime = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeReviewComment value)
            where TTarget : CodeReviewComment {
            this.m_Text = ((Codex.ICodeReviewComment)(value)).Text;
            this.m_Reviewer = ((Codex.ICodeReviewComment)(value)).Reviewer;
            this.m_Importance = ((Codex.ICodeReviewComment)(value)).Importance;
            this.m_CommentTime = ((Codex.ICodeReviewComment)(value)).CommentTime;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Marker document for tracking reservation of stable ids from a given stable id shard
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStableIdMarker))]
    public partial class StableIdMarker : SearchEntity, Codex.IStableIdMarker {
        
        private int m_NextValue;
        
        private System.Collections.Generic.List<int> m_FreeList = new System.Collections.Generic.List<int>();
        
        private System.Collections.Generic.List<StableIdReservation> m_PendingReservations = new System.Collections.Generic.List<StableIdReservation>();
        
        public StableIdMarker() {
        }
        
        public StableIdMarker(Codex.IStableIdMarker value) {
            this.CopyFrom<StableIdMarker>(value);
        }
        
        public StableIdMarker(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The next tail available stable id
        /// </summary>
        public virtual int NextValue {
            get {
                return this.m_NextValue;
            }
            set {
                this.m_NextValue = value;
            }
        }
        
        /// <summary>
        /// The list of free indices
        /// </summary>
        System.Collections.Generic.IReadOnlyList<int> Codex.IStableIdMarker.FreeList {
            get {
                return this.FreeList;
            }
        }
        
        /// <summary>
        /// The list of free indices
        /// </summary>
        public virtual System.Collections.Generic.List<int> FreeList {
            get {
                return this.m_FreeList;
            }
            set {
                this.m_FreeList = value;
            }
        }
        
        /// <summary>
        /// The uncommitted reservations
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IStableIdReservation> Codex.IStableIdMarker.PendingReservations {
            get {
                return this.PendingReservations;
            }
        }
        
        /// <summary>
        /// The uncommitted reservations
        /// </summary>
        public virtual System.Collections.Generic.List<StableIdReservation> PendingReservations {
            get {
                return this.m_PendingReservations;
            }
            set {
                this.m_PendingReservations = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IStableIdMarker value)
            where TTarget : StableIdMarker {
            this.m_NextValue = ((Codex.IStableIdMarker)(value)).NextValue;
            this.m_FreeList = new System.Collections.Generic.List<int>(((Codex.IStableIdMarker)(value)).FreeList);
            this.m_PendingReservations = new System.Collections.Generic.List<StableIdReservation>(System.Linq.Enumerable.Select(((Codex.IStableIdMarker)(value)).PendingReservations, v => EntityUtilities.NullOrCopy(v, _v => new StableIdReservation().CopyFrom<StableIdReservation>(_v))));
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// A reservation of a set of stable ids.
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStableIdReservation))]
    public partial class StableIdReservation : Codex.EntityBase, Codex.IStableIdReservation {
        
        private string m_ReservationId;
        
        private System.DateTime m_ReservationDate;
        
        private System.Collections.Generic.List<int> m_ReservedIds = new System.Collections.Generic.List<int>();
        
        public StableIdReservation() {
            Initialize();
        }
        
        public StableIdReservation(Codex.IStableIdReservation value) {
            Initialize();
            this.CopyFrom<StableIdReservation>(value);
        }
        
        /// <summary>
        /// Unique id of the reservation. Used during commit to find and remove the reservation.
        /// </summary>
        public virtual string ReservationId {
            get {
                return this.m_ReservationId;
            }
            set {
                this.m_ReservationId = value;
            }
        }
        
        /// <summary>
        /// The date of the id reservation. Used for garbage collection of stale reservations.
        /// </summary>
        public virtual System.DateTime ReservationDate {
            get {
                return this.m_ReservationDate;
            }
            set {
                this.m_ReservationDate = value;
            }
        }
        
        /// <summary>
        /// The list of reserved ids for the reservation
        /// </summary>
        System.Collections.Generic.IReadOnlyList<int> Codex.IStableIdReservation.ReservedIds {
            get {
                return this.ReservedIds;
            }
        }
        
        /// <summary>
        /// The list of reserved ids for the reservation
        /// </summary>
        public virtual System.Collections.Generic.List<int> ReservedIds {
            get {
                return this.m_ReservedIds;
            }
            set {
                this.m_ReservedIds = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IStableIdReservation value)
            where TTarget : StableIdReservation {
            this.m_ReservationId = ((Codex.IStableIdReservation)(value)).ReservationId;
            this.m_ReservationDate = ((Codex.IStableIdReservation)(value)).ReservationDate;
            this.m_ReservedIds = new System.Collections.Generic.List<int>(((Codex.IStableIdReservation)(value)).ReservedIds);
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILanguageInfo))]
    public partial class LanguageInfo : Codex.EntityBase, Codex.ILanguageInfo {
        
        private string m_Name;
        
        private System.Collections.Generic.List<ClassificationStyle> m_Classifications = new System.Collections.Generic.List<ClassificationStyle>();
        
        public LanguageInfo() {
            Initialize();
        }
        
        public LanguageInfo(Codex.ILanguageInfo value) {
            Initialize();
            this.CopyFrom<LanguageInfo>(value);
        }
        
        /// <summary>
        /// The name of the language
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Describes the style for classified spans. See <see cref="P:Codex.IBoundSourceInfo.Classifications" />.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IClassificationStyle> Codex.ILanguageInfo.Classifications {
            get {
                return this.Classifications;
            }
        }
        
        /// <summary>
        /// Describes the style for classified spans. See <see cref="P:Codex.IBoundSourceInfo.Classifications" />.
        /// </summary>
        public virtual System.Collections.Generic.List<ClassificationStyle> Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ILanguageInfo value)
            where TTarget : LanguageInfo {
            this.m_Name = ((Codex.ILanguageInfo)(value)).Name;
            this.m_Classifications = new System.Collections.Generic.List<ClassificationStyle>(System.Linq.Enumerable.Select(((Codex.ILanguageInfo)(value)).Classifications, v => EntityUtilities.NullOrCopy(v, _v => new ClassificationStyle().CopyFrom<ClassificationStyle>(_v))));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Describes styling for a given classification
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IClassificationStyle))]
    public partial class ClassificationStyle : Codex.EntityBase, Codex.IClassificationStyle {
        
        private int m_Color;
        
        private bool m_Italic;
        
        private string m_Name;
        
        public ClassificationStyle() {
            Initialize();
        }
        
        public ClassificationStyle(Codex.IClassificationStyle value) {
            Initialize();
            this.CopyFrom<ClassificationStyle>(value);
        }
        
        /// <summary>
        /// The default classification color for the classification. This is used for
        /// contexts where a mapping from classification id to color is not
        /// available.
        /// </summary>
        public virtual int Color {
            get {
                return this.m_Color;
            }
            set {
                this.m_Color = value;
            }
        }
        
        /// <summary>
        /// Indicates whether the spans classified with this classification should have italic font by default
        /// </summary>
        public virtual bool Italic {
            get {
                return this.m_Italic;
            }
            set {
                this.m_Italic = value;
            }
        }
        
        /// <summary>
        /// The name of the classification
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IClassificationStyle value)
            where TTarget : ClassificationStyle {
            this.m_Color = ((Codex.IClassificationStyle)(value)).Color;
            this.m_Italic = ((Codex.IClassificationStyle)(value)).Italic;
            this.m_Name = ((Codex.IClassificationStyle)(value)).Name;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProject))]
    public partial class AnalyzedProject : ProjectScopeEntity, Codex.IProject {
        
        private string m_ProjectKind;
        
        private System.Collections.Generic.List<ProjectFileLink> m_Files = new System.Collections.Generic.List<ProjectFileLink>();
        
        private System.Collections.Generic.List<ReferencedProject> m_ProjectReferences = new System.Collections.Generic.List<ReferencedProject>();
        
        public AnalyzedProject() {
        }
        
        public AnalyzedProject(Codex.IProject value) {
            this.CopyFrom<AnalyzedProject>(value);
        }
        
        public AnalyzedProject(Codex.IProjectScopeEntity value) : 
                base(value) {
        }
        
        public AnalyzedProject(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The project kind (see <see cref="T:Codex.ObjectModel.ProjectKind" />)
        /// </summary>
        public virtual string ProjectKind {
            get {
                return this.m_ProjectKind;
            }
            set {
                this.m_ProjectKind = value;
            }
        }
        
        /// <summary>
        /// References to files in the project
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IProjectFileLink> Codex.IProject.Files {
            get {
                return this.Files;
            }
        }
        
        /// <summary>
        /// References to files in the project
        /// </summary>
        public virtual System.Collections.Generic.List<ProjectFileLink> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        /// <summary>
        /// Descriptions of referenced projects and used definitions from the projects
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IReferencedProject> Codex.IProject.ProjectReferences {
            get {
                return this.ProjectReferences;
            }
        }
        
        /// <summary>
        /// Descriptions of referenced projects and used definitions from the projects
        /// </summary>
        public virtual System.Collections.Generic.List<ReferencedProject> ProjectReferences {
            get {
                return this.m_ProjectReferences;
            }
            set {
                this.m_ProjectReferences = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProject value)
            where TTarget : AnalyzedProject {
            this.m_ProjectKind = ((Codex.IProject)(value)).ProjectKind;
            this.m_Files = new System.Collections.Generic.List<ProjectFileLink>(System.Linq.Enumerable.Select(((Codex.IProject)(value)).Files, v => EntityUtilities.NullOrCopy(v, _v => new ProjectFileLink().CopyFrom<ProjectFileLink>(_v))));
            this.m_ProjectReferences = new System.Collections.Generic.List<ReferencedProject>(System.Linq.Enumerable.Select(((Codex.IProject)(value)).ProjectReferences, v => EntityUtilities.NullOrCopy(v, _v => new ReferencedProject().CopyFrom<ReferencedProject>(_v))));
            base.CopyFrom<ProjectScopeEntity>(((Codex.IProjectScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferencedProject))]
    public partial class ReferencedProject : Codex.EntityBase, Codex.IReferencedProject {
        
        private string m_ProjectId;
        
        private System.Collections.Generic.List<DefinitionSymbol> m_Definitions = new System.Collections.Generic.List<DefinitionSymbol>();
        
        private string m_DisplayName;
        
        private PropertyMap m_Properties;
        
        public ReferencedProject() {
            Initialize();
        }
        
        public ReferencedProject(Codex.IReferencedProject value) {
            Initialize();
            this.CopyFrom<ReferencedProject>(value);
        }
        
        /// <summary>
        /// The identifier of the referenced project
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// Used definitions for the project. Sorted.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDefinitionSymbol> Codex.IReferencedProject.Definitions {
            get {
                return this.Definitions;
            }
        }
        
        /// <summary>
        /// Used definitions for the project. Sorted.
        /// </summary>
        public virtual System.Collections.Generic.List<DefinitionSymbol> Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// The display name of the project
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The properties of the project. Such as Version, PublicKey, etc.
        /// </summary>
        Codex.IPropertyMap Codex.IReferencedProject.Properties {
            get {
                return this.Properties;
            }
        }
        
        /// <summary>
        /// The properties of the project. Such as Version, PublicKey, etc.
        /// </summary>
        public virtual PropertyMap Properties {
            get {
                return this.m_Properties;
            }
            set {
                this.m_Properties = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IReferencedProject value)
            where TTarget : ReferencedProject {
            this.m_ProjectId = ((Codex.IReferencedProject)(value)).ProjectId;
            this.m_Definitions = new System.Collections.Generic.List<DefinitionSymbol>(System.Linq.Enumerable.Select(((Codex.IReferencedProject)(value)).Definitions, v => EntityUtilities.NullOrCopy(v, _v => new DefinitionSymbol().CopyFrom<DefinitionSymbol>(_v))));
            this.m_DisplayName = ((Codex.IReferencedProject)(value)).DisplayName;
            this.m_Properties = EntityUtilities.NullOrCopy(value.Properties, v => new PropertyMap().CopyFrom<PropertyMap>(v));;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// NOTE: Do not set <see cref="P:Codex.IRepoScopeEntity.RepositoryName" />
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectFileLink))]
    public partial class ProjectFileLink : ProjectFileScopeEntity, Codex.IProjectFileLink {
        
        private string m_FileId;
        
        public ProjectFileLink() {
        }
        
        public ProjectFileLink(Codex.IProjectFileLink value) {
            this.CopyFrom<ProjectFileLink>(value);
        }
        
        public ProjectFileLink(Codex.IProjectFileScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// Unique identifier for file
        /// TODO: Make this checksum and searchable and use for discovering commit from PDB.
        /// TODO: What is this?
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectFileLink value)
            where TTarget : ProjectFileLink {
            this.m_FileId = ((Codex.IProjectFileLink)(value)).FileId;
            base.CopyFrom<ProjectFileScopeEntity>(((Codex.IProjectFileScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Defines documentation about a symbol
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDocumentationInfo))]
    public partial class DocumentationInfo : Codex.EntityBase, Codex.IDocumentationInfo {
        
        private string m_DeclarationName;
        
        private string m_Comment;
        
        private Symbol m_AssociatedSymbol;
        
        private System.Collections.Generic.List<DocumentationReferenceSymbol> m_References = new System.Collections.Generic.List<DocumentationReferenceSymbol>();
        
        private string m_Summary;
        
        private string m_Remarks;
        
        private System.Collections.Generic.List<TypedParameterDocumentation> m_Arguments = new System.Collections.Generic.List<TypedParameterDocumentation>();
        
        private System.Collections.Generic.List<ParameterDocumentation> m_TypeParameters = new System.Collections.Generic.List<ParameterDocumentation>();
        
        private System.Collections.Generic.List<TypedParameterDocumentation> m_Exceptions = new System.Collections.Generic.List<TypedParameterDocumentation>();
        
        public DocumentationInfo() {
            Initialize();
        }
        
        public DocumentationInfo(Codex.IDocumentationInfo value) {
            Initialize();
            this.CopyFrom<DocumentationInfo>(value);
        }
        
        /// <summary>
        /// The declaration name for the symbol
        /// </summary>
        public virtual string DeclarationName {
            get {
                return this.m_DeclarationName;
            }
            set {
                this.m_DeclarationName = value;
            }
        }
        
        /// <summary>
        /// The comment applied to the definition (this is the raw doc comment text)
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        /// <summary>
        /// Identity of symbol which generated this documentation
        /// </summary>
        Codex.ICodeSymbol Codex.IDocumentationInfo.AssociatedSymbol {
            get {
                return this.AssociatedSymbol;
            }
        }
        
        /// <summary>
        /// Identity of symbol which generated this documentation
        /// </summary>
        public virtual Symbol AssociatedSymbol {
            get {
                return this.m_AssociatedSymbol;
            }
            set {
                this.m_AssociatedSymbol = value;
            }
        }
        
        /// <summary>
        /// The other symbols referenced by this symbol (i.e. base type, implemented interface
        /// or interface members, overridden members, return type of method or property type)
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDocumentationReferenceSymbol> Codex.IDocumentationInfo.References {
            get {
                return this.References;
            }
        }
        
        /// <summary>
        /// The other symbols referenced by this symbol (i.e. base type, implemented interface
        /// or interface members, overridden members, return type of method or property type)
        /// </summary>
        public virtual System.Collections.Generic.List<DocumentationReferenceSymbol> References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// Describes the symbol
        /// </summary>
        public virtual string Summary {
            get {
                return this.m_Summary;
            }
            set {
                this.m_Summary = value;
            }
        }
        
        /// <summary>
        /// Supplementation information about the symbol
        /// </summary>
        public virtual string Remarks {
            get {
                return this.m_Remarks;
            }
            set {
                this.m_Remarks = value;
            }
        }
        
        /// <summary>
        /// Comments on arguments
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ITypedParameterDocumentation> Codex.IDocumentationInfo.Arguments {
            get {
                return this.Arguments;
            }
        }
        
        /// <summary>
        /// Comments on arguments
        /// </summary>
        public virtual System.Collections.Generic.List<TypedParameterDocumentation> Arguments {
            get {
                return this.m_Arguments;
            }
            set {
                this.m_Arguments = value;
            }
        }
        
        /// <summary>
        /// Comments on type parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterDocumentation> Codex.IDocumentationInfo.TypeParameters {
            get {
                return this.TypeParameters;
            }
        }
        
        /// <summary>
        /// Comments on type parameters
        /// </summary>
        public virtual System.Collections.Generic.List<ParameterDocumentation> TypeParameters {
            get {
                return this.m_TypeParameters;
            }
            set {
                this.m_TypeParameters = value;
            }
        }
        
        /// <summary>
        /// Information about exceptions which can be thrown
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ITypedParameterDocumentation> Codex.IDocumentationInfo.Exceptions {
            get {
                return this.Exceptions;
            }
        }
        
        /// <summary>
        /// Information about exceptions which can be thrown
        /// </summary>
        public virtual System.Collections.Generic.List<TypedParameterDocumentation> Exceptions {
            get {
                return this.m_Exceptions;
            }
            set {
                this.m_Exceptions = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IDocumentationInfo value)
            where TTarget : DocumentationInfo {
            this.m_DeclarationName = ((Codex.IDocumentationInfo)(value)).DeclarationName;
            this.m_Comment = ((Codex.IDocumentationInfo)(value)).Comment;
            this.m_AssociatedSymbol = EntityUtilities.NullOrCopy(value.AssociatedSymbol, v => new Symbol().CopyFrom<Symbol>(v));;
            this.m_References = new System.Collections.Generic.List<DocumentationReferenceSymbol>(System.Linq.Enumerable.Select(((Codex.IDocumentationInfo)(value)).References, v => EntityUtilities.NullOrCopy(v, _v => new DocumentationReferenceSymbol().CopyFrom<DocumentationReferenceSymbol>(_v))));
            this.m_Summary = ((Codex.IDocumentationInfo)(value)).Summary;
            this.m_Remarks = ((Codex.IDocumentationInfo)(value)).Remarks;
            this.m_Arguments = new System.Collections.Generic.List<TypedParameterDocumentation>(System.Linq.Enumerable.Select(((Codex.IDocumentationInfo)(value)).Arguments, v => EntityUtilities.NullOrCopy(v, _v => new TypedParameterDocumentation().CopyFrom<TypedParameterDocumentation>(_v))));
            this.m_TypeParameters = new System.Collections.Generic.List<ParameterDocumentation>(System.Linq.Enumerable.Select(((Codex.IDocumentationInfo)(value)).TypeParameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterDocumentation().CopyFrom<ParameterDocumentation>(_v))));
            this.m_Exceptions = new System.Collections.Generic.List<TypedParameterDocumentation>(System.Linq.Enumerable.Select(((Codex.IDocumentationInfo)(value)).Exceptions, v => EntityUtilities.NullOrCopy(v, _v => new TypedParameterDocumentation().CopyFrom<TypedParameterDocumentation>(_v))));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Documentation for a method parameter
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterDocumentation))]
    public partial class ParameterDocumentation : Codex.EntityBase, Codex.IParameterDocumentation {
        
        private string m_Name;
        
        private string m_Comment;
        
        public ParameterDocumentation() {
            Initialize();
        }
        
        public ParameterDocumentation(Codex.IParameterDocumentation value) {
            Initialize();
            this.CopyFrom<ParameterDocumentation>(value);
        }
        
        /// <summary>
        /// The name of the parameter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The comment associated with the symbol
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IParameterDocumentation value)
            where TTarget : ParameterDocumentation {
            this.m_Name = ((Codex.IParameterDocumentation)(value)).Name;
            this.m_Comment = ((Codex.IParameterDocumentation)(value)).Comment;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Documentation for typed parameter
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITypedParameterDocumentation))]
    public partial class TypedParameterDocumentation : ParameterDocumentation, Codex.ITypedParameterDocumentation {
        
        private DocumentationReferenceSymbol m_Type;
        
        public TypedParameterDocumentation() {
        }
        
        public TypedParameterDocumentation(Codex.ITypedParameterDocumentation value) {
            this.CopyFrom<TypedParameterDocumentation>(value);
        }
        
        public TypedParameterDocumentation(Codex.IParameterDocumentation value) : 
                base(value) {
        }
        
        /// <summary>
        /// The type of the parameter
        /// </summary>
        Codex.IDocumentationReferenceSymbol Codex.ITypedParameterDocumentation.Type {
            get {
                return this.Type;
            }
        }
        
        /// <summary>
        /// The type of the parameter
        /// </summary>
        public virtual DocumentationReferenceSymbol Type {
            get {
                return this.m_Type;
            }
            set {
                this.m_Type = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ITypedParameterDocumentation value)
            where TTarget : TypedParameterDocumentation {
            this.m_Type = EntityUtilities.NullOrCopy(value.Type, v => new DocumentationReferenceSymbol().CopyFrom<DocumentationReferenceSymbol>(v));;
            base.CopyFrom<ParameterDocumentation>(((Codex.IParameterDocumentation)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Decribes a symbol related to a given documented symbol
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDocumentationReferenceSymbol))]
    public partial class DocumentationReferenceSymbol : ReferenceSymbol, Codex.IDocumentationReferenceSymbol {
        
        private string m_DisplayName;
        
        private string m_Comment;
        
        public DocumentationReferenceSymbol() {
        }
        
        public DocumentationReferenceSymbol(Codex.IDocumentationReferenceSymbol value) {
            this.CopyFrom<DocumentationReferenceSymbol>(value);
        }
        
        public DocumentationReferenceSymbol(Codex.IReferenceSymbol value) : 
                base(value) {
        }
        
        public DocumentationReferenceSymbol(Codex.ICodeSymbol value) : 
                base(value) {
        }
        
        /// <summary>
        /// The display name of the symbol reference as it should appear in documentation
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The comment associated with the reference
        /// (i.e. return type description https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/returns)
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IDocumentationReferenceSymbol value)
            where TTarget : DocumentationReferenceSymbol {
            this.m_DisplayName = ((Codex.IDocumentationReferenceSymbol)(value)).DisplayName;
            this.m_Comment = ((Codex.IDocumentationReferenceSymbol)(value)).Comment;
            base.CopyFrom<ReferenceSymbol>(((Codex.IReferenceSymbol)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IPropertySearchModel))]
    public partial class PropertySearchModel : SearchEntity, Codex.IPropertySearchModel {
        
        private string m_Key;
        
        private string m_Value;
        
        private string m_OwnerId;
        
        public PropertySearchModel() {
        }
        
        public PropertySearchModel(Codex.IPropertySearchModel value) {
            this.CopyFrom<PropertySearchModel>(value);
        }
        
        public PropertySearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The key of the property
        /// </summary>
        public virtual string Key {
            get {
                return this.m_Key;
            }
            set {
                this.m_Key = value;
            }
        }
        
        /// <summary>
        /// The value of the property
        /// </summary>
        public virtual string Value {
            get {
                return this.m_Value;
            }
            set {
                this.m_Value = value;
            }
        }
        
        /// <summary>
        /// The identifier of the object owning this property
        /// </summary>
        public virtual string OwnerId {
            get {
                return this.m_OwnerId;
            }
            set {
                this.m_OwnerId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IPropertySearchModel value)
            where TTarget : PropertySearchModel {
            this.m_Key = ((Codex.IPropertySearchModel)(value)).Key;
            this.m_Value = ((Codex.IPropertySearchModel)(value)).Value;
            this.m_OwnerId = ((Codex.IPropertySearchModel)(value)).OwnerId;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IPropertyMap))]
    public partial class PropertyMap : Codex.IPropertyMap {
        
        public PropertyMap() {
            Initialize();
        }
        
        public PropertyMap(Codex.IPropertyMap value) {
            Initialize();
            this.CopyFrom<PropertyMap>(value);
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IPropertyMap value)
            where TTarget : PropertyMap {
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepository))]
    public partial class Repository : Codex.EntityBase, Codex.IRepository {
        
        private string m_Name;
        
        private string m_Description;
        
        private string m_Id;
        
        private string m_WebAddress;
        
        private string m_SourceControlWebAddress;
        
        private string m_FileWebAddressTransformInputRegex;
        
        private string m_PrimaryBranch;
        
        private System.Collections.Generic.List<RepositoryReference> m_RepositoryReferences = new System.Collections.Generic.List<RepositoryReference>();
        
        public Repository() {
            Initialize();
        }
        
        public Repository(Codex.IRepository value) {
            Initialize();
            this.CopyFrom<Repository>(value);
        }
        
        /// <summary>
        /// The name fo the repository
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Describes the repository
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual string WebAddress {
            get {
                return this.m_WebAddress;
            }
            set {
                this.m_WebAddress = value;
            }
        }
        
        /// <summary>
        /// The web address for source control of the repository
        /// </summary>
        public virtual string SourceControlWebAddress {
            get {
                return this.m_SourceControlWebAddress;
            }
            set {
                this.m_SourceControlWebAddress = value;
            }
        }
        
        /// <summary>
        /// The regex for extracting
        /// </summary>
        public virtual string FileWebAddressTransformInputRegex {
            get {
                return this.m_FileWebAddressTransformInputRegex;
            }
            set {
                this.m_FileWebAddressTransformInputRegex = value;
            }
        }
        
        /// <summary>
        /// The name of the primary branch for the repository
        /// </summary>
        public virtual string PrimaryBranch {
            get {
                return this.m_PrimaryBranch;
            }
            set {
                this.m_PrimaryBranch = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.IRepositoryReference> Codex.IRepository.RepositoryReferences {
            get {
                return this.RepositoryReferences;
            }
        }
        
        public virtual System.Collections.Generic.List<RepositoryReference> RepositoryReferences {
            get {
                return this.m_RepositoryReferences;
            }
            set {
                this.m_RepositoryReferences = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepository value)
            where TTarget : Repository {
            this.m_Name = ((Codex.IRepository)(value)).Name;
            this.m_Description = ((Codex.IRepository)(value)).Description;
            this.m_Id = ((Codex.IRepository)(value)).Id;
            this.m_WebAddress = ((Codex.IRepository)(value)).WebAddress;
            this.m_SourceControlWebAddress = ((Codex.IRepository)(value)).SourceControlWebAddress;
            this.m_FileWebAddressTransformInputRegex = ((Codex.IRepository)(value)).FileWebAddressTransformInputRegex;
            this.m_PrimaryBranch = ((Codex.IRepository)(value)).PrimaryBranch;
            this.m_RepositoryReferences = new System.Collections.Generic.List<RepositoryReference>(System.Linq.Enumerable.Select(((Codex.IRepository)(value)).RepositoryReferences, v => EntityUtilities.NullOrCopy(v, _v => new RepositoryReference().CopyFrom<RepositoryReference>(_v))));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositoryReference))]
    public partial class RepositoryReference : Codex.EntityBase, Codex.IRepositoryReference {
        
        private string m_Name;
        
        private string m_Id;
        
        public RepositoryReference() {
            Initialize();
        }
        
        public RepositoryReference(Codex.IRepositoryReference value) {
            Initialize();
            this.CopyFrom<RepositoryReference>(value);
        }
        
        /// <summary>
        /// The name of the reference repository
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Optional. Id of repository
        /// </summary>
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepositoryReference value)
            where TTarget : RepositoryReference {
            this.m_Name = ((Codex.IRepositoryReference)(value)).Name;
            this.m_Id = ((Codex.IRepositoryReference)(value)).Id;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Marker interface for searchable entities
    /// TODO: Consider moving <see cref="P:Codex.ISearchEntity.EntityContentId" /> out if its not needed by all searchable entities
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISearchEntity))]
    public partial class SearchEntity : Codex.EntityBase, Codex.ISearchEntity {
        
        private string m_Uid;
        
        private string m_EntityContentId;
        
        private int m_EntityContentSize;
        
        private System.Nullable<long> m_EntityVersion;
        
        private int m_RoutingGroup;
        
        private int m_StableId;
        
        private string m_SortKey;
        
        private string m_RoutingKey;
        
        public SearchEntity() {
            Initialize();
        }
        
        public SearchEntity(Codex.ISearchEntity value) {
            Initialize();
            this.CopyFrom<SearchEntity>(value);
        }
        
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// Defines the content addressable identifier for the entity. This is used
        /// to determine if an entity with the same <see cref="P:Codex.ISearchEntity.Uid" /> should be updated
        /// </summary>
        public virtual string EntityContentId {
            get {
                return this.m_EntityContentId;
            }
            set {
                this.m_EntityContentId = value;
            }
        }
        
        /// <summary>
        /// Defines the size of the raw serialized entity.
        /// </summary>
        public virtual int EntityContentSize {
            get {
                return this.m_EntityContentSize;
            }
            set {
                this.m_EntityContentSize = value;
            }
        }
        
        /// <summary>
        /// The version number used when storing the entity (for use by ElasticSearch concurrency control
        /// to prevent races when storing values)
        /// </summary>
        public virtual System.Nullable<long> EntityVersion {
            get {
                return this.m_EntityVersion;
            }
            set {
                this.m_EntityVersion = value;
            }
        }
        
        /// <summary>
        /// Entities are split into separate groups (specified by an integral value) which in turn
        /// are sent to specific shards based on the ElasticSearch routing policy (i.e. the routing value is
        /// determined by this value)
        /// NOTE: This value is derived from <see cref="P:Codex.ISearchEntity.RoutingKey" />
        /// </summary>
        public virtual int RoutingGroup {
            get {
                return this.m_RoutingGroup;
            }
            set {
                this.m_RoutingGroup = value;
            }
        }
        
        /// <summary>
        /// The per-group stable identity
        /// </summary>
        public virtual int StableId {
            get {
                return this.m_StableId;
            }
            set {
                this.m_StableId = value;
            }
        }
        
        /// <summary>
        /// Value used for sorting (this should be computed based other values in the entity i.e. {FileName}/{RepoRelativePath} for files)
        /// The goal is so that similar entities should be clustered together to allow maximum compression
        /// </summary>
        public virtual string SortKey {
            get {
                return this.m_SortKey;
            }
            set {
                this.m_SortKey = value;
            }
        }
        
        /// <summary>
        /// Value used for routing (this should be computed based other values in the entity i.e. {FileName} for files)
        /// The goal is so that similar entities should be routed to same shard to allow maximum compression
        /// This should be composed into uid
        /// </summary>
        public virtual string RoutingKey {
            get {
                return this.m_RoutingKey;
            }
            set {
                this.m_RoutingKey = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISearchEntity value)
            where TTarget : SearchEntity {
            this.m_Uid = ((Codex.ISearchEntity)(value)).Uid;
            this.m_EntityContentId = ((Codex.ISearchEntity)(value)).EntityContentId;
            this.m_EntityContentSize = ((Codex.ISearchEntity)(value)).EntityContentSize;
            this.m_EntityVersion = ((Codex.ISearchEntity)(value)).EntityVersion;
            this.m_RoutingGroup = ((Codex.ISearchEntity)(value)).RoutingGroup;
            this.m_StableId = ((Codex.ISearchEntity)(value)).StableId;
            this.m_SortKey = ((Codex.ISearchEntity)(value)).SortKey;
            this.m_RoutingKey = ((Codex.ISearchEntity)(value)).RoutingKey;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepoScopeEntity))]
    public partial class RepoScopeEntity : Codex.EntityBase, Codex.IRepoScopeEntity {
        
        private string m_RepositoryName;
        
        public RepoScopeEntity() {
            Initialize();
        }
        
        public RepoScopeEntity(Codex.IRepoScopeEntity value) {
            Initialize();
            this.CopyFrom<RepoScopeEntity>(value);
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : RepoScopeEntity {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitScopeEntity))]
    public partial class CommitScopeEntity : RepoScopeEntity, Codex.ICommitScopeEntity {
        
        private string m_CommitId;
        
        public CommitScopeEntity() {
        }
        
        public CommitScopeEntity(Codex.ICommitScopeEntity value) {
            this.CopyFrom<CommitScopeEntity>(value);
        }
        
        public CommitScopeEntity(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The unique identifier for this commit/changeset in version control
        /// (i.e. git commit hash or TFS changeset number)
        /// </summary>
        public virtual string CommitId {
            get {
                return this.m_CommitId;
            }
            set {
                this.m_CommitId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitScopeEntity value)
            where TTarget : CommitScopeEntity {
            this.m_CommitId = ((Codex.ICommitScopeEntity)(value)).CommitId;
            base.CopyFrom<RepoScopeEntity>(((Codex.IRepoScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectScopeEntity))]
    public partial class ProjectScopeEntity : RepoScopeEntity, Codex.IProjectScopeEntity {
        
        private string m_ProjectId;
        
        public ProjectScopeEntity() {
        }
        
        public ProjectScopeEntity(Codex.IProjectScopeEntity value) {
            this.CopyFrom<ProjectScopeEntity>(value);
        }
        
        public ProjectScopeEntity(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectScopeEntity value)
            where TTarget : ProjectScopeEntity {
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            base.CopyFrom<RepoScopeEntity>(((Codex.IRepoScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepoFileScopeEntity))]
    public partial class RepoFileScopeEntity : RepoScopeEntity, Codex.IRepoFileScopeEntity {
        
        private string m_RepoRelativePath;
        
        public RepoFileScopeEntity() {
        }
        
        public RepoFileScopeEntity(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom<RepoFileScopeEntity>(value);
        }
        
        public RepoFileScopeEntity(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoFileScopeEntity value)
            where TTarget : RepoFileScopeEntity {
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            base.CopyFrom<RepoScopeEntity>(((Codex.IRepoScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectFileScopeEntity))]
    public partial class ProjectFileScopeEntity : Codex.EntityBase, Codex.IProjectFileScopeEntity {
        
        private string m_ProjectRelativePath;
        
        private string m_RepoRelativePath;
        
        private string m_RepositoryName;
        
        private string m_ProjectId;
        
        public ProjectFileScopeEntity() {
            Initialize();
        }
        
        public ProjectFileScopeEntity(Codex.IProjectFileScopeEntity value) {
            Initialize();
            this.CopyFrom<ProjectFileScopeEntity>(value);
        }
        
        public ProjectFileScopeEntity(Codex.IRepoFileScopeEntity value) {
            Initialize();
            this.CopyFrom<ProjectFileScopeEntity>(value);
        }
        
        public ProjectFileScopeEntity(Codex.IRepoScopeEntity value) {
            Initialize();
            this.CopyFrom<ProjectFileScopeEntity>(value);
        }
        
        public ProjectFileScopeEntity(Codex.IProjectScopeEntity value) {
            Initialize();
            this.CopyFrom<ProjectFileScopeEntity>(value);
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : ProjectFileScopeEntity {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoFileScopeEntity value)
            where TTarget : ProjectFileScopeEntity {
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectScopeEntity value)
            where TTarget : ProjectFileScopeEntity {
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectFileScopeEntity value)
            where TTarget : ProjectFileScopeEntity {
            this.m_ProjectRelativePath = ((Codex.IProjectFileScopeEntity)(value)).ProjectRelativePath;
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// In order to compute a stable integral id for each entity. This type is used to store into a 'follow' index which
    /// stores entities of this type using the <see cref="P:Codex.ISearchEntity.Uid" /> of the corresponding search entity. Then the
    /// sequence number assigned by ElasticSearch is used as the shard stable id (<see cref="P:Codex.ISearchEntity.StableId" />)
    /// for the entity. This approach is used in order to ensure that the stable id appears as an explicit field in the document rather
    /// which allows configuration of how the field is indexed (not true for sequence number field without code changes to ES).
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRegisteredEntity))]
    public partial class RegisteredEntity : SearchEntity, Codex.IRegisteredEntity {
        
        private System.DateTime m_DateAdded;
        
        public RegisteredEntity() {
        }
        
        public RegisteredEntity(Codex.IRegisteredEntity value) {
            this.CopyFrom<RegisteredEntity>(value);
        }
        
        public RegisteredEntity(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The date in which the entity was registered (i.e. added to the store)
        /// </summary>
        public virtual System.DateTime DateAdded {
            get {
                return this.m_DateAdded;
            }
            set {
                this.m_DateAdded = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRegisteredEntity value)
            where TTarget : RegisteredEntity {
            this.m_DateAdded = ((Codex.IRegisteredEntity)(value)).DateAdded;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Defines a stored filter which matches entities in a particular index shard in a stable manner
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStoredFilter))]
    public partial class StoredFilter : SearchEntity, Codex.IStoredFilter {
        
        private System.DateTime m_DateUpdated;
        
        private string m_FullPath;
        
        private string m_Name;
        
        private string m_IndexName;
        
        private byte[] m_StableIds;
        
        private System.Collections.Generic.List<ChildFilterReference> m_Children = new System.Collections.Generic.List<ChildFilterReference>();
        
        private string m_FilterHash;
        
        private int m_Cardinality;
        
        public StoredFilter() {
        }
        
        public StoredFilter(Codex.IStoredFilter value) {
            this.CopyFrom<StoredFilter>(value);
        }
        
        public StoredFilter(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The time of the last update to the stored filter
        /// </summary>
        public virtual System.DateTime DateUpdated {
            get {
                return this.m_DateUpdated;
            }
            set {
                this.m_DateUpdated = value;
            }
        }
        
        public virtual string FullPath {
            get {
                return this.m_FullPath;
            }
            set {
                this.m_FullPath = value;
            }
        }
        
        /// <summary>
        /// The name of the stored filter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The name of the index to which the stored filter applies
        /// </summary>
        public virtual string IndexName {
            get {
                return this.m_IndexName;
            }
            set {
                this.m_IndexName = value;
            }
        }
        
        /// <summary>
        /// Stored filter bit set
        /// </summary>
        public virtual byte[] StableIds {
            get {
                return this.m_StableIds;
            }
            set {
                this.m_StableIds = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.IChildFilterReference> Codex.IStoredFilter.Children {
            get {
                return this.Children;
            }
        }
        
        public virtual System.Collections.Generic.List<ChildFilterReference> Children {
            get {
                return this.m_Children;
            }
            set {
                this.m_Children = value;
            }
        }
        
        /// <summary>
        /// The hash of <see cref="!:Filter" />
        /// </summary>
        public virtual string FilterHash {
            get {
                return this.m_FilterHash;
            }
            set {
                this.m_FilterHash = value;
            }
        }
        
        /// <summary>
        /// The count of elements matched by <see cref="!:Filter" />
        /// </summary>
        public virtual int Cardinality {
            get {
                return this.m_Cardinality;
            }
            set {
                this.m_Cardinality = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IStoredFilter value)
            where TTarget : StoredFilter {
            this.m_DateUpdated = ((Codex.IStoredFilter)(value)).DateUpdated;
            this.m_FullPath = ((Codex.IStoredFilter)(value)).FullPath;
            this.m_Name = ((Codex.IStoredFilter)(value)).Name;
            this.m_IndexName = ((Codex.IStoredFilter)(value)).IndexName;
            this.m_StableIds = ((Codex.IStoredFilter)(value)).StableIds;
            this.m_Children = new System.Collections.Generic.List<ChildFilterReference>(System.Linq.Enumerable.Select(((Codex.IStoredFilter)(value)).Children, v => EntityUtilities.NullOrCopy(v, _v => new ChildFilterReference().CopyFrom<ChildFilterReference>(_v))));
            this.m_FilterHash = ((Codex.IStoredFilter)(value)).FilterHash;
            this.m_Cardinality = ((Codex.IStoredFilter)(value)).Cardinality;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IChildFilterReference))]
    public partial class ChildFilterReference : Codex.EntityBase, Codex.IChildFilterReference {
        
        private string m_FullPath;
        
        private string m_Uid;
        
        private byte[] m_StableIds;
        
        private int m_Cardinality;
        
        public ChildFilterReference() {
            Initialize();
        }
        
        public ChildFilterReference(Codex.IChildFilterReference value) {
            Initialize();
            this.CopyFrom<ChildFilterReference>(value);
        }
        
        public virtual string FullPath {
            get {
                return this.m_FullPath;
            }
            set {
                this.m_FullPath = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ISearchEntity.Uid" /> of the child filter
        /// </summary>
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.IStoredFilter.StableIds" /> of the child filter
        /// </summary>
        public virtual byte[] StableIds {
            get {
                return this.m_StableIds;
            }
            set {
                this.m_StableIds = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.IStoredFilter.Cardinality" /> of the child filter
        /// </summary>
        public virtual int Cardinality {
            get {
                return this.m_Cardinality;
            }
            set {
                this.m_Cardinality = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IChildFilterReference value)
            where TTarget : ChildFilterReference {
            this.m_FullPath = ((Codex.IChildFilterReference)(value)).FullPath;
            this.m_Uid = ((Codex.IChildFilterReference)(value)).Uid;
            this.m_StableIds = ((Codex.IChildFilterReference)(value)).StableIds;
            this.m_Cardinality = ((Codex.IChildFilterReference)(value)).Cardinality;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IGroupedStoredFilterIds))]
    public partial class GroupedStoredFilterIds : Codex.IGroupedStoredFilterIds {
        
        public GroupedStoredFilterIds() {
            Initialize();
        }
        
        public GroupedStoredFilterIds(Codex.IGroupedStoredFilterIds value) {
            Initialize();
            this.CopyFrom<GroupedStoredFilterIds>(value);
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IGroupedStoredFilterIds value)
            where TTarget : GroupedStoredFilterIds {
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSearchModel))]
    public partial class DefinitionSearchModel : SearchEntity, Codex.IDefinitionSearchModel {
        
        private DefinitionSymbol m_Definition;
        
        private System.Collections.Generic.List<string> m_Keywords = new System.Collections.Generic.List<string>();
        
        public DefinitionSearchModel() {
        }
        
        public DefinitionSearchModel(Codex.IDefinitionSearchModel value) {
            this.CopyFrom<DefinitionSearchModel>(value);
        }
        
        public DefinitionSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        Codex.IDefinitionSymbol Codex.IDefinitionSearchModel.Definition {
            get {
                return this.Definition;
            }
        }
        
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        /// <summary>
        /// Keywords are additional terms which can be used to find a given symbol.
        /// NOTE: Keywords can only be used to select from symbols which have
        /// a primary term match
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.IDefinitionSearchModel.Keywords {
            get {
                return this.Keywords;
            }
        }
        
        /// <summary>
        /// Keywords are additional terms which can be used to find a given symbol.
        /// NOTE: Keywords can only be used to select from symbols which have
        /// a primary term match
        /// </summary>
        public virtual System.Collections.Generic.List<string> Keywords {
            get {
                return this.m_Keywords;
            }
            set {
                this.m_Keywords = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IDefinitionSearchModel value)
            where TTarget : DefinitionSearchModel {
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().CopyFrom<DefinitionSymbol>(v));;
            this.m_Keywords = new System.Collections.Generic.List<string>(((Codex.IDefinitionSearchModel)(value)).Keywords);
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILanguageSearchModel))]
    public partial class LanguageSearchModel : SearchEntity, Codex.ILanguageSearchModel {
        
        private LanguageInfo m_Language;
        
        public LanguageSearchModel() {
        }
        
        public LanguageSearchModel(Codex.ILanguageSearchModel value) {
            this.CopyFrom<LanguageSearchModel>(value);
        }
        
        public LanguageSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        Codex.ILanguageInfo Codex.ILanguageSearchModel.Language {
            get {
                return this.Language;
            }
        }
        
        public virtual LanguageInfo Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ILanguageSearchModel value)
            where TTarget : LanguageSearchModel {
            this.m_Language = EntityUtilities.NullOrCopy(value.Language, v => new LanguageInfo().CopyFrom<LanguageInfo>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSearchModel))]
    public partial class ReferenceSearchModel : SearchEntity, Codex.IReferenceSearchModel {
        
        private ReferenceSymbol m_Reference;
        
        private System.Collections.Generic.IReadOnlyList<SymbolSpan> m_Spans = Codex.Utilities.CollectionUtilities.Empty<SymbolSpan>.Array;
        
        private Codex.ISymbolLineSpanList m_CompressedSpans;
        
        private string m_ProjectRelativePath;
        
        private string m_RepoRelativePath;
        
        private string m_RepositoryName;
        
        private string m_ProjectId;
        
        public ReferenceSearchModel() {
        }
        
        public ReferenceSearchModel(Codex.IReferenceSearchModel value) {
            this.CopyFrom<ReferenceSearchModel>(value);
        }
        
        public ReferenceSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        public ReferenceSearchModel(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom<ReferenceSearchModel>(value);
        }
        
        public ReferenceSearchModel(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom<ReferenceSearchModel>(value);
        }
        
        public ReferenceSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom<ReferenceSearchModel>(value);
        }
        
        public ReferenceSearchModel(Codex.IProjectScopeEntity value) {
            this.CopyFrom<ReferenceSearchModel>(value);
        }
        
        /// <summary>
        /// The reference symbol
        /// </summary>
        Codex.IReferenceSymbol Codex.IReferenceSearchModel.Reference {
            get {
                return this.Reference;
            }
        }
        
        /// <summary>
        /// The reference symbol
        /// </summary>
        public virtual ReferenceSymbol Reference {
            get {
                return this.m_Reference;
            }
            set {
                this.m_Reference = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ISymbolSpan> Codex.IReferenceSearchModel.Spans {
            get {
                return this.Spans;
            }
        }
        
        public virtual System.Collections.Generic.IReadOnlyList<SymbolSpan> Spans {
            get {
                return this.CoerceSpans(this.m_Spans);
            }
            set {
                this.m_Spans = value;
            }
        }
        
        /// <summary>
        /// Compressed list of spans
        /// </summary>
        public virtual Codex.ISymbolLineSpanList CompressedSpans {
            get {
                return this.m_CompressedSpans;
            }
            set {
                this.m_CompressedSpans = value;
            }
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : ReferenceSearchModel {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoFileScopeEntity value)
            where TTarget : ReferenceSearchModel {
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectScopeEntity value)
            where TTarget : ReferenceSearchModel {
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectFileScopeEntity value)
            where TTarget : ReferenceSearchModel {
            this.m_ProjectRelativePath = ((Codex.IProjectFileScopeEntity)(value)).ProjectRelativePath;
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IReferenceSearchModel value)
            where TTarget : ReferenceSearchModel {
            this.m_Reference = EntityUtilities.NullOrCopy(value.Reference, v => new ReferenceSymbol().CopyFrom<ReferenceSymbol>(v));;
            this.m_Spans = new System.Collections.Generic.List<SymbolSpan>(System.Linq.Enumerable.Select(((Codex.IReferenceSearchModel)(value)).Spans, v => EntityUtilities.NullOrCopy(v, _v => new SymbolSpan().CopyFrom<SymbolSpan>(_v))));
            this.m_CompressedSpans = ((Codex.IReferenceSearchModel)(value)).CompressedSpans;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            this.m_ProjectRelativePath = ((Codex.IProjectFileScopeEntity)(value)).ProjectRelativePath;
            this.m_RepoRelativePath = ((Codex.IRepoFileScopeEntity)(value)).RepoRelativePath;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceSearchModelBase))]
    public partial class SourceSearchModelBase : SearchEntity, Codex.ISourceSearchModelBase {
        
        private SourceControlFileInfo m_SourceControlInfo;
        
        public SourceSearchModelBase() {
        }
        
        public SourceSearchModelBase(Codex.ISourceSearchModelBase value) {
            this.CopyFrom<SourceSearchModelBase>(value);
        }
        
        public SourceSearchModelBase(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        Codex.ISourceControlFileInfo Codex.ISourceSearchModelBase.SourceControlInfo {
            get {
                return this.SourceControlInfo;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        public virtual SourceControlFileInfo SourceControlInfo {
            get {
                return this.m_SourceControlInfo;
            }
            set {
                this.m_SourceControlInfo = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceSearchModelBase value)
            where TTarget : SourceSearchModelBase {
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().CopyFrom<SourceControlFileInfo>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceSearchModel))]
    public partial class BoundSourceSearchModel : SearchEntity, Codex.IBoundSourceSearchModel {
        
        private string m_TextUid;
        
        private SourceFileInfo m_SourceInfo;
        
        private BoundSourceInfo m_BindingInfo;
        
        private Codex.IClassificationList m_CompressedClassifications;
        
        private Codex.IReferenceList m_CompressedReferences;
        
        private SourceControlFileInfo m_SourceControlInfo;
        
        public BoundSourceSearchModel() {
        }
        
        public BoundSourceSearchModel(Codex.IBoundSourceSearchModel value) {
            this.CopyFrom<BoundSourceSearchModel>(value);
        }
        
        public BoundSourceSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        public BoundSourceSearchModel(Codex.ISourceSearchModelBase value) {
            this.CopyFrom<BoundSourceSearchModel>(value);
        }
        
        /// <summary>
        /// The unique identifier of the associated <see cref="T:Codex.ISourceFile" />
        /// </summary>
        public virtual string TextUid {
            get {
                return this.m_TextUid;
            }
            set {
                this.m_TextUid = value;
            }
        }
        
        /// <summary>
        /// Information about the source file
        /// </summary>
        Codex.ISourceFileInfo Codex.IBoundSourceSearchModel.SourceInfo {
            get {
                return this.SourceInfo;
            }
        }
        
        /// <summary>
        /// Information about the source file
        /// </summary>
        public virtual SourceFileInfo SourceInfo {
            get {
                return this.m_SourceInfo;
            }
            set {
                this.m_SourceInfo = value;
            }
        }
        
        /// <summary>
        /// The binding info
        /// </summary>
        Codex.IBoundSourceInfo Codex.IBoundSourceSearchModel.BindingInfo {
            get {
                return this.BindingInfo;
            }
        }
        
        /// <summary>
        /// The binding info
        /// </summary>
        public virtual BoundSourceInfo BindingInfo {
            get {
                return this.m_BindingInfo;
            }
            set {
                this.m_BindingInfo = value;
            }
        }
        
        /// <summary>
        /// Compressed list of classification spans
        /// </summary>
        public virtual Codex.IClassificationList CompressedClassifications {
            get {
                return this.m_CompressedClassifications;
            }
            set {
                this.m_CompressedClassifications = value;
            }
        }
        
        /// <summary>
        /// Compressed list of reference spans
        /// </summary>
        public virtual Codex.IReferenceList CompressedReferences {
            get {
                return this.m_CompressedReferences;
            }
            set {
                this.m_CompressedReferences = value;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        Codex.ISourceControlFileInfo Codex.ISourceSearchModelBase.SourceControlInfo {
            get {
                return this.SourceControlInfo;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        public virtual SourceControlFileInfo SourceControlInfo {
            get {
                return this.m_SourceControlInfo;
            }
            set {
                this.m_SourceControlInfo = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceSearchModelBase value)
            where TTarget : BoundSourceSearchModel {
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().CopyFrom<SourceControlFileInfo>(v));;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IBoundSourceSearchModel value)
            where TTarget : BoundSourceSearchModel {
            this.m_TextUid = ((Codex.IBoundSourceSearchModel)(value)).TextUid;
            this.m_SourceInfo = EntityUtilities.NullOrCopy(value.SourceInfo, v => new SourceFileInfo().CopyFrom<SourceFileInfo>(v));;
            this.m_BindingInfo = EntityUtilities.NullOrCopy(value.BindingInfo, v => new BoundSourceInfo().CopyFrom<BoundSourceInfo>(v));;
            this.m_CompressedClassifications = ((Codex.IBoundSourceSearchModel)(value)).CompressedClassifications;
            this.m_CompressedReferences = ((Codex.IBoundSourceSearchModel)(value)).CompressedReferences;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().CopyFrom<SourceControlFileInfo>(v));;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITextSourceSearchModel))]
    public partial class TextSourceSearchModel : SearchEntity, Codex.ITextSourceSearchModel {
        
        private SourceFile m_File;
        
        private SourceControlFileInfo m_SourceControlInfo;
        
        public TextSourceSearchModel() {
        }
        
        public TextSourceSearchModel(Codex.ITextSourceSearchModel value) {
            this.CopyFrom<TextSourceSearchModel>(value);
        }
        
        public TextSourceSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        public TextSourceSearchModel(Codex.ISourceSearchModelBase value) {
            this.CopyFrom<TextSourceSearchModel>(value);
        }
        
        Codex.ISourceFile Codex.ITextSourceSearchModel.File {
            get {
                return this.File;
            }
        }
        
        public virtual SourceFile File {
            get {
                return this.m_File;
            }
            set {
                this.m_File = value;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        Codex.ISourceControlFileInfo Codex.ISourceSearchModelBase.SourceControlInfo {
            get {
                return this.SourceControlInfo;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        public virtual SourceControlFileInfo SourceControlInfo {
            get {
                return this.m_SourceControlInfo;
            }
            set {
                this.m_SourceControlInfo = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ISourceSearchModelBase value)
            where TTarget : TextSourceSearchModel {
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().CopyFrom<SourceControlFileInfo>(v));;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ITextSourceSearchModel value)
            where TTarget : TextSourceSearchModel {
            this.m_File = EntityUtilities.NullOrCopy(value.File, v => new SourceFile().CopyFrom<SourceFile>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().CopyFrom<SourceControlFileInfo>(v));;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositorySearchModel))]
    public partial class RepositorySearchModel : SearchEntity, Codex.IRepositorySearchModel {
        
        private Repository m_Repository;
        
        public RepositorySearchModel() {
        }
        
        public RepositorySearchModel(Codex.IRepositorySearchModel value) {
            this.CopyFrom<RepositorySearchModel>(value);
        }
        
        public RepositorySearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        Codex.IRepository Codex.IRepositorySearchModel.Repository {
            get {
                return this.Repository;
            }
        }
        
        public virtual Repository Repository {
            get {
                return this.m_Repository;
            }
            set {
                this.m_Repository = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepositorySearchModel value)
            where TTarget : RepositorySearchModel {
            this.m_Repository = EntityUtilities.NullOrCopy(value.Repository, v => new Repository().CopyFrom<Repository>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectSearchModel))]
    public partial class ProjectSearchModel : SearchEntity, Codex.IProjectSearchModel {
        
        private AnalyzedProject m_Project;
        
        public ProjectSearchModel() {
        }
        
        public ProjectSearchModel(Codex.IProjectSearchModel value) {
            this.CopyFrom<ProjectSearchModel>(value);
        }
        
        public ProjectSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        Codex.IProject Codex.IProjectSearchModel.Project {
            get {
                return this.Project;
            }
        }
        
        public virtual AnalyzedProject Project {
            get {
                return this.m_Project;
            }
            set {
                this.m_Project = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectSearchModel value)
            where TTarget : ProjectSearchModel {
            this.m_Project = EntityUtilities.NullOrCopy(value.Project, v => new AnalyzedProject().CopyFrom<AnalyzedProject>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectReferenceSearchModel))]
    public partial class ProjectReferenceSearchModel : SearchEntity, Codex.IProjectReferenceSearchModel {
        
        private ReferencedProject m_ProjectReference;
        
        private string m_ProjectId;
        
        private string m_RepositoryName;
        
        public ProjectReferenceSearchModel() {
        }
        
        public ProjectReferenceSearchModel(Codex.IProjectReferenceSearchModel value) {
            this.CopyFrom<ProjectReferenceSearchModel>(value);
        }
        
        public ProjectReferenceSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        public ProjectReferenceSearchModel(Codex.IProjectScopeEntity value) {
            this.CopyFrom<ProjectReferenceSearchModel>(value);
        }
        
        public ProjectReferenceSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom<ProjectReferenceSearchModel>(value);
        }
        
        Codex.IReferencedProject Codex.IProjectReferenceSearchModel.ProjectReference {
            get {
                return this.ProjectReference;
            }
        }
        
        public virtual ReferencedProject ProjectReference {
            get {
                return this.m_ProjectReference;
            }
            set {
                this.m_ProjectReference = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : ProjectReferenceSearchModel {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectScopeEntity value)
            where TTarget : ProjectReferenceSearchModel {
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IProjectReferenceSearchModel value)
            where TTarget : ProjectReferenceSearchModel {
            this.m_ProjectReference = EntityUtilities.NullOrCopy(value.ProjectReference, v => new ReferencedProject().CopyFrom<ReferencedProject>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            this.m_ProjectId = ((Codex.IProjectScopeEntity)(value)).ProjectId;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitSearchModel))]
    public partial class CommitSearchModel : SearchEntity, Codex.ICommitSearchModel {
        
        private Commit m_Commit;
        
        public CommitSearchModel() {
        }
        
        public CommitSearchModel(Codex.ICommitSearchModel value) {
            this.CopyFrom<CommitSearchModel>(value);
        }
        
        public CommitSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        Codex.ICommit Codex.ICommitSearchModel.Commit {
            get {
                return this.Commit;
            }
        }
        
        public virtual Commit Commit {
            get {
                return this.m_Commit;
            }
            set {
                this.m_Commit = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitSearchModel value)
            where TTarget : CommitSearchModel {
            this.m_Commit = EntityUtilities.NullOrCopy(value.Commit, v => new Commit().CopyFrom<Commit>(v));;
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// The set of files present in the repository at a given commit.
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFilesSearchModel))]
    public partial class CommitFilesSearchModel : SearchEntity, Codex.ICommitFilesSearchModel {
        
        private System.Collections.Generic.List<CommitFileLink> m_CommitFiles = new System.Collections.Generic.List<CommitFileLink>();
        
        private string m_CommitId;
        
        private string m_RepositoryName;
        
        public CommitFilesSearchModel() {
        }
        
        public CommitFilesSearchModel(Codex.ICommitFilesSearchModel value) {
            this.CopyFrom<CommitFilesSearchModel>(value);
        }
        
        public CommitFilesSearchModel(Codex.ISearchEntity value) : 
                base(value) {
        }
        
        public CommitFilesSearchModel(Codex.ICommitScopeEntity value) {
            this.CopyFrom<CommitFilesSearchModel>(value);
        }
        
        public CommitFilesSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom<CommitFilesSearchModel>(value);
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICommitFileLink> Codex.ICommitFilesSearchModel.CommitFiles {
            get {
                return this.CommitFiles;
            }
        }
        
        public virtual System.Collections.Generic.List<CommitFileLink> CommitFiles {
            get {
                return this.m_CommitFiles;
            }
            set {
                this.m_CommitFiles = value;
            }
        }
        
        /// <summary>
        /// The unique identifier for this commit/changeset in version control
        /// (i.e. git commit hash or TFS changeset number)
        /// </summary>
        public virtual string CommitId {
            get {
                return this.m_CommitId;
            }
            set {
                this.m_CommitId = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepoScopeEntity value)
            where TTarget : CommitFilesSearchModel {
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitScopeEntity value)
            where TTarget : CommitFilesSearchModel {
            this.m_CommitId = ((Codex.ICommitScopeEntity)(value)).CommitId;
            return ((TTarget)(this));
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitFilesSearchModel value)
            where TTarget : CommitFilesSearchModel {
            this.m_CommitFiles = new System.Collections.Generic.List<CommitFileLink>(System.Linq.Enumerable.Select(((Codex.ICommitFilesSearchModel)(value)).CommitFiles, v => EntityUtilities.NullOrCopy(v, _v => new CommitFileLink().CopyFrom<CommitFileLink>(_v))));
            base.CopyFrom<SearchEntity>(((Codex.ISearchEntity)(value)));
            this.m_CommitId = ((Codex.ICommitScopeEntity)(value)).CommitId;
            this.m_RepositoryName = ((Codex.IRepoScopeEntity)(value)).RepositoryName;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IFileStatistics))]
    public partial class FileStatistics : Codex.EntityBase, Codex.IFileStatistics {
        
        private long m_FileCount;
        
        private long m_Classifications;
        
        private long m_Definitions;
        
        private long m_References;
        
        private long m_Lines;
        
        private long m_Size;
        
        private long m_AnalyzedSize;
        
        public FileStatistics() {
            Initialize();
        }
        
        public FileStatistics(Codex.IFileStatistics value) {
            Initialize();
            this.CopyFrom<FileStatistics>(value);
        }
        
        /// <summary>
        /// The numbef of files
        /// </summary>
        public virtual long FileCount {
            get {
                return this.m_FileCount;
            }
            set {
                this.m_FileCount = value;
            }
        }
        
        /// <summary>
        /// The number of classifications
        /// </summary>
        public virtual long Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        /// <summary>
        /// The number of definitions
        /// </summary>
        public virtual long Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// The number of references
        /// </summary>
        public virtual long References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// The number of lines of code in files
        /// </summary>
        public virtual long Lines {
            get {
                return this.m_Lines;
            }
            set {
                this.m_Lines = value;
            }
        }
        
        /// <summary>
        /// The total size of files
        /// </summary>
        public virtual long Size {
            get {
                return this.m_Size;
            }
            set {
                this.m_Size = value;
            }
        }
        
        /// <summary>
        /// The total size of analysis files
        /// </summary>
        public virtual long AnalyzedSize {
            get {
                return this.m_AnalyzedSize;
            }
            set {
                this.m_AnalyzedSize = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IFileStatistics value)
            where TTarget : FileStatistics {
            this.m_FileCount = ((Codex.IFileStatistics)(value)).FileCount;
            this.m_Classifications = ((Codex.IFileStatistics)(value)).Classifications;
            this.m_Definitions = ((Codex.IFileStatistics)(value)).Definitions;
            this.m_References = ((Codex.IFileStatistics)(value)).References;
            this.m_Lines = ((Codex.IFileStatistics)(value)).Lines;
            this.m_Size = ((Codex.IFileStatistics)(value)).Size;
            this.m_AnalyzedSize = ((Codex.IFileStatistics)(value)).AnalyzedSize;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Information for creating an ICodexRepositoryStore
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositoryStoreInfo))]
    public partial class RepositoryStoreInfo : Codex.EntityBase, Codex.IRepositoryStoreInfo {
        
        private Repository m_Repository;
        
        private Branch m_Branch;
        
        private Commit m_Commit;
        
        public RepositoryStoreInfo() {
            Initialize();
        }
        
        public RepositoryStoreInfo(Codex.IRepositoryStoreInfo value) {
            Initialize();
            this.CopyFrom<RepositoryStoreInfo>(value);
        }
        
        /// <summary>
        /// The repository being stored
        /// </summary>
        Codex.IRepository Codex.IRepositoryStoreInfo.Repository {
            get {
                return this.Repository;
            }
        }
        
        /// <summary>
        /// The repository being stored
        /// </summary>
        public virtual Repository Repository {
            get {
                return this.m_Repository;
            }
            set {
                this.m_Repository = value;
            }
        }
        
        /// <summary>
        /// The branch being stored
        /// </summary>
        Codex.IBranch Codex.IRepositoryStoreInfo.Branch {
            get {
                return this.Branch;
            }
        }
        
        /// <summary>
        /// The branch being stored
        /// </summary>
        public virtual Branch Branch {
            get {
                return this.m_Branch;
            }
            set {
                this.m_Branch = value;
            }
        }
        
        /// <summary>
        /// The commit being stored
        /// </summary>
        Codex.ICommit Codex.IRepositoryStoreInfo.Commit {
            get {
                return this.Commit;
            }
        }
        
        /// <summary>
        /// The commit being stored
        /// </summary>
        public virtual Commit Commit {
            get {
                return this.m_Commit;
            }
            set {
                this.m_Commit = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IRepositoryStoreInfo value)
            where TTarget : RepositoryStoreInfo {
            this.m_Repository = EntityUtilities.NullOrCopy(value.Repository, v => new Repository().CopyFrom<Repository>(v));;
            this.m_Branch = EntityUtilities.NullOrCopy(value.Branch, v => new Branch().CopyFrom<Branch>(v));;
            this.m_Commit = EntityUtilities.NullOrCopy(value.Commit, v => new Commit().CopyFrom<Commit>(v));;
            return ((TTarget)(this));
        }
    }
    
    /// <summary>
    /// Represents a directory in source control
    /// </summary>
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFilesDirectory))]
    public partial class CommitFilesDirectory : RepoFileScopeEntity, Codex.ICommitFilesDirectory {
        
        private System.Collections.Generic.List<CommitFileLink> m_Files = new System.Collections.Generic.List<CommitFileLink>();
        
        public CommitFilesDirectory() {
        }
        
        public CommitFilesDirectory(Codex.ICommitFilesDirectory value) {
            this.CopyFrom<CommitFilesDirectory>(value);
        }
        
        public CommitFilesDirectory(Codex.IRepoFileScopeEntity value) : 
                base(value) {
        }
        
        public CommitFilesDirectory(Codex.IRepoScopeEntity value) : 
                base(value) {
        }
        
        /// <summary>
        /// The files in the directory
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ICommitFileLink> Codex.ICommitFilesDirectory.Files {
            get {
                return this.Files;
            }
        }
        
        /// <summary>
        /// The files in the directory
        /// </summary>
        public virtual System.Collections.Generic.List<CommitFileLink> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICommitFilesDirectory value)
            where TTarget : CommitFilesDirectory {
            this.m_Files = new System.Collections.Generic.List<CommitFileLink>(System.Linq.Enumerable.Select(((Codex.ICommitFilesDirectory)(value)).Files, v => EntityUtilities.NullOrCopy(v, _v => new CommitFileLink().CopyFrom<CommitFileLink>(_v))));
            base.CopyFrom<RepoFileScopeEntity>(((Codex.IRepoFileScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSymbol))]
    public partial class DefinitionSymbol : ReferenceSymbol, Codex.IDefinitionSymbol {
        
        private string m_Uid;
        
        private string m_DisplayName;
        
        private string m_ShortName;
        
        private string m_ContainerQualifiedName;
        
        private string[] m_Modifiers;
        
        private Codex.ObjectModel.Glyph m_Glyph;
        
        private int m_SymbolDepth;
        
        private DocumentationInfo m_DocumentationInfo;
        
        private string m_TypeName;
        
        private string m_DeclarationName;
        
        private string m_Comment;
        
        public DefinitionSymbol() {
        }
        
        public DefinitionSymbol(Codex.IDefinitionSymbol value) {
            this.CopyFrom<DefinitionSymbol>(value);
        }
        
        public DefinitionSymbol(Codex.IReferenceSymbol value) : 
                base(value) {
        }
        
        public DefinitionSymbol(Codex.ICodeSymbol value) : 
                base(value) {
        }
        
        /// <summary>
        /// The unique identifier for the symbol
        /// NOTE: This is not applicable to most symbols. Only set for symbols
        /// which are added in a shared context and need this for deduplication)
        /// </summary>
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// The display name of the symbol
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The short name of the symbol (i.e. Task).
        /// This is used to find the symbol when search term does not contain '.'
        /// </summary>
        public virtual string ShortName {
            get {
                return this.CoerceShortName(this.m_ShortName);
            }
            set {
                this.m_ShortName = value;
            }
        }
        
        /// <summary>
        /// The qualified name of the symbol (i.e. System.Threading.Tasks.Task).
        /// This is used to find the symbol when the search term contains '.'
        /// </summary>
        public virtual string ContainerQualifiedName {
            get {
                return this.m_ContainerQualifiedName;
            }
            set {
                this.m_ContainerQualifiedName = value;
            }
        }
        
        /// <summary>
        /// Modifiers for the symbol such as public
        /// </summary>
        public virtual string[] Modifiers {
            get {
                return this.m_Modifiers;
            }
            set {
                this.m_Modifiers = value;
            }
        }
        
        /// <summary>
        /// The glyph
        /// </summary>
        public virtual Codex.ObjectModel.Glyph Glyph {
            get {
                return this.m_Glyph;
            }
            set {
                this.m_Glyph = value;
            }
        }
        
        /// <summary>
        /// The depth of the symbol in its symbolic tree
        /// </summary>
        public virtual int SymbolDepth {
            get {
                return this.m_SymbolDepth;
            }
            set {
                this.m_SymbolDepth = value;
            }
        }
        
        /// <summary>
        /// Documentation for the symbol (if any)
        /// </summary>
        Codex.IDocumentationInfo Codex.IDefinitionSymbol.DocumentationInfo {
            get {
                return this.DocumentationInfo;
            }
        }
        
        /// <summary>
        /// Documentation for the symbol (if any)
        /// </summary>
        public virtual DocumentationInfo DocumentationInfo {
            get {
                return this.m_DocumentationInfo;
            }
            set {
                this.m_DocumentationInfo = value;
            }
        }
        
        /// <summary>
        /// The name of the type for the symbol
        /// (i.e. return type of method)
        /// </summary>
        public virtual string TypeName {
            get {
                return this.m_TypeName;
            }
            set {
                this.m_TypeName = value;
            }
        }
        
        /// <summary>
        /// The declaration name for the symbol
        /// </summary>
        public virtual string DeclarationName {
            get {
                return this.m_DeclarationName;
            }
            set {
                this.m_DeclarationName = value;
            }
        }
        
        /// <summary>
        /// The comment applied to the definition
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IDefinitionSymbol value)
            where TTarget : DefinitionSymbol {
            this.m_Uid = ((Codex.IDefinitionSymbol)(value)).Uid;
            this.m_DisplayName = ((Codex.IDefinitionSymbol)(value)).DisplayName;
            this.m_ShortName = ((Codex.IDefinitionSymbol)(value)).ShortName;
            this.m_ContainerQualifiedName = ((Codex.IDefinitionSymbol)(value)).ContainerQualifiedName;
            this.m_Modifiers = ((Codex.IDefinitionSymbol)(value)).Modifiers;
            this.m_Glyph = ((Codex.IDefinitionSymbol)(value)).Glyph;
            this.m_SymbolDepth = ((Codex.IDefinitionSymbol)(value)).SymbolDepth;
            this.m_DocumentationInfo = EntityUtilities.NullOrCopy(value.DocumentationInfo, v => new DocumentationInfo().CopyFrom<DocumentationInfo>(v));;
            this.m_TypeName = ((Codex.IDefinitionSymbol)(value)).TypeName;
            this.m_DeclarationName = ((Codex.IDefinitionSymbol)(value)).DeclarationName;
            this.m_Comment = ((Codex.IDefinitionSymbol)(value)).Comment;
            base.CopyFrom<ReferenceSymbol>(((Codex.IReferenceSymbol)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSymbol))]
    public partial class ReferenceSymbol : Symbol, Codex.IReferenceSymbol {
        
        private string m_ReferenceKind;
        
        private bool m_IsImplicitlyDeclared;
        
        private bool m_ExcludeFromDefaultSearch;
        
        private bool m_ExcludeFromSearch;
        
        public ReferenceSymbol() {
        }
        
        public ReferenceSymbol(Codex.IReferenceSymbol value) {
            this.CopyFrom<ReferenceSymbol>(value);
        }
        
        public ReferenceSymbol(Codex.ICodeSymbol value) : 
                base(value) {
        }
        
        /// <summary>
        /// The kind of reference. This is used to group references.
        /// (i.e. for C#(aka .NET) MethodOverride, InterfaceMemberImplementation, InterfaceImplementation, etc.)
        /// </summary>
        public virtual string ReferenceKind {
            get {
                return this.m_ReferenceKind;
            }
            set {
                this.m_ReferenceKind = value;
            }
        }
        
        /// <summary>
        /// Indicates the corresponding definition is implicitly declared and therefore this should not be
        /// used for find all references search
        /// </summary>
        public virtual bool IsImplicitlyDeclared {
            get {
                return this.m_IsImplicitlyDeclared;
            }
            set {
                this.m_IsImplicitlyDeclared = value;
            }
        }
        
        /// <summary>
        /// Indicates if the symbol should be excluded from the definition/find all references search (by default).
        /// Symbol will only be included if kind is explicitly specified
        /// </summary>
        public virtual bool ExcludeFromDefaultSearch {
            get {
                return this.m_ExcludeFromDefaultSearch;
            }
            set {
                this.m_ExcludeFromDefaultSearch = value;
            }
        }
        
        /// <summary>
        /// Indicates if the symbol should NEVER be included in the definition/find all references search.
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.IReferenceSymbol value)
            where TTarget : ReferenceSymbol {
            this.m_ReferenceKind = ((Codex.IReferenceSymbol)(value)).ReferenceKind;
            this.m_IsImplicitlyDeclared = ((Codex.IReferenceSymbol)(value)).IsImplicitlyDeclared;
            this.m_ExcludeFromDefaultSearch = ((Codex.IReferenceSymbol)(value)).ExcludeFromDefaultSearch;
            this.m_ExcludeFromSearch = ((Codex.IReferenceSymbol)(value)).ExcludeFromSearch;
            base.CopyFrom<Symbol>(((Codex.ICodeSymbol)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeSymbol))]
    public partial class Symbol : Codex.EntityBase, Codex.ICodeSymbol {
        
        private string m_ProjectId;
        
        private Codex.ObjectModel.SymbolId m_Id;
        
        private string m_Kind;
        
        public Symbol() {
            Initialize();
        }
        
        public Symbol(Codex.ICodeSymbol value) {
            Initialize();
            this.CopyFrom<Symbol>(value);
        }
        
        /// <summary>
        /// The identifier of the project in which the symbol appears
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// The identifier for the symbol
        /// </summary>
        public virtual Codex.ObjectModel.SymbolId Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        /// <summary>
        /// The symbol kind. (i.e. interface, method, field)
        /// </summary>
        public virtual string Kind {
            get {
                return this.m_Kind;
            }
            set {
                this.m_Kind = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.ICodeSymbol value)
            where TTarget : Symbol {
            this.m_ProjectId = ((Codex.ICodeSymbol)(value)).ProjectId;
            this.m_Id = ((Codex.ICodeSymbol)(value)).Id;
            this.m_Kind = ((Codex.ICodeSymbol)(value)).Kind;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.IReferenceSearchResult))]
    public partial class ReferenceSearchResult : ProjectFileScopeEntity, Codex.Sdk.Search.IReferenceSearchResult {
        
        private ReferenceSpan m_ReferenceSpan;
        
        public ReferenceSearchResult() {
        }
        
        public ReferenceSearchResult(Codex.Sdk.Search.IReferenceSearchResult value) {
            this.CopyFrom<ReferenceSearchResult>(value);
        }
        
        public ReferenceSearchResult(Codex.IProjectFileScopeEntity value) : 
                base(value) {
        }
        
        Codex.IReferenceSpan Codex.Sdk.Search.IReferenceSearchResult.ReferenceSpan {
            get {
                return this.ReferenceSpan;
            }
        }
        
        public virtual ReferenceSpan ReferenceSpan {
            get {
                return this.m_ReferenceSpan;
            }
            set {
                this.m_ReferenceSpan = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.Sdk.Search.IReferenceSearchResult value)
            where TTarget : ReferenceSearchResult {
            this.m_ReferenceSpan = EntityUtilities.NullOrCopy(value.ReferenceSpan, v => new ReferenceSpan().CopyFrom<ReferenceSpan>(v));;
            base.CopyFrom<ProjectFileScopeEntity>(((Codex.IProjectFileScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.ITextLineSpanResult))]
    public partial class TextLineSpanResult : ProjectFileScopeEntity, Codex.Sdk.Search.ITextLineSpanResult {
        
        private TextLineSpan m_TextSpan;
        
        public TextLineSpanResult() {
        }
        
        public TextLineSpanResult(Codex.Sdk.Search.ITextLineSpanResult value) {
            this.CopyFrom<TextLineSpanResult>(value);
        }
        
        public TextLineSpanResult(Codex.IProjectFileScopeEntity value) : 
                base(value) {
        }
        
        Codex.ITextLineSpan Codex.Sdk.Search.ITextLineSpanResult.TextSpan {
            get {
                return this.TextSpan;
            }
        }
        
        public virtual TextLineSpan TextSpan {
            get {
                return this.m_TextSpan;
            }
            set {
                this.m_TextSpan = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.Sdk.Search.ITextLineSpanResult value)
            where TTarget : TextLineSpanResult {
            this.m_TextSpan = EntityUtilities.NullOrCopy(value.TextSpan, v => new TextLineSpan().CopyFrom<TextLineSpan>(v));;
            base.CopyFrom<ProjectFileScopeEntity>(((Codex.IProjectFileScopeEntity)(value)));
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.ISearchResult))]
    public partial class SearchResult : Codex.EntityBase, Codex.Sdk.Search.ISearchResult {
        
        private TextLineSpanResult m_TextLine;
        
        private DefinitionSymbol m_Definition;
        
        public SearchResult() {
            Initialize();
        }
        
        public SearchResult(Codex.Sdk.Search.ISearchResult value) {
            Initialize();
            this.CopyFrom<SearchResult>(value);
        }
        
        /// <summary>
        /// The text span for a text result
        /// </summary>
        Codex.Sdk.Search.ITextLineSpanResult Codex.Sdk.Search.ISearchResult.TextLine {
            get {
                return this.TextLine;
            }
        }
        
        /// <summary>
        /// The text span for a text result
        /// </summary>
        public virtual TextLineSpanResult TextLine {
            get {
                return this.m_TextLine;
            }
            set {
                this.m_TextLine = value;
            }
        }
        
        /// <summary>
        /// The definition of the search result
        /// </summary>
        Codex.IDefinitionSymbol Codex.Sdk.Search.ISearchResult.Definition {
            get {
                return this.Definition;
            }
        }
        
        /// <summary>
        /// The definition of the search result
        /// </summary>
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.Sdk.Search.ISearchResult value)
            where TTarget : SearchResult {
            this.m_TextLine = EntityUtilities.NullOrCopy(value.TextLine, v => new TextLineSpanResult().CopyFrom<TextLineSpanResult>(v));;
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().CopyFrom<DefinitionSymbol>(v));;
            return ((TTarget)(this));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.IIndex))]
    public partial class Index : Codex.EntityBase, Codex.Sdk.Search.IIndex {
        
        public Index() {
            Initialize();
        }
        
        public Index(Codex.Sdk.Search.IIndex value) {
            Initialize();
            this.CopyFrom<Index>(value);
        }
        
        public virtual TTarget CopyFrom<TTarget>(Codex.Sdk.Search.IIndex value)
            where TTarget : Index {
            return ((TTarget)(this));
        }
    }
}
namespace Codex.Framework.Types {
    using System.Threading.Tasks;
    using Commit = Codex.ObjectModel.Commit;
    using CommitChangedFile = Codex.ObjectModel.CommitChangedFile;
    using CommitFileLink = Codex.ObjectModel.CommitFileLink;
    using Branch = Codex.ObjectModel.Branch;
    using BoundSourceFile = Codex.ObjectModel.BoundSourceFile;
    using BoundSourceInfo = Codex.ObjectModel.BoundSourceInfo;
    using SourceControlFileInfo = Codex.ObjectModel.SourceControlFileInfo;
    using SourceFileInfo = Codex.ObjectModel.SourceFileInfo;
    using EncodingDescription = Codex.ObjectModel.EncodingDescription;
    using SourceFile = Codex.ObjectModel.SourceFile;
    using OutliningRegion = Codex.ObjectModel.OutliningRegion;
    using DefinitionSpan = Codex.ObjectModel.DefinitionSpan;
    using ParameterDefinitionSpan = Codex.ObjectModel.ParameterDefinitionSpan;
    using ReferenceSpan = Codex.ObjectModel.ReferenceSpan;
    using ParameterReferenceSpan = Codex.ObjectModel.ParameterReferenceSpan;
    using ClassificationSpan = Codex.ObjectModel.ClassificationSpan;
    using SymbolSpan = Codex.ObjectModel.SymbolSpan;
    using TextLineSpan = Codex.ObjectModel.TextLineSpan;
    using LineSpan = Codex.ObjectModel.LineSpan;
    using Span = Codex.ObjectModel.Span;
    using CodeReview = Codex.ObjectModel.CodeReview;
    using CodeReviewIteration = Codex.ObjectModel.CodeReviewIteration;
    using CodeReviewerInfo = Codex.ObjectModel.CodeReviewerInfo;
    using CodeReviewFile = Codex.ObjectModel.CodeReviewFile;
    using CodeReviewCommentThread = Codex.ObjectModel.CodeReviewCommentThread;
    using CodeReviewComment = Codex.ObjectModel.CodeReviewComment;
    using StableIdMarker = Codex.ObjectModel.StableIdMarker;
    using StableIdReservation = Codex.ObjectModel.StableIdReservation;
    using LanguageInfo = Codex.ObjectModel.LanguageInfo;
    using ClassificationStyle = Codex.ObjectModel.ClassificationStyle;
    using AnalyzedProject = Codex.ObjectModel.AnalyzedProject;
    using ReferencedProject = Codex.ObjectModel.ReferencedProject;
    using ProjectFileLink = Codex.ObjectModel.ProjectFileLink;
    using DocumentationInfo = Codex.ObjectModel.DocumentationInfo;
    using ParameterDocumentation = Codex.ObjectModel.ParameterDocumentation;
    using TypedParameterDocumentation = Codex.ObjectModel.TypedParameterDocumentation;
    using DocumentationReferenceSymbol = Codex.ObjectModel.DocumentationReferenceSymbol;
    using PropertySearchModel = Codex.ObjectModel.PropertySearchModel;
    using PropertyMap = Codex.ObjectModel.PropertyMap;
    using Repository = Codex.ObjectModel.Repository;
    using RepositoryReference = Codex.ObjectModel.RepositoryReference;
    using SearchEntity = Codex.ObjectModel.SearchEntity;
    using RepoScopeEntity = Codex.ObjectModel.RepoScopeEntity;
    using CommitScopeEntity = Codex.ObjectModel.CommitScopeEntity;
    using ProjectScopeEntity = Codex.ObjectModel.ProjectScopeEntity;
    using RepoFileScopeEntity = Codex.ObjectModel.RepoFileScopeEntity;
    using ProjectFileScopeEntity = Codex.ObjectModel.ProjectFileScopeEntity;
    using RegisteredEntity = Codex.ObjectModel.RegisteredEntity;
    using StoredFilter = Codex.ObjectModel.StoredFilter;
    using ChildFilterReference = Codex.ObjectModel.ChildFilterReference;
    using GroupedStoredFilterIds = Codex.ObjectModel.GroupedStoredFilterIds;
    using DefinitionSearchModel = Codex.ObjectModel.DefinitionSearchModel;
    using LanguageSearchModel = Codex.ObjectModel.LanguageSearchModel;
    using ReferenceSearchModel = Codex.ObjectModel.ReferenceSearchModel;
    using SourceSearchModelBase = Codex.ObjectModel.SourceSearchModelBase;
    using BoundSourceSearchModel = Codex.ObjectModel.BoundSourceSearchModel;
    using TextSourceSearchModel = Codex.ObjectModel.TextSourceSearchModel;
    using RepositorySearchModel = Codex.ObjectModel.RepositorySearchModel;
    using ProjectSearchModel = Codex.ObjectModel.ProjectSearchModel;
    using ProjectReferenceSearchModel = Codex.ObjectModel.ProjectReferenceSearchModel;
    using CommitSearchModel = Codex.ObjectModel.CommitSearchModel;
    using CommitFilesSearchModel = Codex.ObjectModel.CommitFilesSearchModel;
    using FileStatistics = Codex.ObjectModel.FileStatistics;
    using RepositoryStoreInfo = Codex.ObjectModel.RepositoryStoreInfo;
    using CommitFilesDirectory = Codex.ObjectModel.CommitFilesDirectory;
    using DefinitionSymbol = Codex.ObjectModel.DefinitionSymbol;
    using ReferenceSymbol = Codex.ObjectModel.ReferenceSymbol;
    using Symbol = Codex.ObjectModel.Symbol;
    using ReferenceSearchResult = Codex.ObjectModel.ReferenceSearchResult;
    using TextLineSpanResult = Codex.ObjectModel.TextLineSpanResult;
    using SearchResult = Codex.ObjectModel.SearchResult;
    using Index = Codex.ObjectModel.Index;
    
    
    public partial interface IStore {
    }
}
