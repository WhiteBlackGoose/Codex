//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Codex.ObjectModel {
    using System.Threading.Tasks;
    using Codex.Framework.Types;
    using Codex;
    using static Codex.ObjectModel.Mappings;
    
    
    public partial class CodexTypeUtilities {
        
        private static System.Collections.Generic.IReadOnlyDictionary<System.Type, System.Type> s_typeMappings = CreateTypeMapping();
        
        private static System.Collections.Generic.Dictionary<System.Type, System.Type> CreateTypeMapping() {
            System.Collections.Generic.Dictionary<System.Type, System.Type> typeMapping = new System.Collections.Generic.Dictionary<System.Type, System.Type>();
            typeMapping.Add(typeof(Codex.ICommit), typeof(Commit));
            typeMapping.Add(typeof(Commit), typeof(Codex.ICommit));
            typeMapping.Add(typeof(Codex.ICommitChangedFile), typeof(CommitChangedFile));
            typeMapping.Add(typeof(CommitChangedFile), typeof(Codex.ICommitChangedFile));
            typeMapping.Add(typeof(Codex.ICommitFileLink), typeof(CommitFileLink));
            typeMapping.Add(typeof(CommitFileLink), typeof(Codex.ICommitFileLink));
            typeMapping.Add(typeof(Codex.IBranch), typeof(Branch));
            typeMapping.Add(typeof(Branch), typeof(Codex.IBranch));
            typeMapping.Add(typeof(Codex.IBoundSourceFile), typeof(BoundSourceFile));
            typeMapping.Add(typeof(BoundSourceFile), typeof(Codex.IBoundSourceFile));
            typeMapping.Add(typeof(Codex.IBoundSourceInfo), typeof(BoundSourceInfo));
            typeMapping.Add(typeof(BoundSourceInfo), typeof(Codex.IBoundSourceInfo));
            typeMapping.Add(typeof(Codex.ISourceControlFileInfo), typeof(SourceControlFileInfo));
            typeMapping.Add(typeof(SourceControlFileInfo), typeof(Codex.ISourceControlFileInfo));
            typeMapping.Add(typeof(Codex.ISourceFileInfo), typeof(SourceFileInfo));
            typeMapping.Add(typeof(SourceFileInfo), typeof(Codex.ISourceFileInfo));
            typeMapping.Add(typeof(Codex.IEncodingDescription), typeof(EncodingDescription));
            typeMapping.Add(typeof(EncodingDescription), typeof(Codex.IEncodingDescription));
            typeMapping.Add(typeof(Codex.ISourceFileBase), typeof(SourceFileBase));
            typeMapping.Add(typeof(SourceFileBase), typeof(Codex.ISourceFileBase));
            typeMapping.Add(typeof(Codex.ISourceFile), typeof(SourceFile));
            typeMapping.Add(typeof(SourceFile), typeof(Codex.ISourceFile));
            typeMapping.Add(typeof(Codex.IChunkedSourceFile), typeof(ChunkedSourceFile));
            typeMapping.Add(typeof(ChunkedSourceFile), typeof(Codex.IChunkedSourceFile));
            typeMapping.Add(typeof(Codex.IChunkReference), typeof(ChunkReference));
            typeMapping.Add(typeof(ChunkReference), typeof(Codex.IChunkReference));
            typeMapping.Add(typeof(Codex.ISourceFileContentChunk), typeof(SourceFileContentChunk));
            typeMapping.Add(typeof(SourceFileContentChunk), typeof(Codex.ISourceFileContentChunk));
            typeMapping.Add(typeof(Codex.IOutliningRegion), typeof(OutliningRegion));
            typeMapping.Add(typeof(OutliningRegion), typeof(Codex.IOutliningRegion));
            typeMapping.Add(typeof(Codex.IDefinitionSpan), typeof(DefinitionSpan));
            typeMapping.Add(typeof(DefinitionSpan), typeof(Codex.IDefinitionSpan));
            typeMapping.Add(typeof(Codex.IParameterDefinitionSpan), typeof(ParameterDefinitionSpan));
            typeMapping.Add(typeof(ParameterDefinitionSpan), typeof(Codex.IParameterDefinitionSpan));
            typeMapping.Add(typeof(Codex.IReferenceSpan), typeof(ReferenceSpan));
            typeMapping.Add(typeof(ReferenceSpan), typeof(Codex.IReferenceSpan));
            typeMapping.Add(typeof(Codex.IParameterReferenceSpan), typeof(ParameterReferenceSpan));
            typeMapping.Add(typeof(ParameterReferenceSpan), typeof(Codex.IParameterReferenceSpan));
            typeMapping.Add(typeof(Codex.IClassificationSpan), typeof(ClassificationSpan));
            typeMapping.Add(typeof(ClassificationSpan), typeof(Codex.IClassificationSpan));
            typeMapping.Add(typeof(Codex.ISymbolSpan), typeof(SymbolSpan));
            typeMapping.Add(typeof(SymbolSpan), typeof(Codex.ISymbolSpan));
            typeMapping.Add(typeof(Codex.ITextLineSpan), typeof(TextLineSpan));
            typeMapping.Add(typeof(TextLineSpan), typeof(Codex.ITextLineSpan));
            typeMapping.Add(typeof(Codex.ILineSpan), typeof(LineSpan));
            typeMapping.Add(typeof(LineSpan), typeof(Codex.ILineSpan));
            typeMapping.Add(typeof(Codex.ISpan), typeof(Span));
            typeMapping.Add(typeof(Span), typeof(Codex.ISpan));
            typeMapping.Add(typeof(Codex.ICodeReview), typeof(CodeReview));
            typeMapping.Add(typeof(CodeReview), typeof(Codex.ICodeReview));
            typeMapping.Add(typeof(Codex.ICodeReviewIteration), typeof(CodeReviewIteration));
            typeMapping.Add(typeof(CodeReviewIteration), typeof(Codex.ICodeReviewIteration));
            typeMapping.Add(typeof(Codex.ICodeReviewerInfo), typeof(CodeReviewerInfo));
            typeMapping.Add(typeof(CodeReviewerInfo), typeof(Codex.ICodeReviewerInfo));
            typeMapping.Add(typeof(Codex.ICodeReviewFile), typeof(CodeReviewFile));
            typeMapping.Add(typeof(CodeReviewFile), typeof(Codex.ICodeReviewFile));
            typeMapping.Add(typeof(Codex.ICodeReviewCommentThread), typeof(CodeReviewCommentThread));
            typeMapping.Add(typeof(CodeReviewCommentThread), typeof(Codex.ICodeReviewCommentThread));
            typeMapping.Add(typeof(Codex.ICodeReviewComment), typeof(CodeReviewComment));
            typeMapping.Add(typeof(CodeReviewComment), typeof(Codex.ICodeReviewComment));
            typeMapping.Add(typeof(Codex.IDocumentationInfo), typeof(DocumentationInfo));
            typeMapping.Add(typeof(DocumentationInfo), typeof(Codex.IDocumentationInfo));
            typeMapping.Add(typeof(Codex.IParameterDocumentation), typeof(ParameterDocumentation));
            typeMapping.Add(typeof(ParameterDocumentation), typeof(Codex.IParameterDocumentation));
            typeMapping.Add(typeof(Codex.ITypedParameterDocumentation), typeof(TypedParameterDocumentation));
            typeMapping.Add(typeof(TypedParameterDocumentation), typeof(Codex.ITypedParameterDocumentation));
            typeMapping.Add(typeof(Codex.IDocumentationReferenceSymbol), typeof(DocumentationReferenceSymbol));
            typeMapping.Add(typeof(DocumentationReferenceSymbol), typeof(Codex.IDocumentationReferenceSymbol));
            typeMapping.Add(typeof(Codex.ILanguageInfo), typeof(LanguageInfo));
            typeMapping.Add(typeof(LanguageInfo), typeof(Codex.ILanguageInfo));
            typeMapping.Add(typeof(Codex.IClassificationStyle), typeof(ClassificationStyle));
            typeMapping.Add(typeof(ClassificationStyle), typeof(Codex.IClassificationStyle));
            typeMapping.Add(typeof(Codex.IProject), typeof(AnalyzedProject));
            typeMapping.Add(typeof(AnalyzedProject), typeof(Codex.IProject));
            typeMapping.Add(typeof(Codex.IReferencedProject), typeof(ReferencedProject));
            typeMapping.Add(typeof(ReferencedProject), typeof(Codex.IReferencedProject));
            typeMapping.Add(typeof(Codex.IProjectFileLink), typeof(ProjectFileLink));
            typeMapping.Add(typeof(ProjectFileLink), typeof(Codex.IProjectFileLink));
            typeMapping.Add(typeof(Codex.IPropertySearchModel), typeof(PropertySearchModel));
            typeMapping.Add(typeof(PropertySearchModel), typeof(Codex.IPropertySearchModel));
            typeMapping.Add(typeof(Codex.IPropertyMap), typeof(PropertyMap));
            typeMapping.Add(typeof(PropertyMap), typeof(Codex.IPropertyMap));
            typeMapping.Add(typeof(Codex.IRepository), typeof(Repository));
            typeMapping.Add(typeof(Repository), typeof(Codex.IRepository));
            typeMapping.Add(typeof(Codex.IRepositoryReference), typeof(RepositoryReference));
            typeMapping.Add(typeof(RepositoryReference), typeof(Codex.IRepositoryReference));
            typeMapping.Add(typeof(Codex.ISearchEntity), typeof(SearchEntity));
            typeMapping.Add(typeof(SearchEntity), typeof(Codex.ISearchEntity));
            typeMapping.Add(typeof(Codex.IRepoScopeEntity), typeof(RepoScopeEntity));
            typeMapping.Add(typeof(RepoScopeEntity), typeof(Codex.IRepoScopeEntity));
            typeMapping.Add(typeof(Codex.ICommitScopeEntity), typeof(CommitScopeEntity));
            typeMapping.Add(typeof(CommitScopeEntity), typeof(Codex.ICommitScopeEntity));
            typeMapping.Add(typeof(Codex.IProjectScopeEntity), typeof(ProjectScopeEntity));
            typeMapping.Add(typeof(ProjectScopeEntity), typeof(Codex.IProjectScopeEntity));
            typeMapping.Add(typeof(Codex.IRepoFileScopeEntity), typeof(RepoFileScopeEntity));
            typeMapping.Add(typeof(RepoFileScopeEntity), typeof(Codex.IRepoFileScopeEntity));
            typeMapping.Add(typeof(Codex.IProjectFileScopeEntity), typeof(ProjectFileScopeEntity));
            typeMapping.Add(typeof(ProjectFileScopeEntity), typeof(Codex.IProjectFileScopeEntity));
            typeMapping.Add(typeof(Codex.IRegisteredEntity), typeof(RegisteredEntity));
            typeMapping.Add(typeof(RegisteredEntity), typeof(Codex.IRegisteredEntity));
            typeMapping.Add(typeof(Codex.IStoredFilter), typeof(StoredFilter));
            typeMapping.Add(typeof(StoredFilter), typeof(Codex.IStoredFilter));
            typeMapping.Add(typeof(Codex.IChildFilterReference), typeof(ChildFilterReference));
            typeMapping.Add(typeof(ChildFilterReference), typeof(Codex.IChildFilterReference));
            typeMapping.Add(typeof(Codex.IGroupedStoredFilterIds), typeof(GroupedStoredFilterIds));
            typeMapping.Add(typeof(GroupedStoredFilterIds), typeof(Codex.IGroupedStoredFilterIds));
            typeMapping.Add(typeof(Codex.IDefinitionSearchModel), typeof(DefinitionSearchModel));
            typeMapping.Add(typeof(DefinitionSearchModel), typeof(Codex.IDefinitionSearchModel));
            typeMapping.Add(typeof(Codex.ILanguageSearchModel), typeof(LanguageSearchModel));
            typeMapping.Add(typeof(LanguageSearchModel), typeof(Codex.ILanguageSearchModel));
            typeMapping.Add(typeof(Codex.IReferenceSearchModel), typeof(ReferenceSearchModel));
            typeMapping.Add(typeof(ReferenceSearchModel), typeof(Codex.IReferenceSearchModel));
            typeMapping.Add(typeof(Codex.ISourceSearchModelBase), typeof(SourceSearchModelBase));
            typeMapping.Add(typeof(SourceSearchModelBase), typeof(Codex.ISourceSearchModelBase));
            typeMapping.Add(typeof(Codex.IBoundSourceSearchModel), typeof(BoundSourceSearchModel));
            typeMapping.Add(typeof(BoundSourceSearchModel), typeof(Codex.IBoundSourceSearchModel));
            typeMapping.Add(typeof(Codex.ITextSourceSearchModel), typeof(TextSourceSearchModel));
            typeMapping.Add(typeof(TextSourceSearchModel), typeof(Codex.ITextSourceSearchModel));
            typeMapping.Add(typeof(Codex.ITextChunkSearchModel), typeof(TextChunkSearchModel));
            typeMapping.Add(typeof(TextChunkSearchModel), typeof(Codex.ITextChunkSearchModel));
            typeMapping.Add(typeof(Codex.IRepositorySearchModel), typeof(RepositorySearchModel));
            typeMapping.Add(typeof(RepositorySearchModel), typeof(Codex.IRepositorySearchModel));
            typeMapping.Add(typeof(Codex.IProjectSearchModel), typeof(ProjectSearchModel));
            typeMapping.Add(typeof(ProjectSearchModel), typeof(Codex.IProjectSearchModel));
            typeMapping.Add(typeof(Codex.IProjectReferenceSearchModel), typeof(ProjectReferenceSearchModel));
            typeMapping.Add(typeof(ProjectReferenceSearchModel), typeof(Codex.IProjectReferenceSearchModel));
            typeMapping.Add(typeof(Codex.ICommitSearchModel), typeof(CommitSearchModel));
            typeMapping.Add(typeof(CommitSearchModel), typeof(Codex.ICommitSearchModel));
            typeMapping.Add(typeof(Codex.ICommitFilesSearchModel), typeof(CommitFilesSearchModel));
            typeMapping.Add(typeof(CommitFilesSearchModel), typeof(Codex.ICommitFilesSearchModel));
            typeMapping.Add(typeof(Codex.IStableIdMarker), typeof(StableIdMarker));
            typeMapping.Add(typeof(StableIdMarker), typeof(Codex.IStableIdMarker));
            typeMapping.Add(typeof(Codex.IStableIdReservation), typeof(StableIdReservation));
            typeMapping.Add(typeof(StableIdReservation), typeof(Codex.IStableIdReservation));
            typeMapping.Add(typeof(Codex.IFileStatistics), typeof(FileStatistics));
            typeMapping.Add(typeof(FileStatistics), typeof(Codex.IFileStatistics));
            typeMapping.Add(typeof(Codex.IRepositoryStoreInfo), typeof(RepositoryStoreInfo));
            typeMapping.Add(typeof(RepositoryStoreInfo), typeof(Codex.IRepositoryStoreInfo));
            typeMapping.Add(typeof(Codex.ICommitFilesDirectory), typeof(CommitFilesDirectory));
            typeMapping.Add(typeof(CommitFilesDirectory), typeof(Codex.ICommitFilesDirectory));
            typeMapping.Add(typeof(Codex.IDefinitionSymbol), typeof(DefinitionSymbol));
            typeMapping.Add(typeof(DefinitionSymbol), typeof(Codex.IDefinitionSymbol));
            typeMapping.Add(typeof(Codex.IReferenceSymbol), typeof(ReferenceSymbol));
            typeMapping.Add(typeof(ReferenceSymbol), typeof(Codex.IReferenceSymbol));
            typeMapping.Add(typeof(Codex.ICodeSymbol), typeof(Symbol));
            typeMapping.Add(typeof(Symbol), typeof(Codex.ICodeSymbol));
            typeMapping.Add(typeof(Codex.Sdk.Search.IReferenceSearchResult), typeof(ReferenceSearchResult));
            typeMapping.Add(typeof(ReferenceSearchResult), typeof(Codex.Sdk.Search.IReferenceSearchResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.ITextLineSpanResult), typeof(TextLineSpanResult));
            typeMapping.Add(typeof(TextLineSpanResult), typeof(Codex.Sdk.Search.ITextLineSpanResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.ISearchResult), typeof(SearchResult));
            typeMapping.Add(typeof(SearchResult), typeof(Codex.Sdk.Search.ISearchResult));
            typeMapping.Add(typeof(Codex.Sdk.Search.IIndex), typeof(Index));
            typeMapping.Add(typeof(Index), typeof(Codex.Sdk.Search.IIndex));
            typeMapping.Add(typeof(Codex.ObjectModel.IMapping), typeof(Mapping));
            typeMapping.Add(typeof(Mapping), typeof(Codex.ObjectModel.IMapping));
            return typeMapping;
        }
    }
    
    public partial class Mappings {
        
        private DefinitionSearchModelMapping<Codex.IDefinitionSearchModel> _lazyDefinition;
        
        private ReferenceSearchModelMapping<Codex.IReferenceSearchModel> _lazyReference;
        
        private TextChunkSearchModelMapping<Codex.ITextChunkSearchModel> _lazyTextChunk;
        
        private TextSourceSearchModelMapping<Codex.ITextSourceSearchModel> _lazyTextSource;
        
        private BoundSourceSearchModelMapping<Codex.IBoundSourceSearchModel> _lazyBoundSource;
        
        private LanguageSearchModelMapping<Codex.ILanguageSearchModel> _lazyLanguage;
        
        private RepositorySearchModelMapping<Codex.IRepositorySearchModel> _lazyRepository;
        
        private ProjectSearchModelMapping<Codex.IProjectSearchModel> _lazyProject;
        
        private CommitSearchModelMapping<Codex.ICommitSearchModel> _lazyCommit;
        
        private CommitFilesSearchModelMapping<Codex.ICommitFilesSearchModel> _lazyCommitFiles;
        
        private ProjectReferenceSearchModelMapping<Codex.IProjectReferenceSearchModel> _lazyProjectReference;
        
        private PropertySearchModelMapping<Codex.IPropertySearchModel> _lazyProperty;
        
        private StoredFilterMapping<Codex.IStoredFilter> _lazyStoredFilter;
        
        private StableIdMarkerMapping<Codex.IStableIdMarker> _lazyStableIdMarker;
        
        private RegisteredEntityMapping<Codex.IRegisteredEntity> _lazyRegisteredEntity;
        
        public override Codex.ObjectModel.MappingBase this[string fullName] {
            get {
                if (this.IsMatch(fullName, "RegisteredEntity")) {
                    return this.RegisteredEntity;
                }
                if (this.IsMatch(fullName, "StableIdMarker")) {
                    return this.StableIdMarker;
                }
                if (this.IsMatch(fullName, "StoredFilter")) {
                    return this.StoredFilter;
                }
                if (this.IsMatch(fullName, "Property")) {
                    return this.Property;
                }
                if (this.IsMatch(fullName, "ProjectReference")) {
                    return this.ProjectReference;
                }
                if (this.IsMatch(fullName, "CommitFiles")) {
                    return this.CommitFiles;
                }
                if (this.IsMatch(fullName, "Commit")) {
                    return this.Commit;
                }
                if (this.IsMatch(fullName, "Project")) {
                    return this.Project;
                }
                if (this.IsMatch(fullName, "Repository")) {
                    return this.Repository;
                }
                if (this.IsMatch(fullName, "Language")) {
                    return this.Language;
                }
                if (this.IsMatch(fullName, "BoundSource")) {
                    return this.BoundSource;
                }
                if (this.IsMatch(fullName, "TextSource")) {
                    return this.TextSource;
                }
                if (this.IsMatch(fullName, "TextChunk")) {
                    return this.TextChunk;
                }
                if (this.IsMatch(fullName, "Reference")) {
                    return this.Reference;
                }
                if (this.IsMatch(fullName, "Definition")) {
                    return this.Definition;
                }
                return base[fullName];
            }
        }
        
        public DefinitionSearchModelMapping<Codex.IDefinitionSearchModel> Definition {
            get {
                if ((this._lazyDefinition == null)) {
                    this._lazyDefinition = new DefinitionSearchModelMapping<Codex.IDefinitionSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyDefinition;
            }
        }
        
        public ReferenceSearchModelMapping<Codex.IReferenceSearchModel> Reference {
            get {
                if ((this._lazyReference == null)) {
                    this._lazyReference = new ReferenceSearchModelMapping<Codex.IReferenceSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyReference;
            }
        }
        
        public TextChunkSearchModelMapping<Codex.ITextChunkSearchModel> TextChunk {
            get {
                if ((this._lazyTextChunk == null)) {
                    this._lazyTextChunk = new TextChunkSearchModelMapping<Codex.ITextChunkSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyTextChunk;
            }
        }
        
        public TextSourceSearchModelMapping<Codex.ITextSourceSearchModel> TextSource {
            get {
                if ((this._lazyTextSource == null)) {
                    this._lazyTextSource = new TextSourceSearchModelMapping<Codex.ITextSourceSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyTextSource;
            }
        }
        
        public BoundSourceSearchModelMapping<Codex.IBoundSourceSearchModel> BoundSource {
            get {
                if ((this._lazyBoundSource == null)) {
                    this._lazyBoundSource = new BoundSourceSearchModelMapping<Codex.IBoundSourceSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyBoundSource;
            }
        }
        
        public LanguageSearchModelMapping<Codex.ILanguageSearchModel> Language {
            get {
                if ((this._lazyLanguage == null)) {
                    this._lazyLanguage = new LanguageSearchModelMapping<Codex.ILanguageSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyLanguage;
            }
        }
        
        public RepositorySearchModelMapping<Codex.IRepositorySearchModel> Repository {
            get {
                if ((this._lazyRepository == null)) {
                    this._lazyRepository = new RepositorySearchModelMapping<Codex.IRepositorySearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyRepository;
            }
        }
        
        public ProjectSearchModelMapping<Codex.IProjectSearchModel> Project {
            get {
                if ((this._lazyProject == null)) {
                    this._lazyProject = new ProjectSearchModelMapping<Codex.IProjectSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyProject;
            }
        }
        
        public CommitSearchModelMapping<Codex.ICommitSearchModel> Commit {
            get {
                if ((this._lazyCommit == null)) {
                    this._lazyCommit = new CommitSearchModelMapping<Codex.ICommitSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyCommit;
            }
        }
        
        public CommitFilesSearchModelMapping<Codex.ICommitFilesSearchModel> CommitFiles {
            get {
                if ((this._lazyCommitFiles == null)) {
                    this._lazyCommitFiles = new CommitFilesSearchModelMapping<Codex.ICommitFilesSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyCommitFiles;
            }
        }
        
        public ProjectReferenceSearchModelMapping<Codex.IProjectReferenceSearchModel> ProjectReference {
            get {
                if ((this._lazyProjectReference == null)) {
                    this._lazyProjectReference = new ProjectReferenceSearchModelMapping<Codex.IProjectReferenceSearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyProjectReference;
            }
        }
        
        public PropertySearchModelMapping<Codex.IPropertySearchModel> Property {
            get {
                if ((this._lazyProperty == null)) {
                    this._lazyProperty = new PropertySearchModelMapping<Codex.IPropertySearchModel>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyProperty;
            }
        }
        
        public StoredFilterMapping<Codex.IStoredFilter> StoredFilter {
            get {
                if ((this._lazyStoredFilter == null)) {
                    this._lazyStoredFilter = new StoredFilterMapping<Codex.IStoredFilter>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyStoredFilter;
            }
        }
        
        public StableIdMarkerMapping<Codex.IStableIdMarker> StableIdMarker {
            get {
                if ((this._lazyStableIdMarker == null)) {
                    this._lazyStableIdMarker = new StableIdMarkerMapping<Codex.IStableIdMarker>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyStableIdMarker;
            }
        }
        
        public RegisteredEntityMapping<Codex.IRegisteredEntity> RegisteredEntity {
            get {
                if ((this._lazyRegisteredEntity == null)) {
                    this._lazyRegisteredEntity = new RegisteredEntityMapping<Codex.IRegisteredEntity>(new Codex.ObjectModel.MappingInfo(null, MappingInfo, null, Codex.ObjectStage.All));
                }
                return this._lazyRegisteredEntity;
            }
        }
        
        public partial class CommitMapping<TRoot> : CommitScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ICommit>
         {
            
            private Mapping<TRoot, string> _lazyDescription;
            
            private Mapping<TRoot, System.DateTime> _lazyDateUploaded;
            
            private Mapping<TRoot, System.DateTime> _lazyDateCommitted;
            
            private CommitChangedFileMapping<TRoot> _lazyChangedFiles;
            
            public CommitMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ChangedFiles")) {
                        return this.ChangedFiles[fullName];
                    }
                    if (this.IsMatch(fullName, "DateCommitted")) {
                        return this.DateCommitted[fullName];
                    }
                    if (this.IsMatch(fullName, "DateUploaded")) {
                        return this.DateUploaded[fullName];
                    }
                    if (this.IsMatch(fullName, "Description")) {
                        return this.Description[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Description {
                get {
                    if ((this._lazyDescription == null)) {
                        this._lazyDescription = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Description", MappingInfo, Codex.SearchBehavior.FullText, Codex.ObjectStage.All));
                    }
                    return this._lazyDescription;
                }
            }
            
            public Mapping<TRoot, System.DateTime> DateUploaded {
                get {
                    if ((this._lazyDateUploaded == null)) {
                        this._lazyDateUploaded = new Mapping<TRoot, System.DateTime>(new Codex.ObjectModel.MappingInfo("DateUploaded", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyDateUploaded;
                }
            }
            
            public Mapping<TRoot, System.DateTime> DateCommitted {
                get {
                    if ((this._lazyDateCommitted == null)) {
                        this._lazyDateCommitted = new Mapping<TRoot, System.DateTime>(new Codex.ObjectModel.MappingInfo("DateCommitted", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyDateCommitted;
                }
            }
            
            public CommitChangedFileMapping<TRoot> ChangedFiles {
                get {
                    if ((this._lazyChangedFiles == null)) {
                        this._lazyChangedFiles = new CommitChangedFileMapping<TRoot>(new Codex.ObjectModel.MappingInfo("ChangedFiles", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyChangedFiles;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommit value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Description.VisitEx(visitor, value.Description);
                this.DateUploaded.VisitEx(visitor, value.DateUploaded);
                this.DateCommitted.VisitEx(visitor, value.DateCommitted);
                this.ChangedFiles.VisitEx(visitor, value.ChangedFiles);
            }
        }
        
        public partial class CommitChangedFileMapping<TRoot> : CommitFileLinkMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ICommitChangedFile>
         {
            
            public CommitChangedFileMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    return base[fullName];
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommitChangedFile value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
            }
        }
        
        public partial class CommitFileLinkMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ICommitFileLink>
         {
            
            private Mapping<TRoot, string> _lazyFileId;
            
            private Mapping<TRoot, string> _lazyVersionControlFileId;
            
            public CommitFileLinkMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "VersionControlFileId")) {
                        return this.VersionControlFileId[fullName];
                    }
                    if (this.IsMatch(fullName, "FileId")) {
                        return this.FileId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> FileId {
                get {
                    if ((this._lazyFileId == null)) {
                        this._lazyFileId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("FileId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyFileId;
                }
            }
            
            public Mapping<TRoot, string> VersionControlFileId {
                get {
                    if ((this._lazyVersionControlFileId == null)) {
                        this._lazyVersionControlFileId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("VersionControlFileId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyVersionControlFileId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommitFileLink value) {
                if ((value == null)) {
                    return;
                }
                this.FileId.VisitEx(visitor, value.FileId);
                this.VersionControlFileId.VisitEx(visitor, value.VersionControlFileId);
            }
        }
        
        public partial class BoundSourceInfoMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IBoundSourceInfo>
         {
            
            private Mapping<TRoot, bool> _lazyExcludeFromSearch;
            
            public BoundSourceInfoMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ExcludeFromSearch")) {
                        return this.ExcludeFromSearch[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, bool> ExcludeFromSearch {
                get {
                    if ((this._lazyExcludeFromSearch == null)) {
                        this._lazyExcludeFromSearch = new Mapping<TRoot, bool>(new Codex.ObjectModel.MappingInfo("ExcludeFromSearch", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyExcludeFromSearch;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IBoundSourceInfo value) {
                if ((value == null)) {
                    return;
                }
                this.ExcludeFromSearch.VisitEx(visitor, value.ExcludeFromSearch);
            }
        }
        
        public partial class SourceControlFileInfoMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ISourceControlFileInfo>
         {
            
            private Mapping<TRoot, string> _lazySourceControlContentId;
            
            public SourceControlFileInfoMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "SourceControlContentId")) {
                        return this.SourceControlContentId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> SourceControlContentId {
                get {
                    if ((this._lazySourceControlContentId == null)) {
                        this._lazySourceControlContentId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("SourceControlContentId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazySourceControlContentId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISourceControlFileInfo value) {
                if ((value == null)) {
                    return;
                }
                this.SourceControlContentId.VisitEx(visitor, value.SourceControlContentId);
            }
        }
        
        public partial class SourceFileInfoMapping<TRoot> : SourceControlFileInfoMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ISourceFileInfo>
         {
            
            private Mapping<TRoot, string> _lazyRepoRelativePath;
            
            private Mapping<TRoot, string> _lazyRepositoryName;
            
            private Mapping<TRoot, string> _lazyProjectRelativePath;
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            public SourceFileInfoMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectRelativePath")) {
                        return this.ProjectRelativePath[fullName];
                    }
                    if (this.IsMatch(fullName, "RepositoryName")) {
                        return this.RepositoryName[fullName];
                    }
                    if (this.IsMatch(fullName, "RepoRelativePath")) {
                        return this.RepoRelativePath[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> RepoRelativePath {
                get {
                    if ((this._lazyRepoRelativePath == null)) {
                        this._lazyRepoRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepoRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepoRelativePath;
                }
            }
            
            public Mapping<TRoot, string> RepositoryName {
                get {
                    if ((this._lazyRepositoryName == null)) {
                        this._lazyRepositoryName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepositoryName", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepositoryName;
                }
            }
            
            public Mapping<TRoot, string> ProjectRelativePath {
                get {
                    if ((this._lazyProjectRelativePath == null)) {
                        this._lazyProjectRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectRelativePath;
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISourceFileInfo value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.RepoRelativePath.VisitEx(visitor, value.RepoRelativePath);
                this.RepositoryName.VisitEx(visitor, value.RepositoryName);
                this.ProjectRelativePath.VisitEx(visitor, value.ProjectRelativePath);
                this.ProjectId.VisitEx(visitor, value.ProjectId);
            }
        }
        
        public partial class SourceFileBaseMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ISourceFileBase>
         {
            
            private SourceFileInfoMapping<TRoot> _lazyInfo;
            
            private Mapping<TRoot, bool> _lazyExcludeFromSearch;
            
            public SourceFileBaseMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ExcludeFromSearch")) {
                        return this.ExcludeFromSearch[fullName];
                    }
                    if (this.IsMatch(fullName, "Info")) {
                        return this.Info[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public SourceFileInfoMapping<TRoot> Info {
                get {
                    if ((this._lazyInfo == null)) {
                        this._lazyInfo = new SourceFileInfoMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Info", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyInfo;
                }
            }
            
            public Mapping<TRoot, bool> ExcludeFromSearch {
                get {
                    if ((this._lazyExcludeFromSearch == null)) {
                        this._lazyExcludeFromSearch = new Mapping<TRoot, bool>(new Codex.ObjectModel.MappingInfo("ExcludeFromSearch", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyExcludeFromSearch;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISourceFileBase value) {
                if ((value == null)) {
                    return;
                }
                this.Info.VisitEx(visitor, value.Info);
                this.ExcludeFromSearch.VisitEx(visitor, value.ExcludeFromSearch);
            }
        }
        
        public partial class ChunkedSourceFileMapping<TRoot> : SourceFileBaseMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IChunkedSourceFile>
         {
            
            private ChunkReferenceMapping<TRoot> _lazyChunks;
            
            public ChunkedSourceFileMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Chunks")) {
                        return this.Chunks[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public ChunkReferenceMapping<TRoot> Chunks {
                get {
                    if ((this._lazyChunks == null)) {
                        this._lazyChunks = new ChunkReferenceMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Chunks", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyChunks;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IChunkedSourceFile value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Chunks.VisitEx(visitor, value.Chunks);
            }
        }
        
        public partial class ChunkReferenceMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IChunkReference>
         {
            
            private Mapping<TRoot, string> _lazyId;
            
            public ChunkReferenceMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Id")) {
                        return this.Id[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Id {
                get {
                    if ((this._lazyId == null)) {
                        this._lazyId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Id", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IChunkReference value) {
                if ((value == null)) {
                    return;
                }
                this.Id.VisitEx(visitor, value.Id);
            }
        }
        
        public partial class SourceFileContentChunkMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ISourceFileContentChunk>
         {
            
            private Mapping<TRoot, string> _lazyContentLines;
            
            public SourceFileContentChunkMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ContentLines")) {
                        return this.ContentLines[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ContentLines {
                get {
                    if ((this._lazyContentLines == null)) {
                        this._lazyContentLines = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ContentLines", MappingInfo, Codex.SearchBehavior.FullText, Codex.ObjectStage.All));
                    }
                    return this._lazyContentLines;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISourceFileContentChunk value) {
                if ((value == null)) {
                    return;
                }
                this.ContentLines.VisitEx(visitor, value.ContentLines);
            }
        }
        
        public partial class DefinitionSpanMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IDefinitionSpan>
         {
            
            private DefinitionSymbolMapping<TRoot> _lazyDefinition;
            
            public DefinitionSpanMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Definition")) {
                        return this.Definition[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public DefinitionSymbolMapping<TRoot> Definition {
                get {
                    if ((this._lazyDefinition == null)) {
                        this._lazyDefinition = new DefinitionSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Definition", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyDefinition;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IDefinitionSpan value) {
                if ((value == null)) {
                    return;
                }
                this.Definition.VisitEx(visitor, value.Definition);
            }
        }
        
        public partial class ReferenceSpanMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IReferenceSpan>
         {
            
            private ReferenceSymbolMapping<TRoot> _lazyReference;
            
            private ParameterReferenceSpanMapping<TRoot> _lazyParameters;
            
            public ReferenceSpanMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Parameters")) {
                        return this.Parameters[fullName];
                    }
                    if (this.IsMatch(fullName, "Reference")) {
                        return this.Reference[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public ReferenceSymbolMapping<TRoot> Reference {
                get {
                    if ((this._lazyReference == null)) {
                        this._lazyReference = new ReferenceSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Reference", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyReference;
                }
            }
            
            public ParameterReferenceSpanMapping<TRoot> Parameters {
                get {
                    if ((this._lazyParameters == null)) {
                        this._lazyParameters = new ParameterReferenceSpanMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Parameters", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyParameters;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IReferenceSpan value) {
                if ((value == null)) {
                    return;
                }
                this.Reference.VisitEx(visitor, value.Reference);
                this.Parameters.VisitEx(visitor, value.Parameters);
            }
        }
        
        public partial class ParameterReferenceSpanMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IParameterReferenceSpan>
         {
            
            private Mapping<TRoot, int> _lazyParameterIndex;
            
            public ParameterReferenceSpanMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ParameterIndex")) {
                        return this.ParameterIndex[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, int> ParameterIndex {
                get {
                    if ((this._lazyParameterIndex == null)) {
                        this._lazyParameterIndex = new Mapping<TRoot, int>(new Codex.ObjectModel.MappingInfo("ParameterIndex", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyParameterIndex;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IParameterReferenceSpan value) {
                if ((value == null)) {
                    return;
                }
                this.ParameterIndex.VisitEx(visitor, value.ParameterIndex);
            }
        }
        
        public partial class DocumentationInfoMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IDocumentationInfo>
         {
            
            private SymbolMapping<TRoot> _lazyAssociatedSymbol;
            
            private DocumentationReferenceSymbolMapping<TRoot> _lazyReferences;
            
            private TypedParameterDocumentationMapping<TRoot> _lazyArguments;
            
            private TypedParameterDocumentationMapping<TRoot> _lazyExceptions;
            
            public DocumentationInfoMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Exceptions")) {
                        return this.Exceptions[fullName];
                    }
                    if (this.IsMatch(fullName, "Arguments")) {
                        return this.Arguments[fullName];
                    }
                    if (this.IsMatch(fullName, "References")) {
                        return this.References[fullName];
                    }
                    if (this.IsMatch(fullName, "AssociatedSymbol")) {
                        return this.AssociatedSymbol[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public SymbolMapping<TRoot> AssociatedSymbol {
                get {
                    if ((this._lazyAssociatedSymbol == null)) {
                        this._lazyAssociatedSymbol = new SymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("AssociatedSymbol", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyAssociatedSymbol;
                }
            }
            
            public DocumentationReferenceSymbolMapping<TRoot> References {
                get {
                    if ((this._lazyReferences == null)) {
                        this._lazyReferences = new DocumentationReferenceSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("References", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyReferences;
                }
            }
            
            public TypedParameterDocumentationMapping<TRoot> Arguments {
                get {
                    if ((this._lazyArguments == null)) {
                        this._lazyArguments = new TypedParameterDocumentationMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Arguments", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyArguments;
                }
            }
            
            public TypedParameterDocumentationMapping<TRoot> Exceptions {
                get {
                    if ((this._lazyExceptions == null)) {
                        this._lazyExceptions = new TypedParameterDocumentationMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Exceptions", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyExceptions;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IDocumentationInfo value) {
                if ((value == null)) {
                    return;
                }
                this.AssociatedSymbol.VisitEx(visitor, value.AssociatedSymbol);
                this.References.VisitEx(visitor, value.References);
                this.Arguments.VisitEx(visitor, value.Arguments);
                this.Exceptions.VisitEx(visitor, value.Exceptions);
            }
        }
        
        public partial class TypedParameterDocumentationMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ITypedParameterDocumentation>
         {
            
            private DocumentationReferenceSymbolMapping<TRoot> _lazyType;
            
            public TypedParameterDocumentationMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Type")) {
                        return this.Type[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public DocumentationReferenceSymbolMapping<TRoot> Type {
                get {
                    if ((this._lazyType == null)) {
                        this._lazyType = new DocumentationReferenceSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Type", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyType;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ITypedParameterDocumentation value) {
                if ((value == null)) {
                    return;
                }
                this.Type.VisitEx(visitor, value.Type);
            }
        }
        
        public partial class DocumentationReferenceSymbolMapping<TRoot> : ReferenceSymbolMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IDocumentationReferenceSymbol>
         {
            
            public DocumentationReferenceSymbolMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    return base[fullName];
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IDocumentationReferenceSymbol value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
            }
        }
        
        public partial class LanguageInfoMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ILanguageInfo>
         {
            
            private Mapping<TRoot, string> _lazyName;
            
            public LanguageInfoMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Name")) {
                        return this.Name[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Name {
                get {
                    if ((this._lazyName == null)) {
                        this._lazyName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Name", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ILanguageInfo value) {
                if ((value == null)) {
                    return;
                }
                this.Name.VisitEx(visitor, value.Name);
            }
        }
        
        public partial class AnalyzedProjectMapping<TRoot> : ProjectScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProject>
         {
            
            private ProjectFileLinkMapping<TRoot> _lazyPrimaryFile;
            
            private ProjectFileLinkMapping<TRoot> _lazyFiles;
            
            private ReferencedProjectMapping<TRoot> _lazyProjectReferences;
            
            public AnalyzedProjectMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ProjectReferences")) {
                        return this.ProjectReferences[fullName];
                    }
                    if (this.IsMatch(fullName, "Files")) {
                        return this.Files[fullName];
                    }
                    if (this.IsMatch(fullName, "PrimaryFile")) {
                        return this.PrimaryFile[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public ProjectFileLinkMapping<TRoot> PrimaryFile {
                get {
                    if ((this._lazyPrimaryFile == null)) {
                        this._lazyPrimaryFile = new ProjectFileLinkMapping<TRoot>(new Codex.ObjectModel.MappingInfo("PrimaryFile", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyPrimaryFile;
                }
            }
            
            public ProjectFileLinkMapping<TRoot> Files {
                get {
                    if ((this._lazyFiles == null)) {
                        this._lazyFiles = new ProjectFileLinkMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Files", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyFiles;
                }
            }
            
            public ReferencedProjectMapping<TRoot> ProjectReferences {
                get {
                    if ((this._lazyProjectReferences == null)) {
                        this._lazyProjectReferences = new ReferencedProjectMapping<TRoot>(new Codex.ObjectModel.MappingInfo("ProjectReferences", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectReferences;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProject value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.PrimaryFile.VisitEx(visitor, value.PrimaryFile);
                this.Files.VisitEx(visitor, value.Files);
                this.ProjectReferences.VisitEx(visitor, value.ProjectReferences);
            }
        }
        
        public partial class ReferencedProjectMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IReferencedProject>
         {
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            private DefinitionSymbolMapping<TRoot> _lazyDefinitions;
            
            public ReferencedProjectMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Definitions")) {
                        return this.Definitions[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public DefinitionSymbolMapping<TRoot> Definitions {
                get {
                    if ((this._lazyDefinitions == null)) {
                        this._lazyDefinitions = new DefinitionSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Definitions", MappingInfo, null, Codex.ObjectStage.Analysis));
                    }
                    return this._lazyDefinitions;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IReferencedProject value) {
                if ((value == null)) {
                    return;
                }
                this.ProjectId.VisitEx(visitor, value.ProjectId);
                this.Definitions.VisitEx(visitor, value.Definitions);
            }
        }
        
        public partial class ProjectFileLinkMapping<TRoot> : ProjectFileScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProjectFileLink>
         {
            
            public ProjectFileLinkMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    return base[fullName];
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProjectFileLink value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
            }
        }
        
        public partial class PropertySearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IPropertySearchModel>
         {
            
            private Mapping<TRoot, string> _lazyKey;
            
            private Mapping<TRoot, string> _lazyValue;
            
            private Mapping<TRoot, string> _lazyOwnerId;
            
            public PropertySearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "OwnerId")) {
                        return this.OwnerId[fullName];
                    }
                    if (this.IsMatch(fullName, "Value")) {
                        return this.Value[fullName];
                    }
                    if (this.IsMatch(fullName, "Key")) {
                        return this.Key[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Key {
                get {
                    if ((this._lazyKey == null)) {
                        this._lazyKey = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Key", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyKey;
                }
            }
            
            public Mapping<TRoot, string> Value {
                get {
                    if ((this._lazyValue == null)) {
                        this._lazyValue = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Value", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyValue;
                }
            }
            
            public Mapping<TRoot, string> OwnerId {
                get {
                    if ((this._lazyOwnerId == null)) {
                        this._lazyOwnerId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("OwnerId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyOwnerId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IPropertySearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Key.VisitEx(visitor, value.Key);
                this.Value.VisitEx(visitor, value.Value);
                this.OwnerId.VisitEx(visitor, value.OwnerId);
            }
        }
        
        public partial class RepositoryMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IRepository>
         {
            
            private Mapping<TRoot, string> _lazyName;
            
            public RepositoryMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Name")) {
                        return this.Name[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Name {
                get {
                    if ((this._lazyName == null)) {
                        this._lazyName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Name", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IRepository value) {
                if ((value == null)) {
                    return;
                }
                this.Name.VisitEx(visitor, value.Name);
            }
        }
        
        public partial class SearchEntityMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ISearchEntity>
         {
            
            private Mapping<TRoot, string> _lazyEntityContentId;
            
            private Mapping<TRoot, int> _lazyStableId;
            
            private Mapping<TRoot, string> _lazySortKey;
            
            public SearchEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "SortKey")) {
                        return this.SortKey[fullName];
                    }
                    if (this.IsMatch(fullName, "StableId")) {
                        return this.StableId[fullName];
                    }
                    if (this.IsMatch(fullName, "EntityContentId")) {
                        return this.EntityContentId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> EntityContentId {
                get {
                    if ((this._lazyEntityContentId == null)) {
                        this._lazyEntityContentId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("EntityContentId", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.Search));
                    }
                    return this._lazyEntityContentId;
                }
            }
            
            public Mapping<TRoot, int> StableId {
                get {
                    if ((this._lazyStableId == null)) {
                        this._lazyStableId = new Mapping<TRoot, int>(new Codex.ObjectModel.MappingInfo("StableId", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.Search));
                    }
                    return this._lazyStableId;
                }
            }
            
            public Mapping<TRoot, string> SortKey {
                get {
                    if ((this._lazySortKey == null)) {
                        this._lazySortKey = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("SortKey", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.Search));
                    }
                    return this._lazySortKey;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISearchEntity value) {
                if ((value == null)) {
                    return;
                }
                this.EntityContentId.VisitEx(visitor, value.EntityContentId);
                this.StableId.VisitEx(visitor, value.StableId);
                this.SortKey.VisitEx(visitor, value.SortKey);
            }
        }
        
        public partial class RepoScopeEntityMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.IRepoScopeEntity>
         {
            
            private Mapping<TRoot, string> _lazyRepositoryName;
            
            public RepoScopeEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "RepositoryName")) {
                        return this.RepositoryName[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> RepositoryName {
                get {
                    if ((this._lazyRepositoryName == null)) {
                        this._lazyRepositoryName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepositoryName", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepositoryName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IRepoScopeEntity value) {
                if ((value == null)) {
                    return;
                }
                this.RepositoryName.VisitEx(visitor, value.RepositoryName);
            }
        }
        
        public partial class CommitScopeEntityMapping<TRoot> : RepoScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ICommitScopeEntity>
         {
            
            private Mapping<TRoot, string> _lazyCommitId;
            
            public CommitScopeEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "CommitId")) {
                        return this.CommitId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> CommitId {
                get {
                    if ((this._lazyCommitId == null)) {
                        this._lazyCommitId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("CommitId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyCommitId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommitScopeEntity value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.CommitId.VisitEx(visitor, value.CommitId);
            }
        }
        
        public partial class ProjectScopeEntityMapping<TRoot> : RepoScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProjectScopeEntity>
         {
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            public ProjectScopeEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProjectScopeEntity value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.ProjectId.VisitEx(visitor, value.ProjectId);
            }
        }
        
        public partial class RepoFileScopeEntityMapping<TRoot> : RepoScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IRepoFileScopeEntity>
         {
            
            private Mapping<TRoot, string> _lazyRepoRelativePath;
            
            public RepoFileScopeEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "RepoRelativePath")) {
                        return this.RepoRelativePath[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> RepoRelativePath {
                get {
                    if ((this._lazyRepoRelativePath == null)) {
                        this._lazyRepoRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepoRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepoRelativePath;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IRepoFileScopeEntity value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.RepoRelativePath.VisitEx(visitor, value.RepoRelativePath);
            }
        }
        
        public partial class ProjectFileScopeEntityMapping<TRoot> : RepoFileScopeEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProjectFileScopeEntity>
         {
            
            private Mapping<TRoot, string> _lazyProjectRelativePath;
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            public ProjectFileScopeEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectRelativePath")) {
                        return this.ProjectRelativePath[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ProjectRelativePath {
                get {
                    if ((this._lazyProjectRelativePath == null)) {
                        this._lazyProjectRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectRelativePath;
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProjectFileScopeEntity value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.ProjectRelativePath.VisitEx(visitor, value.ProjectRelativePath);
                this.ProjectId.VisitEx(visitor, value.ProjectId);
            }
        }
        
        public partial class RegisteredEntityMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IRegisteredEntity>
         {
            
            private Mapping<TRoot, string> _lazyEntityUid;
            
            private Mapping<TRoot, string> _lazyIndexName;
            
            public RegisteredEntityMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "IndexName")) {
                        return this.IndexName[fullName];
                    }
                    if (this.IsMatch(fullName, "EntityUid")) {
                        return this.EntityUid[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> EntityUid {
                get {
                    if ((this._lazyEntityUid == null)) {
                        this._lazyEntityUid = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("EntityUid", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyEntityUid;
                }
            }
            
            public Mapping<TRoot, string> IndexName {
                get {
                    if ((this._lazyIndexName == null)) {
                        this._lazyIndexName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("IndexName", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyIndexName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IRegisteredEntity value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.EntityUid.VisitEx(visitor, value.EntityUid);
                this.IndexName.VisitEx(visitor, value.IndexName);
            }
        }
        
        public partial class StoredFilterMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IStoredFilter>
         {
            
            private Mapping<TRoot, string> _lazyName;
            
            private Mapping<TRoot, string> _lazyIndexName;
            
            private Mapping<TRoot, string> _lazyFilterHash;
            
            public StoredFilterMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "FilterHash")) {
                        return this.FilterHash[fullName];
                    }
                    if (this.IsMatch(fullName, "IndexName")) {
                        return this.IndexName[fullName];
                    }
                    if (this.IsMatch(fullName, "Name")) {
                        return this.Name[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> Name {
                get {
                    if ((this._lazyName == null)) {
                        this._lazyName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Name", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyName;
                }
            }
            
            public Mapping<TRoot, string> IndexName {
                get {
                    if ((this._lazyIndexName == null)) {
                        this._lazyIndexName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("IndexName", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyIndexName;
                }
            }
            
            public Mapping<TRoot, string> FilterHash {
                get {
                    if ((this._lazyFilterHash == null)) {
                        this._lazyFilterHash = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("FilterHash", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyFilterHash;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IStoredFilter value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Name.VisitEx(visitor, value.Name);
                this.IndexName.VisitEx(visitor, value.IndexName);
                this.FilterHash.VisitEx(visitor, value.FilterHash);
            }
        }
        
        public partial class DefinitionSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IDefinitionSearchModel>
         {
            
            private DefinitionSymbolMapping<TRoot> _lazyDefinition;
            
            private Mapping<TRoot, string> _lazyKeywords;
            
            public DefinitionSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Keywords")) {
                        return this.Keywords[fullName];
                    }
                    if (this.IsMatch(fullName, "Definition")) {
                        return this.Definition[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public DefinitionSymbolMapping<TRoot> Definition {
                get {
                    if ((this._lazyDefinition == null)) {
                        this._lazyDefinition = new DefinitionSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Definition", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyDefinition;
                }
            }
            
            public Mapping<TRoot, string> Keywords {
                get {
                    if ((this._lazyKeywords == null)) {
                        this._lazyKeywords = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Keywords", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyKeywords;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IDefinitionSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Definition.VisitEx(visitor, value.Definition);
                this.Keywords.VisitEx(visitor, value.Keywords);
            }
        }
        
        public partial class LanguageSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ILanguageSearchModel>
         {
            
            private LanguageInfoMapping<TRoot> _lazyLanguage;
            
            public LanguageSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Language")) {
                        return this.Language[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public LanguageInfoMapping<TRoot> Language {
                get {
                    if ((this._lazyLanguage == null)) {
                        this._lazyLanguage = new LanguageInfoMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Language", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyLanguage;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ILanguageSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Language.VisitEx(visitor, value.Language);
            }
        }
        
        public partial class ReferenceSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IReferenceSearchModel>
         {
            
            private ReferenceSymbolMapping<TRoot> _lazyReference;
            
            private Mapping<TRoot, string> _lazyProjectRelativePath;
            
            private Mapping<TRoot, string> _lazyRepoRelativePath;
            
            private Mapping<TRoot, string> _lazyRepositoryName;
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            public ReferenceSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    if (this.IsMatch(fullName, "RepositoryName")) {
                        return this.RepositoryName[fullName];
                    }
                    if (this.IsMatch(fullName, "RepoRelativePath")) {
                        return this.RepoRelativePath[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectRelativePath")) {
                        return this.ProjectRelativePath[fullName];
                    }
                    if (this.IsMatch(fullName, "Reference")) {
                        return this.Reference[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public ReferenceSymbolMapping<TRoot> Reference {
                get {
                    if ((this._lazyReference == null)) {
                        this._lazyReference = new ReferenceSymbolMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Reference", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyReference;
                }
            }
            
            public Mapping<TRoot, string> ProjectRelativePath {
                get {
                    if ((this._lazyProjectRelativePath == null)) {
                        this._lazyProjectRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectRelativePath;
                }
            }
            
            public Mapping<TRoot, string> RepoRelativePath {
                get {
                    if ((this._lazyRepoRelativePath == null)) {
                        this._lazyRepoRelativePath = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepoRelativePath", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepoRelativePath;
                }
            }
            
            public Mapping<TRoot, string> RepositoryName {
                get {
                    if ((this._lazyRepositoryName == null)) {
                        this._lazyRepositoryName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepositoryName", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepositoryName;
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IReferenceSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Reference.VisitEx(visitor, value.Reference);
                this.ProjectRelativePath.VisitEx(visitor, value.ProjectRelativePath);
                this.RepoRelativePath.VisitEx(visitor, value.RepoRelativePath);
                this.RepositoryName.VisitEx(visitor, value.RepositoryName);
                this.ProjectId.VisitEx(visitor, value.ProjectId);
            }
        }
        
        public partial class SourceSearchModelBaseMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ISourceSearchModelBase>
         {
            
            private SourceControlFileInfoMapping<TRoot> _lazySourceControlInfo;
            
            private ChunkedSourceFileMapping<TRoot> _lazyFile;
            
            public SourceSearchModelBaseMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "File")) {
                        return this.File[fullName];
                    }
                    if (this.IsMatch(fullName, "SourceControlInfo")) {
                        return this.SourceControlInfo[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public SourceControlFileInfoMapping<TRoot> SourceControlInfo {
                get {
                    if ((this._lazySourceControlInfo == null)) {
                        this._lazySourceControlInfo = new SourceControlFileInfoMapping<TRoot>(new Codex.ObjectModel.MappingInfo("SourceControlInfo", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazySourceControlInfo;
                }
            }
            
            public ChunkedSourceFileMapping<TRoot> File {
                get {
                    if ((this._lazyFile == null)) {
                        this._lazyFile = new ChunkedSourceFileMapping<TRoot>(new Codex.ObjectModel.MappingInfo("File", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyFile;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ISourceSearchModelBase value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.SourceControlInfo.VisitEx(visitor, value.SourceControlInfo);
                this.File.VisitEx(visitor, value.File);
            }
        }
        
        public partial class BoundSourceSearchModelMapping<TRoot> : SourceSearchModelBaseMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IBoundSourceSearchModel>
         {
            
            private BoundSourceInfoMapping<TRoot> _lazyBindingInfo;
            
            public BoundSourceSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "BindingInfo")) {
                        return this.BindingInfo[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public BoundSourceInfoMapping<TRoot> BindingInfo {
                get {
                    if ((this._lazyBindingInfo == null)) {
                        this._lazyBindingInfo = new BoundSourceInfoMapping<TRoot>(new Codex.ObjectModel.MappingInfo("BindingInfo", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyBindingInfo;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IBoundSourceSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.BindingInfo.VisitEx(visitor, value.BindingInfo);
            }
        }
        
        public partial class TextSourceSearchModelMapping<TRoot> : SourceSearchModelBaseMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ITextSourceSearchModel>
         {
            
            public TextSourceSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    return base[fullName];
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ITextSourceSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
            }
        }
        
        public partial class TextChunkSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ITextChunkSearchModel>
         {
            
            private SourceFileContentChunkMapping<TRoot> _lazyChunk;
            
            public TextChunkSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Chunk")) {
                        return this.Chunk[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public SourceFileContentChunkMapping<TRoot> Chunk {
                get {
                    if ((this._lazyChunk == null)) {
                        this._lazyChunk = new SourceFileContentChunkMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Chunk", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyChunk;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ITextChunkSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Chunk.VisitEx(visitor, value.Chunk);
            }
        }
        
        public partial class RepositorySearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IRepositorySearchModel>
         {
            
            private RepositoryMapping<TRoot> _lazyRepository;
            
            public RepositorySearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Repository")) {
                        return this.Repository[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public RepositoryMapping<TRoot> Repository {
                get {
                    if ((this._lazyRepository == null)) {
                        this._lazyRepository = new RepositoryMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Repository", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyRepository;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IRepositorySearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Repository.VisitEx(visitor, value.Repository);
            }
        }
        
        public partial class ProjectSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProjectSearchModel>
         {
            
            private AnalyzedProjectMapping<TRoot> _lazyProject;
            
            public ProjectSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Project")) {
                        return this.Project[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public AnalyzedProjectMapping<TRoot> Project {
                get {
                    if ((this._lazyProject == null)) {
                        this._lazyProject = new AnalyzedProjectMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Project", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyProject;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProjectSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Project.VisitEx(visitor, value.Project);
            }
        }
        
        public partial class ProjectReferenceSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IProjectReferenceSearchModel>
         {
            
            private ReferencedProjectMapping<TRoot> _lazyProjectReference;
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            private Mapping<TRoot, string> _lazyRepositoryName;
            
            public ProjectReferenceSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "RepositoryName")) {
                        return this.RepositoryName[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectReference")) {
                        return this.ProjectReference[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public ReferencedProjectMapping<TRoot> ProjectReference {
                get {
                    if ((this._lazyProjectReference == null)) {
                        this._lazyProjectReference = new ReferencedProjectMapping<TRoot>(new Codex.ObjectModel.MappingInfo("ProjectReference", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectReference;
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public Mapping<TRoot, string> RepositoryName {
                get {
                    if ((this._lazyRepositoryName == null)) {
                        this._lazyRepositoryName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepositoryName", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepositoryName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IProjectReferenceSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.ProjectReference.VisitEx(visitor, value.ProjectReference);
                this.ProjectId.VisitEx(visitor, value.ProjectId);
                this.RepositoryName.VisitEx(visitor, value.RepositoryName);
            }
        }
        
        public partial class CommitSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ICommitSearchModel>
         {
            
            private CommitMapping<TRoot> _lazyCommit;
            
            public CommitSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Commit")) {
                        return this.Commit[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public CommitMapping<TRoot> Commit {
                get {
                    if ((this._lazyCommit == null)) {
                        this._lazyCommit = new CommitMapping<TRoot>(new Codex.ObjectModel.MappingInfo("Commit", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyCommit;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommitSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.Commit.VisitEx(visitor, value.Commit);
            }
        }
        
        public partial class CommitFilesSearchModelMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.ICommitFilesSearchModel>
         {
            
            private CommitFileLinkMapping<TRoot> _lazyCommitFiles;
            
            private Mapping<TRoot, string> _lazyCommitId;
            
            private Mapping<TRoot, string> _lazyRepositoryName;
            
            public CommitFilesSearchModelMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "RepositoryName")) {
                        return this.RepositoryName[fullName];
                    }
                    if (this.IsMatch(fullName, "CommitId")) {
                        return this.CommitId[fullName];
                    }
                    if (this.IsMatch(fullName, "CommitFiles")) {
                        return this.CommitFiles[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public CommitFileLinkMapping<TRoot> CommitFiles {
                get {
                    if ((this._lazyCommitFiles == null)) {
                        this._lazyCommitFiles = new CommitFileLinkMapping<TRoot>(new Codex.ObjectModel.MappingInfo("CommitFiles", MappingInfo, null, Codex.ObjectStage.All));
                    }
                    return this._lazyCommitFiles;
                }
            }
            
            public Mapping<TRoot, string> CommitId {
                get {
                    if ((this._lazyCommitId == null)) {
                        this._lazyCommitId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("CommitId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyCommitId;
                }
            }
            
            public Mapping<TRoot, string> RepositoryName {
                get {
                    if ((this._lazyRepositoryName == null)) {
                        this._lazyRepositoryName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("RepositoryName", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyRepositoryName;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICommitFilesSearchModel value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.CommitFiles.VisitEx(visitor, value.CommitFiles);
                this.CommitId.VisitEx(visitor, value.CommitId);
                this.RepositoryName.VisitEx(visitor, value.RepositoryName);
            }
        }
        
        public partial class StableIdMarkerMapping<TRoot> : SearchEntityMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IStableIdMarker>
         {
            
            public StableIdMarkerMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    return base[fullName];
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IStableIdMarker value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
            }
        }
        
        public partial class DefinitionSymbolMapping<TRoot> : ReferenceSymbolMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IDefinitionSymbol>
         {
            
            private Mapping<TRoot, string> _lazyAbbreviatedName;
            
            private Mapping<TRoot, string> _lazyKeywords;
            
            private Mapping<TRoot, string> _lazyShortName;
            
            private Mapping<TRoot, string> _lazyContainerQualifiedName;
            
            private Mapping<TRoot, string> _lazyModifiers;
            
            public DefinitionSymbolMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Modifiers")) {
                        return this.Modifiers[fullName];
                    }
                    if (this.IsMatch(fullName, "ContainerQualifiedName")) {
                        return this.ContainerQualifiedName[fullName];
                    }
                    if (this.IsMatch(fullName, "ShortName")) {
                        return this.ShortName[fullName];
                    }
                    if (this.IsMatch(fullName, "Keywords")) {
                        return this.Keywords[fullName];
                    }
                    if (this.IsMatch(fullName, "AbbreviatedName")) {
                        return this.AbbreviatedName[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> AbbreviatedName {
                get {
                    if ((this._lazyAbbreviatedName == null)) {
                        this._lazyAbbreviatedName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("AbbreviatedName", MappingInfo, Codex.SearchBehavior.PrefixTerm, Codex.ObjectStage.All));
                    }
                    return this._lazyAbbreviatedName;
                }
            }
            
            public Mapping<TRoot, string> Keywords {
                get {
                    if ((this._lazyKeywords == null)) {
                        this._lazyKeywords = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Keywords", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyKeywords;
                }
            }
            
            public Mapping<TRoot, string> ShortName {
                get {
                    if ((this._lazyShortName == null)) {
                        this._lazyShortName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ShortName", MappingInfo, Codex.SearchBehavior.PrefixShortName, Codex.ObjectStage.All));
                    }
                    return this._lazyShortName;
                }
            }
            
            public Mapping<TRoot, string> ContainerQualifiedName {
                get {
                    if ((this._lazyContainerQualifiedName == null)) {
                        this._lazyContainerQualifiedName = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ContainerQualifiedName", MappingInfo, Codex.SearchBehavior.PrefixFullName, Codex.ObjectStage.All));
                    }
                    return this._lazyContainerQualifiedName;
                }
            }
            
            public Mapping<TRoot, string> Modifiers {
                get {
                    if ((this._lazyModifiers == null)) {
                        this._lazyModifiers = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Modifiers", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyModifiers;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IDefinitionSymbol value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.AbbreviatedName.VisitEx(visitor, value.AbbreviatedName);
                this.Keywords.VisitEx(visitor, value.Keywords);
                this.ShortName.VisitEx(visitor, value.ShortName);
                this.ContainerQualifiedName.VisitEx(visitor, value.ContainerQualifiedName);
                this.Modifiers.VisitEx(visitor, value.Modifiers);
            }
        }
        
        public partial class ReferenceSymbolMapping<TRoot> : SymbolMapping<TRoot>, Codex.ObjectModel.IMapping<Codex.IReferenceSymbol>
         {
            
            private Mapping<TRoot, string> _lazyReferenceKind;
            
            private Mapping<TRoot, bool> _lazyIsImplicitlyDeclared;
            
            private Mapping<TRoot, bool> _lazyExcludeFromDefaultSearch;
            
            public ReferenceSymbolMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "ExcludeFromDefaultSearch")) {
                        return this.ExcludeFromDefaultSearch[fullName];
                    }
                    if (this.IsMatch(fullName, "IsImplicitlyDeclared")) {
                        return this.IsImplicitlyDeclared[fullName];
                    }
                    if (this.IsMatch(fullName, "ReferenceKind")) {
                        return this.ReferenceKind[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ReferenceKind {
                get {
                    if ((this._lazyReferenceKind == null)) {
                        this._lazyReferenceKind = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ReferenceKind", MappingInfo, Codex.SearchBehavior.Sortword, Codex.ObjectStage.All));
                    }
                    return this._lazyReferenceKind;
                }
            }
            
            public Mapping<TRoot, bool> IsImplicitlyDeclared {
                get {
                    if ((this._lazyIsImplicitlyDeclared == null)) {
                        this._lazyIsImplicitlyDeclared = new Mapping<TRoot, bool>(new Codex.ObjectModel.MappingInfo("IsImplicitlyDeclared", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyIsImplicitlyDeclared;
                }
            }
            
            public Mapping<TRoot, bool> ExcludeFromDefaultSearch {
                get {
                    if ((this._lazyExcludeFromDefaultSearch == null)) {
                        this._lazyExcludeFromDefaultSearch = new Mapping<TRoot, bool>(new Codex.ObjectModel.MappingInfo("ExcludeFromDefaultSearch", MappingInfo, Codex.SearchBehavior.Term, Codex.ObjectStage.All));
                    }
                    return this._lazyExcludeFromDefaultSearch;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.IReferenceSymbol value) {
                if ((value == null)) {
                    return;
                }
                base.Visit(visitor, value);
                this.ReferenceKind.VisitEx(visitor, value.ReferenceKind);
                this.IsImplicitlyDeclared.VisitEx(visitor, value.IsImplicitlyDeclared);
                this.ExcludeFromDefaultSearch.VisitEx(visitor, value.ExcludeFromDefaultSearch);
            }
        }
        
        public partial class SymbolMapping<TRoot> : Codex.ObjectModel.MappingBase, Codex.ObjectModel.IMapping<Codex.ICodeSymbol>
         {
            
            private Mapping<TRoot, string> _lazyProjectId;
            
            private Mapping<TRoot, Codex.ObjectModel.SymbolId> _lazyId;
            
            private Mapping<TRoot, string> _lazyKind;
            
            public SymbolMapping(Codex.ObjectModel.MappingInfo info) : 
                    base(info) {
            }
            
            public override Codex.ObjectModel.MappingBase this[string fullName] {
                get {
                    if (this.IsMatch(fullName, "Kind")) {
                        return this.Kind[fullName];
                    }
                    if (this.IsMatch(fullName, "Id")) {
                        return this.Id[fullName];
                    }
                    if (this.IsMatch(fullName, "ProjectId")) {
                        return this.ProjectId[fullName];
                    }
                    return base[fullName];
                }
            }
            
            public Mapping<TRoot, string> ProjectId {
                get {
                    if ((this._lazyProjectId == null)) {
                        this._lazyProjectId = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("ProjectId", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyProjectId;
                }
            }
            
            public Mapping<TRoot, Codex.ObjectModel.SymbolId> Id {
                get {
                    if ((this._lazyId == null)) {
                        this._lazyId = new Mapping<TRoot, Codex.ObjectModel.SymbolId>(new Codex.ObjectModel.MappingInfo("Id", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyId;
                }
            }
            
            public Mapping<TRoot, string> Kind {
                get {
                    if ((this._lazyKind == null)) {
                        this._lazyKind = new Mapping<TRoot, string>(new Codex.ObjectModel.MappingInfo("Kind", MappingInfo, Codex.SearchBehavior.NormalizedKeyword, Codex.ObjectStage.All));
                    }
                    return this._lazyKind;
                }
            }
            
            public virtual void Visit(Codex.ObjectModel.IVisitor visitor, Codex.ICodeSymbol value) {
                if ((value == null)) {
                    return;
                }
                this.ProjectId.VisitEx(visitor, value.ProjectId);
                this.Id.VisitEx(visitor, value.Id);
                this.Kind.VisitEx(visitor, value.Kind);
            }
        }
    }
    
    public partial interface IClient {
        
        Codex.Sdk.Search.IIndex<Codex.IDefinitionSearchModel> DefinitionIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IReferenceSearchModel> ReferenceIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.ITextChunkSearchModel> TextChunkIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.ITextSourceSearchModel> TextSourceIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IBoundSourceSearchModel> BoundSourceIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.ILanguageSearchModel> LanguageIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IRepositorySearchModel> RepositoryIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IProjectSearchModel> ProjectIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.ICommitSearchModel> CommitIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.ICommitFilesSearchModel> CommitFilesIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IProjectReferenceSearchModel> ProjectReferenceIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IPropertySearchModel> PropertyIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IStoredFilter> StoredFilterIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IStableIdMarker> StableIdMarkerIndex {
            get;
        }
        
        Codex.Sdk.Search.IIndex<Codex.IRegisteredEntity> RegisteredEntityIndex {
            get;
        }
    }
    
    public partial class ClientBase {
        
        private Codex.Sdk.Search.IIndex<Codex.IDefinitionSearchModel> _lazyDefinitionIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IReferenceSearchModel> _lazyReferenceIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.ITextChunkSearchModel> _lazyTextChunkIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.ITextSourceSearchModel> _lazyTextSourceIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IBoundSourceSearchModel> _lazyBoundSourceIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.ILanguageSearchModel> _lazyLanguageIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IRepositorySearchModel> _lazyRepositoryIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IProjectSearchModel> _lazyProjectIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.ICommitSearchModel> _lazyCommitIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.ICommitFilesSearchModel> _lazyCommitFilesIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IProjectReferenceSearchModel> _lazyProjectReferenceIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IPropertySearchModel> _lazyPropertyIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IStoredFilter> _lazyStoredFilterIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IStableIdMarker> _lazyStableIdMarkerIndex;
        
        private Codex.Sdk.Search.IIndex<Codex.IRegisteredEntity> _lazyRegisteredEntityIndex;
        
        public Codex.Sdk.Search.IIndex<Codex.IDefinitionSearchModel> DefinitionIndex {
            get {
                if ((this._lazyDefinitionIndex == null)) {
                    this._lazyDefinitionIndex = this.CreateIndex(Codex.SearchTypes.Definition);
                }
                return this._lazyDefinitionIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IReferenceSearchModel> ReferenceIndex {
            get {
                if ((this._lazyReferenceIndex == null)) {
                    this._lazyReferenceIndex = this.CreateIndex(Codex.SearchTypes.Reference);
                }
                return this._lazyReferenceIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.ITextChunkSearchModel> TextChunkIndex {
            get {
                if ((this._lazyTextChunkIndex == null)) {
                    this._lazyTextChunkIndex = this.CreateIndex(Codex.SearchTypes.TextChunk);
                }
                return this._lazyTextChunkIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.ITextSourceSearchModel> TextSourceIndex {
            get {
                if ((this._lazyTextSourceIndex == null)) {
                    this._lazyTextSourceIndex = this.CreateIndex(Codex.SearchTypes.TextSource);
                }
                return this._lazyTextSourceIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IBoundSourceSearchModel> BoundSourceIndex {
            get {
                if ((this._lazyBoundSourceIndex == null)) {
                    this._lazyBoundSourceIndex = this.CreateIndex(Codex.SearchTypes.BoundSource);
                }
                return this._lazyBoundSourceIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.ILanguageSearchModel> LanguageIndex {
            get {
                if ((this._lazyLanguageIndex == null)) {
                    this._lazyLanguageIndex = this.CreateIndex(Codex.SearchTypes.Language);
                }
                return this._lazyLanguageIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IRepositorySearchModel> RepositoryIndex {
            get {
                if ((this._lazyRepositoryIndex == null)) {
                    this._lazyRepositoryIndex = this.CreateIndex(Codex.SearchTypes.Repository);
                }
                return this._lazyRepositoryIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IProjectSearchModel> ProjectIndex {
            get {
                if ((this._lazyProjectIndex == null)) {
                    this._lazyProjectIndex = this.CreateIndex(Codex.SearchTypes.Project);
                }
                return this._lazyProjectIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.ICommitSearchModel> CommitIndex {
            get {
                if ((this._lazyCommitIndex == null)) {
                    this._lazyCommitIndex = this.CreateIndex(Codex.SearchTypes.Commit);
                }
                return this._lazyCommitIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.ICommitFilesSearchModel> CommitFilesIndex {
            get {
                if ((this._lazyCommitFilesIndex == null)) {
                    this._lazyCommitFilesIndex = this.CreateIndex(Codex.SearchTypes.CommitFiles);
                }
                return this._lazyCommitFilesIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IProjectReferenceSearchModel> ProjectReferenceIndex {
            get {
                if ((this._lazyProjectReferenceIndex == null)) {
                    this._lazyProjectReferenceIndex = this.CreateIndex(Codex.SearchTypes.ProjectReference);
                }
                return this._lazyProjectReferenceIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IPropertySearchModel> PropertyIndex {
            get {
                if ((this._lazyPropertyIndex == null)) {
                    this._lazyPropertyIndex = this.CreateIndex(Codex.SearchTypes.Property);
                }
                return this._lazyPropertyIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IStoredFilter> StoredFilterIndex {
            get {
                if ((this._lazyStoredFilterIndex == null)) {
                    this._lazyStoredFilterIndex = this.CreateIndex(Codex.SearchTypes.StoredFilter);
                }
                return this._lazyStoredFilterIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IStableIdMarker> StableIdMarkerIndex {
            get {
                if ((this._lazyStableIdMarkerIndex == null)) {
                    this._lazyStableIdMarkerIndex = this.CreateIndex(Codex.SearchTypes.StableIdMarker);
                }
                return this._lazyStableIdMarkerIndex;
            }
        }
        
        public Codex.Sdk.Search.IIndex<Codex.IRegisteredEntity> RegisteredEntityIndex {
            get {
                if ((this._lazyRegisteredEntityIndex == null)) {
                    this._lazyRegisteredEntityIndex = this.CreateIndex(Codex.SearchTypes.RegisteredEntity);
                }
                return this._lazyRegisteredEntityIndex;
            }
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommit))]
    public partial class Commit : CommitScopeEntity, Codex.ICommit, Codex.IEntityTarget<Codex.ICommit> {
        
        private string m_Description;
        
        private System.DateTime m_DateUploaded;
        
        private System.DateTime m_DateCommitted;
        
        private System.Collections.Generic.List<string> m_ParentCommitIds = new System.Collections.Generic.List<string>();
        
        private System.Collections.Generic.List<CommitChangedFile> m_ChangedFiles = new System.Collections.Generic.List<CommitChangedFile>();
        
        public Commit() {
        }
        
        public Commit(Codex.ICommit value) {
            this.CopyFrom(value);
        }
        
        public Commit(Codex.ICommitScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public Commit(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The commit description describing the changes
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// The date the commit was stored to the index
        /// </summary>
        public virtual System.DateTime DateUploaded {
            get {
                return this.m_DateUploaded;
            }
            set {
                this.m_DateUploaded = value;
            }
        }
        
        /// <summary>
        /// The date of the commit
        /// </summary>
        public virtual System.DateTime DateCommitted {
            get {
                return this.m_DateCommitted;
            }
            set {
                this.m_DateCommitted = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ICommitScopeEntity.CommitId" /> of the parent commits
        /// </summary>
        public virtual System.Collections.Generic.List<string> ParentCommitIds {
            get {
                return this.m_ParentCommitIds;
            }
            set {
                this.m_ParentCommitIds = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ICommitScopeEntity.CommitId" /> of the parent commits
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.ICommit.ParentCommitIds {
            get {
                return this.ParentCommitIds;
            }
        }
        
        /// <summary>
        /// The files changed in the commit
        /// </summary>
        public virtual System.Collections.Generic.List<CommitChangedFile> ChangedFiles {
            get {
                return this.m_ChangedFiles;
            }
            set {
                this.m_ChangedFiles = value;
            }
        }
        
        /// <summary>
        /// The files changed in the commit
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ICommitChangedFile> Codex.ICommit.ChangedFiles {
            get {
                return this.ChangedFiles;
            }
        }
        
        public virtual void CopyFrom(Codex.ICommit value) {
            this.m_Description = value.Description;
            this.m_DateUploaded = value.DateUploaded;
            this.m_DateCommitted = value.DateCommitted;
            this.m_ParentCommitIds = new System.Collections.Generic.List<string>(value.ParentCommitIds);
            this.m_ChangedFiles = new System.Collections.Generic.List<CommitChangedFile>(System.Linq.Enumerable.Select(value.ChangedFiles, v => EntityUtilities.NullOrCopy(v, _v => new CommitChangedFile().Apply(_v))));
            base.CopyFrom(((Codex.ICommitScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitChangedFile))]
    public partial class CommitChangedFile : CommitFileLink, Codex.ICommitChangedFile, Codex.IEntityTarget<Codex.ICommitChangedFile> {
        
        private Codex.FileChangeKind m_ChangeKind;
        
        private string m_OriginalFilePath;
        
        public CommitChangedFile() {
        }
        
        public CommitChangedFile(Codex.ICommitChangedFile value) {
            this.CopyFrom(value);
        }
        
        public CommitChangedFile(Codex.ICommitFileLink value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The type of change applied to the file
        /// </summary>
        public virtual Codex.FileChangeKind ChangeKind {
            get {
                return this.m_ChangeKind;
            }
            set {
                this.m_ChangeKind = value;
            }
        }
        
        /// <summary>
        /// For a renamed file, the path to the file prior to the rename
        /// </summary>
        public virtual string OriginalFilePath {
            get {
                return this.m_OriginalFilePath;
            }
            set {
                this.m_OriginalFilePath = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICommitChangedFile value) {
            this.m_ChangeKind = value.ChangeKind;
            this.m_OriginalFilePath = value.OriginalFilePath;
            base.CopyFrom(((Codex.ICommitFileLink)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFileLink))]
    public partial class CommitFileLink : Codex.EntityBase, Codex.ICommitFileLink, Codex.IEntityTarget<Codex.ICommitFileLink> {
        
        private string m_RepoRelativePath;
        
        private string m_FileId;
        
        private string m_VersionControlFileId;
        
        public CommitFileLink() {
        }
        
        public CommitFileLink(Codex.ICommitFileLink value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The relative path in the repository to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// Unique identifer for file
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        /// <summary>
        /// Unique identifer for file content as determined by version control
        /// (i.e. the blob hash)
        /// </summary>
        public virtual string VersionControlFileId {
            get {
                return this.m_VersionControlFileId;
            }
            set {
                this.m_VersionControlFileId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICommitFileLink value) {
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.m_FileId = value.FileId;
            this.m_VersionControlFileId = value.VersionControlFileId;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBranch))]
    public partial class Branch : Codex.EntityBase, Codex.IBranch, Codex.IEntityTarget<Codex.IBranch> {
        
        private string m_Name;
        
        private string m_Description;
        
        private string m_HeadCommitId;
        
        public Branch() {
        }
        
        public Branch(Codex.IBranch value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the branch
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The branch description
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// The head commit of the branch
        /// </summary>
        public virtual string HeadCommitId {
            get {
                return this.m_HeadCommitId;
            }
            set {
                this.m_HeadCommitId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IBranch value) {
            this.m_Name = value.Name;
            this.m_Description = value.Description;
            this.m_HeadCommitId = value.HeadCommitId;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceFile))]
    public partial class BoundSourceFile : BoundSourceInfo, Codex.IBoundSourceFile, Codex.IEntityTarget<Codex.IBoundSourceFile> {
        
        private SourceFile m_SourceFile;
        
        private Commit m_Commit;
        
        private Repository m_Repo;
        
        public BoundSourceFile() {
        }
        
        public BoundSourceFile(Codex.IBoundSourceFile value) {
            this.CopyFrom(value);
        }
        
        public BoundSourceFile(Codex.IBoundSourceInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The source file
        /// </summary>
        public virtual SourceFile SourceFile {
            get {
                return this.m_SourceFile;
            }
            set {
                this.m_SourceFile = value;
            }
        }
        
        /// <summary>
        /// The source file
        /// </summary>
        Codex.ISourceFile Codex.IBoundSourceFile.SourceFile {
            get {
                return this.SourceFile;
            }
        }
        
        /// <summary>
        /// Gets the commit referencing the file.
        /// </summary>
        public virtual Commit Commit {
            get {
                return this.m_Commit;
            }
            set {
                this.m_Commit = value;
            }
        }
        
        /// <summary>
        /// Gets the commit referencing the file.
        /// </summary>
        Codex.ICommit Codex.IBoundSourceFile.Commit {
            get {
                return this.Commit;
            }
        }
        
        /// <summary>
        /// Gets the repository containing the file.
        /// </summary>
        public virtual Repository Repo {
            get {
                return this.m_Repo;
            }
            set {
                this.m_Repo = value;
            }
        }
        
        /// <summary>
        /// Gets the repository containing the file.
        /// </summary>
        Codex.IRepository Codex.IBoundSourceFile.Repo {
            get {
                return this.Repo;
            }
        }
        
        public virtual void CopyFrom(Codex.IBoundSourceFile value) {
            this.m_SourceFile = EntityUtilities.NullOrCopy(value.SourceFile, v => new SourceFile().Apply(v));;
            this.m_Commit = EntityUtilities.NullOrCopy(value.Commit, v => new Commit().Apply(v));;
            this.m_Repo = EntityUtilities.NullOrCopy(value.Repo, v => new Repository().Apply(v));;
            base.CopyFrom(((Codex.IBoundSourceInfo)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceInfo))]
    public partial class BoundSourceInfo : Codex.EntityBase, Codex.IBoundSourceInfo, Codex.IEntityTarget<Codex.IBoundSourceInfo> {
        
        private System.Nullable<int> m_ReferenceCount;
        
        private System.Nullable<int> m_DefinitionCount;
        
        private string m_Language;
        
        private System.Collections.Generic.IReadOnlyList<ReferenceSpan> m_References = Codex.Utilities.CollectionUtilities.Empty<ReferenceSpan>.Array;
        
        private System.Collections.Generic.List<DefinitionSpan> m_Definitions = new System.Collections.Generic.List<DefinitionSpan>();
        
        private System.Collections.Generic.IReadOnlyList<ClassificationSpan> m_Classifications = Codex.Utilities.CollectionUtilities.Empty<ClassificationSpan>.Array;
        
        private System.Collections.Generic.List<OutliningRegion> m_OutliningRegions = new System.Collections.Generic.List<OutliningRegion>();
        
        private bool m_ExcludeFromSearch;
        
        public BoundSourceInfo() {
        }
        
        public BoundSourceInfo(Codex.IBoundSourceInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The number of references in the file
        /// </summary>
        public virtual int ReferenceCount {
            get {
                return this.CoerceReferenceCount(this.m_ReferenceCount);
            }
            set {
                this.m_ReferenceCount = value;
            }
        }
        
        /// <summary>
        /// The number of definitions in the file
        /// </summary>
        public virtual int DefinitionCount {
            get {
                return this.CoerceDefinitionCount(this.m_DefinitionCount);
            }
            set {
                this.m_DefinitionCount = value;
            }
        }
        
        /// <summary>
        /// The language of the file
        /// TODO: Remove
        /// </summary>
        public virtual string Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        /// <summary>
        /// References for the document. Sorted. May overlap.
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ReferenceSpan> References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// References for the document. Sorted. May overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IReferenceSpan> Codex.IBoundSourceInfo.References {
            get {
                return this.References;
            }
        }
        
        /// <summary>
        /// Definitions for the document. Sorted. No overlap?
        /// </summary>
        public virtual System.Collections.Generic.List<DefinitionSpan> Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// Definitions for the document. Sorted. No overlap?
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDefinitionSpan> Codex.IBoundSourceInfo.Definitions {
            get {
                return this.Definitions;
            }
        }
        
        /// <summary>
        /// Classifications for the document. Sorted by start index. No overlap.
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ClassificationSpan> Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        /// <summary>
        /// Classifications for the document. Sorted by start index. No overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IClassificationSpan> Codex.IBoundSourceInfo.Classifications {
            get {
                return this.Classifications;
            }
        }
        
        /// <summary>
        /// Outlining regions for the document. May overlap.
        /// </summary>
        public virtual System.Collections.Generic.List<OutliningRegion> OutliningRegions {
            get {
                return this.m_OutliningRegions;
            }
            set {
                this.m_OutliningRegions = value;
            }
        }
        
        /// <summary>
        /// Outlining regions for the document. May overlap.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IOutliningRegion> Codex.IBoundSourceInfo.OutliningRegions {
            get {
                return this.OutliningRegions;
            }
        }
        
        /// <summary>
        /// Indicates that the file should be excluded from text search
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IBoundSourceInfo value) {
            this.m_ReferenceCount = value.ReferenceCount;
            this.m_DefinitionCount = value.DefinitionCount;
            this.m_Language = value.Language;
            this.m_References = new System.Collections.Generic.List<ReferenceSpan>(System.Linq.Enumerable.Select(value.References, v => EntityUtilities.NullOrCopy(v, _v => new ReferenceSpan().Apply(_v))));
            this.m_Definitions = new System.Collections.Generic.List<DefinitionSpan>(System.Linq.Enumerable.Select(value.Definitions, v => EntityUtilities.NullOrCopy(v, _v => new DefinitionSpan().Apply(_v))));
            this.m_Classifications = new System.Collections.Generic.List<ClassificationSpan>(System.Linq.Enumerable.Select(value.Classifications, v => EntityUtilities.NullOrCopy(v, _v => new ClassificationSpan().Apply(_v))));
            this.m_OutliningRegions = new System.Collections.Generic.List<OutliningRegion>(System.Linq.Enumerable.Select(value.OutliningRegions, v => EntityUtilities.NullOrCopy(v, _v => new OutliningRegion().Apply(_v))));
            this.m_ExcludeFromSearch = value.ExcludeFromSearch;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceControlFileInfo))]
    public partial class SourceControlFileInfo : Codex.EntityBase, Codex.ISourceControlFileInfo, Codex.IEntityTarget<Codex.ISourceControlFileInfo> {
        
        private string m_SourceControlContentId;
        
        public SourceControlFileInfo() {
        }
        
        public SourceControlFileInfo(Codex.ISourceControlFileInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Unique id for the source file content as defined by the source control provider (i.e. git SHA)
        /// </summary>
        public virtual string SourceControlContentId {
            get {
                return this.m_SourceControlContentId;
            }
            set {
                this.m_SourceControlContentId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceControlFileInfo value) {
            this.m_SourceControlContentId = value.SourceControlContentId;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFileInfo))]
    public partial class SourceFileInfo : SourceControlFileInfo, Codex.ISourceFileInfo, Codex.IEntityTarget<Codex.ISourceFileInfo>, Codex.IEntityTarget<Codex.IRepoFileScopeEntity>, Codex.IEntityTarget<Codex.IRepoScopeEntity>, Codex.IEntityTarget<Codex.IProjectFileScopeEntity>, Codex.IEntityTarget<Codex.IProjectScopeEntity> {
        
        private int m_Lines;
        
        private int m_Size;
        
        private string m_Language;
        
        private string m_WebAddress;
        
        private EncodingDescription m_Encoding;
        
        private PropertyMap m_Properties;
        
        private string m_RepoRelativePath;
        
        private string m_RepositoryName;
        
        private string m_ProjectRelativePath;
        
        private string m_ProjectId;
        
        public SourceFileInfo() {
        }
        
        public SourceFileInfo(Codex.ISourceFileInfo value) {
            this.CopyFrom(value);
        }
        
        public SourceFileInfo(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public SourceFileInfo(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public SourceFileInfo(Codex.ISourceControlFileInfo value) {
            this.CopyFrom(value);
        }
        
        public SourceFileInfo(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public SourceFileInfo(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The number of lines in the file
        /// </summary>
        public virtual int Lines {
            get {
                return this.m_Lines;
            }
            set {
                this.m_Lines = value;
            }
        }
        
        /// <summary>
        /// The size of the file in bytes
        /// </summary>
        public virtual int Size {
            get {
                return this.m_Size;
            }
            set {
                this.m_Size = value;
            }
        }
        
        /// <summary>
        /// The language of the file
        /// TODO: Remove
        /// </summary>
        public virtual string Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        /// <summary>
        /// The web address of the file. TODO: Remove? Is repo relative path enough?
        /// </summary>
        public virtual string WebAddress {
            get {
                return this.m_WebAddress;
            }
            set {
                this.m_WebAddress = value;
            }
        }
        
        /// <summary>
        /// The encoding used for the file
        /// </summary>
        public virtual EncodingDescription Encoding {
            get {
                return this.m_Encoding;
            }
            set {
                this.m_Encoding = value;
            }
        }
        
        /// <summary>
        /// The encoding used for the file
        /// </summary>
        Codex.IEncodingDescription Codex.ISourceFileInfo.Encoding {
            get {
                return this.Encoding;
            }
        }
        
        /// <summary>
        /// Extensible key value properties for the document.
        /// </summary>
        public virtual PropertyMap Properties {
            get {
                return this.m_Properties;
            }
            set {
                this.m_Properties = value;
            }
        }
        
        /// <summary>
        /// Extensible key value properties for the document.
        /// </summary>
        Codex.IPropertyMap Codex.ISourceFileInfo.Properties {
            get {
                return this.Properties;
            }
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceFileInfo value) {
            this.m_Lines = value.Lines;
            this.m_Size = value.Size;
            this.m_Language = value.Language;
            this.m_WebAddress = value.WebAddress;
            this.m_Encoding = EntityUtilities.NullOrCopy(value.Encoding, v => new EncodingDescription().Apply(v));;
            this.m_Properties = EntityUtilities.NullOrCopy(value.Properties, v => new PropertyMap().Apply(v));;
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.m_RepositoryName = value.RepositoryName;
            this.m_ProjectRelativePath = value.ProjectRelativePath;
            this.m_ProjectId = value.ProjectId;
            base.CopyFrom(((Codex.ISourceControlFileInfo)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoFileScopeEntity value) {
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoScopeEntity value) {
            this.m_RepositoryName = value.RepositoryName;
        }
        
        public virtual void CopyFrom(Codex.IProjectFileScopeEntity value) {
            this.m_ProjectRelativePath = value.ProjectRelativePath;
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoFileScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IProjectScopeEntity value) {
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IEncodingDescription))]
    public partial class EncodingDescription : Codex.EntityBase, Codex.IEncodingDescription, Codex.IEntityTarget<Codex.IEncodingDescription> {
        
        private string m_Name;
        
        private byte[] m_Preamble;
        
        public EncodingDescription() {
        }
        
        public EncodingDescription(Codex.IEncodingDescription value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the encoding
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The encoding preamble
        /// </summary>
        public virtual byte[] Preamble {
            get {
                return this.m_Preamble;
            }
            set {
                this.m_Preamble = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IEncodingDescription value) {
            this.m_Name = value.Name;
            this.m_Preamble = value.Preamble;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFileBase))]
    public partial class SourceFileBase : Codex.EntityBase, Codex.ISourceFileBase, Codex.IEntityTarget<Codex.ISourceFileBase> {
        
        private SourceFileInfo m_Info;
        
        private bool m_ExcludeFromSearch;
        
        public SourceFileBase() {
        }
        
        public SourceFileBase(Codex.ISourceFileBase value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The information about the source file
        /// </summary>
        public virtual SourceFileInfo Info {
            get {
                return this.m_Info;
            }
            set {
                this.m_Info = value;
            }
        }
        
        /// <summary>
        /// The information about the source file
        /// </summary>
        Codex.ISourceFileInfo Codex.ISourceFileBase.Info {
            get {
                return this.Info;
            }
        }
        
        /// <summary>
        /// Indicates that the file should be excluded from text search
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceFileBase value) {
            this.m_Info = EntityUtilities.NullOrCopy(value.Info, v => new SourceFileInfo().Apply(v));;
            this.m_ExcludeFromSearch = value.ExcludeFromSearch;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFile))]
    public partial class SourceFile : SourceFileBase, Codex.ISourceFile, Codex.IEntityTarget<Codex.ISourceFile> {
        
        private string m_Content;
        
        public SourceFile() {
        }
        
        public SourceFile(Codex.ISourceFile value) {
            this.CopyFrom(value);
        }
        
        public SourceFile(Codex.ISourceFileBase value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The content of the file
        /// </summary>
        public virtual string Content {
            get {
                return this.m_Content;
            }
            set {
                this.m_Content = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceFile value) {
            this.m_Content = value.Content;
            base.CopyFrom(((Codex.ISourceFileBase)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IChunkedSourceFile))]
    public partial class ChunkedSourceFile : SourceFileBase, Codex.IChunkedSourceFile, Codex.IEntityTarget<Codex.IChunkedSourceFile> {
        
        private System.Collections.Generic.List<ChunkReference> m_Chunks = new System.Collections.Generic.List<ChunkReference>();
        
        public ChunkedSourceFile() {
        }
        
        public ChunkedSourceFile(Codex.IChunkedSourceFile value) {
            this.CopyFrom(value);
        }
        
        public ChunkedSourceFile(Codex.ISourceFileBase value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The content of the file
        /// </summary>
        public virtual System.Collections.Generic.List<ChunkReference> Chunks {
            get {
                return this.m_Chunks;
            }
            set {
                this.m_Chunks = value;
            }
        }
        
        /// <summary>
        /// The content of the file
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IChunkReference> Codex.IChunkedSourceFile.Chunks {
            get {
                return this.Chunks;
            }
        }
        
        public virtual void CopyFrom(Codex.IChunkedSourceFile value) {
            this.m_Chunks = new System.Collections.Generic.List<ChunkReference>(System.Linq.Enumerable.Select(value.Chunks, v => EntityUtilities.NullOrCopy(v, _v => new ChunkReference().Apply(_v))));
            base.CopyFrom(((Codex.ISourceFileBase)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IChunkReference))]
    public partial class ChunkReference : Codex.EntityBase, Codex.IChunkReference, Codex.IEntityTarget<Codex.IChunkReference> {
        
        private string m_Id;
        
        private int m_StartLineNumber;
        
        public ChunkReference() {
        }
        
        public ChunkReference(Codex.IChunkReference value) {
            this.CopyFrom(value);
        }
        
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual int StartLineNumber {
            get {
                return this.m_StartLineNumber;
            }
            set {
                this.m_StartLineNumber = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IChunkReference value) {
            this.m_Id = value.Id;
            this.m_StartLineNumber = value.StartLineNumber;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceFileContentChunk))]
    public partial class SourceFileContentChunk : Codex.EntityBase, Codex.ISourceFileContentChunk, Codex.IEntityTarget<Codex.ISourceFileContentChunk> {
        
        private System.Collections.Generic.List<string> m_ContentLines = new System.Collections.Generic.List<string>();
        
        public SourceFileContentChunk() {
        }
        
        public SourceFileContentChunk(Codex.ISourceFileContentChunk value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Lines defined as part of the chunk
        /// </summary>
        public virtual System.Collections.Generic.List<string> ContentLines {
            get {
                return this.m_ContentLines;
            }
            set {
                this.m_ContentLines = value;
            }
        }
        
        /// <summary>
        /// Lines defined as part of the chunk
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.ISourceFileContentChunk.ContentLines {
            get {
                return this.ContentLines;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceFileContentChunk value) {
            this.m_ContentLines = new System.Collections.Generic.List<string>(value.ContentLines);
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IOutliningRegion))]
    public partial class OutliningRegion : Codex.EntityBase, Codex.IOutliningRegion, Codex.IEntityTarget<Codex.IOutliningRegion> {
        
        private string m_Kind;
        
        private LineSpan m_Header;
        
        private LineSpan m_Content;
        
        public OutliningRegion() {
        }
        
        public OutliningRegion(Codex.IOutliningRegion value) {
            this.CopyFrom(value);
        }
        
        public virtual string Kind {
            get {
                return this.m_Kind;
            }
            set {
                this.m_Kind = value;
            }
        }
        
        /// <summary>
        /// Defines the region containing the header text of the outlining region
        /// </summary>
        public virtual LineSpan Header {
            get {
                return this.m_Header;
            }
            set {
                this.m_Header = value;
            }
        }
        
        /// <summary>
        /// Defines the region containing the header text of the outlining region
        /// </summary>
        Codex.ILineSpan Codex.IOutliningRegion.Header {
            get {
                return this.Header;
            }
        }
        
        /// <summary>
        /// Defines the region containing the collapsible content region of the outlining region
        /// </summary>
        public virtual LineSpan Content {
            get {
                return this.m_Content;
            }
            set {
                this.m_Content = value;
            }
        }
        
        /// <summary>
        /// Defines the region containing the collapsible content region of the outlining region
        /// </summary>
        Codex.ILineSpan Codex.IOutliningRegion.Content {
            get {
                return this.Content;
            }
        }
        
        public virtual void CopyFrom(Codex.IOutliningRegion value) {
            this.m_Kind = value.Kind;
            this.m_Header = EntityUtilities.NullOrCopy(value.Header, v => new LineSpan().Apply(v));;
            this.m_Content = EntityUtilities.NullOrCopy(value.Content, v => new LineSpan().Apply(v));;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSpan))]
    public partial class DefinitionSpan : Span, Codex.IDefinitionSpan, Codex.IEntityTarget<Codex.IDefinitionSpan> {
        
        private DefinitionSymbol m_Definition;
        
        private System.Collections.Generic.IReadOnlyList<ParameterDefinitionSpan> m_Parameters = Codex.Utilities.CollectionUtilities.Empty<ParameterDefinitionSpan>.Array;
        
        public DefinitionSpan() {
        }
        
        public DefinitionSpan(Codex.IDefinitionSpan value) {
            this.CopyFrom(value);
        }
        
        public DefinitionSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The definition symbol referred to by the span
        /// </summary>
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        /// <summary>
        /// The definition symbol referred to by the span
        /// </summary>
        Codex.IDefinitionSymbol Codex.IDefinitionSpan.Definition {
            get {
                return this.Definition;
            }
        }
        
        /// <summary>
        /// Gets the definitions for parameters
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ParameterDefinitionSpan> Parameters {
            get {
                return this.m_Parameters;
            }
            set {
                this.m_Parameters = value;
            }
        }
        
        /// <summary>
        /// Gets the definitions for parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterDefinitionSpan> Codex.IDefinitionSpan.Parameters {
            get {
                return this.Parameters;
            }
        }
        
        public virtual void CopyFrom(Codex.IDefinitionSpan value) {
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().Apply(v));;
            this.m_Parameters = new System.Collections.Generic.List<ParameterDefinitionSpan>(System.Linq.Enumerable.Select(value.Parameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterDefinitionSpan().Apply(_v))));
            base.CopyFrom(((Codex.ISpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterDefinitionSpan))]
    public partial class ParameterDefinitionSpan : LineSpan, Codex.IParameterDefinitionSpan, Codex.IEntityTarget<Codex.IParameterDefinitionSpan> {
        
        private int m_ParameterIndex;
        
        private string m_Name;
        
        public ParameterDefinitionSpan() {
        }
        
        public ParameterDefinitionSpan(Codex.IParameterDefinitionSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterDefinitionSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterDefinitionSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The index of the parameter in the list of parameters for the method
        /// </summary>
        public virtual int ParameterIndex {
            get {
                return this.m_ParameterIndex;
            }
            set {
                this.m_ParameterIndex = value;
            }
        }
        
        /// <summary>
        /// The name of the parameter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IParameterDefinitionSpan value) {
            this.m_ParameterIndex = value.ParameterIndex;
            this.m_Name = value.Name;
            base.CopyFrom(((Codex.ILineSpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSpan))]
    public partial class ReferenceSpan : SymbolSpan, Codex.IReferenceSpan, Codex.IEntityTarget<Codex.IReferenceSpan> {
        
        private Codex.ObjectModel.SymbolId m_RelatedDefinition;
        
        private ReferenceSymbol m_Reference;
        
        private System.Collections.Generic.IReadOnlyList<ParameterReferenceSpan> m_Parameters = Codex.Utilities.CollectionUtilities.Empty<ParameterReferenceSpan>.Array;
        
        public ReferenceSpan() {
        }
        
        public ReferenceSpan(Codex.IReferenceSpan value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSpan(Codex.ISymbolSpan value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSpan(Codex.ITextLineSpan value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Gets the symbol id of the definition which provides this reference
        /// (i.e. method definition for interface implementation)
        /// </summary>
        public virtual Codex.ObjectModel.SymbolId RelatedDefinition {
            get {
                return this.m_RelatedDefinition;
            }
            set {
                this.m_RelatedDefinition = value;
            }
        }
        
        /// <summary>
        /// The reference symbol referred to by the span
        /// </summary>
        public virtual ReferenceSymbol Reference {
            get {
                return this.m_Reference;
            }
            set {
                this.m_Reference = value;
            }
        }
        
        /// <summary>
        /// The reference symbol referred to by the span
        /// </summary>
        Codex.IReferenceSymbol Codex.IReferenceSpan.Reference {
            get {
                return this.Reference;
            }
        }
        
        /// <summary>
        /// Gets the references to parameters
        /// </summary>
        public virtual System.Collections.Generic.IReadOnlyList<ParameterReferenceSpan> Parameters {
            get {
                return this.m_Parameters;
            }
            set {
                this.m_Parameters = value;
            }
        }
        
        /// <summary>
        /// Gets the references to parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterReferenceSpan> Codex.IReferenceSpan.Parameters {
            get {
                return this.Parameters;
            }
        }
        
        public virtual void CopyFrom(Codex.IReferenceSpan value) {
            this.m_RelatedDefinition = value.RelatedDefinition;
            this.m_Reference = EntityUtilities.NullOrCopy(value.Reference, v => new ReferenceSymbol().Apply(v));;
            this.m_Parameters = new System.Collections.Generic.List<ParameterReferenceSpan>(System.Linq.Enumerable.Select(value.Parameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterReferenceSpan().Apply(_v))));
            base.CopyFrom(((Codex.ISymbolSpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterReferenceSpan))]
    public partial class ParameterReferenceSpan : SymbolSpan, Codex.IParameterReferenceSpan, Codex.IEntityTarget<Codex.IParameterReferenceSpan> {
        
        private int m_ParameterIndex;
        
        public ParameterReferenceSpan() {
        }
        
        public ParameterReferenceSpan(Codex.IParameterReferenceSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterReferenceSpan(Codex.ISymbolSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterReferenceSpan(Codex.ITextLineSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterReferenceSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public ParameterReferenceSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The index of the parameter in the list of parameters for the method
        /// </summary>
        public virtual int ParameterIndex {
            get {
                return this.m_ParameterIndex;
            }
            set {
                this.m_ParameterIndex = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IParameterReferenceSpan value) {
            this.m_ParameterIndex = value.ParameterIndex;
            base.CopyFrom(((Codex.ISymbolSpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IClassificationSpan))]
    public partial class ClassificationSpan : Span, Codex.IClassificationSpan, Codex.IEntityTarget<Codex.IClassificationSpan> {
        
        private int m_DefaultClassificationColor;
        
        private string m_Classification;
        
        private int m_LocalGroupId;
        
        public ClassificationSpan() {
        }
        
        public ClassificationSpan(Codex.IClassificationSpan value) {
            this.CopyFrom(value);
        }
        
        public ClassificationSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The default classification color for the span. This is used for
        /// contexts where a mapping from classification id to color is not
        /// available.
        /// </summary>
        public virtual int DefaultClassificationColor {
            get {
                return this.m_DefaultClassificationColor;
            }
            set {
                this.m_DefaultClassificationColor = value;
            }
        }
        
        /// <summary>
        /// The classification identifier for the span
        /// </summary>
        public virtual string Classification {
            get {
                return this.m_Classification;
            }
            set {
                this.m_Classification = value;
            }
        }
        
        /// <summary>
        /// The identifier to the local group of spans which refer to the same common symbol
        /// </summary>
        public virtual int LocalGroupId {
            get {
                return this.m_LocalGroupId;
            }
            set {
                this.m_LocalGroupId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IClassificationSpan value) {
            this.m_DefaultClassificationColor = value.DefaultClassificationColor;
            this.m_Classification = value.Classification;
            this.m_LocalGroupId = value.LocalGroupId;
            base.CopyFrom(((Codex.ISpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISymbolSpan))]
    public partial class SymbolSpan : TextLineSpan, Codex.ISymbolSpan, Codex.IEntityTarget<Codex.ISymbolSpan> {
        
        public SymbolSpan() {
        }
        
        public SymbolSpan(Codex.ISymbolSpan value) {
            this.CopyFrom(value);
        }
        
        public SymbolSpan(Codex.ITextLineSpan value) {
            this.CopyFrom(value);
        }
        
        public SymbolSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public SymbolSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        public virtual void CopyFrom(Codex.ISymbolSpan value) {
            base.CopyFrom(((Codex.ITextLineSpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITextLineSpan))]
    public partial class TextLineSpan : LineSpan, Codex.ITextLineSpan, Codex.IEntityTarget<Codex.ITextLineSpan> {
        
        private string m_LineSpanText;
        
        public TextLineSpan() {
        }
        
        public TextLineSpan(Codex.ITextLineSpan value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The line text
        /// TODO: It would be nice to not store this here and instead apply it as a join
        /// </summary>
        public virtual string LineSpanText {
            get {
                return this.m_LineSpanText;
            }
            set {
                this.m_LineSpanText = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ITextLineSpan value) {
            this.m_LineSpanText = value.LineSpanText;
            base.CopyFrom(((Codex.ILineSpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILineSpan))]
    public partial class LineSpan : Span, Codex.ILineSpan, Codex.IEntityTarget<Codex.ILineSpan> {
        
        private System.Nullable<int> m_LineIndex;
        
        private System.Nullable<int> m_LineNumber;
        
        private int m_LineSpanStart;
        
        private int m_LineOffset;
        
        public LineSpan() {
        }
        
        public LineSpan(Codex.ILineSpan value) {
            this.CopyFrom(value);
        }
        
        public LineSpan(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The 0-based index of the line containing the span
        /// </summary>
        public virtual int LineIndex {
            get {
                return this.CoerceLineIndex(this.m_LineIndex);
            }
            set {
                this.m_LineIndex = value;
            }
        }
        
        /// <summary>
        /// The 1-based line number of the line containing the span
        /// </summary>
        public virtual int LineNumber {
            get {
                return this.CoerceLineNumber(this.m_LineNumber);
            }
            set {
                this.m_LineNumber = value;
            }
        }
        
        /// <summary>
        /// The character position where the span starts in the line text
        /// </summary>
        public virtual int LineSpanStart {
            get {
                return this.m_LineSpanStart;
            }
            set {
                this.m_LineSpanStart = value;
            }
        }
        
        /// <summary>
        /// If positive, the offset of the line span from the beginning of the line
        /// If negative, the offset of the linespan from the end of the next line
        /// </summary>
        public virtual int LineOffset {
            get {
                return this.m_LineOffset;
            }
            set {
                this.m_LineOffset = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ILineSpan value) {
            this.m_LineIndex = value.LineIndex;
            this.m_LineNumber = value.LineNumber;
            this.m_LineSpanStart = value.LineSpanStart;
            this.m_LineOffset = value.LineOffset;
            base.CopyFrom(((Codex.ISpan)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISpan))]
    public partial class Span : Codex.EntityBase, Codex.ISpan, Codex.IEntityTarget<Codex.ISpan> {
        
        private int m_Start;
        
        private int m_Length;
        
        public Span() {
        }
        
        public Span(Codex.ISpan value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The absolute character offset of the span within the document
        /// </summary>
        public virtual int Start {
            get {
                return this.m_Start;
            }
            set {
                this.m_Start = value;
            }
        }
        
        /// <summary>
        /// The length of the span
        /// </summary>
        public virtual int Length {
            get {
                return this.m_Length;
            }
            set {
                this.m_Length = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISpan value) {
            this.m_Start = value.Start;
            this.m_Length = value.Length;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReview))]
    public partial class CodeReview : Codex.EntityBase, Codex.ICodeReview, Codex.IEntityTarget<Codex.ICodeReview> {
        
        private string m_Id;
        
        private string m_Description;
        
        private string m_Url;
        
        private Codex.CodeReviewStatus m_Status;
        
        public CodeReview() {
        }
        
        public CodeReview(Codex.ICodeReview value) {
            this.CopyFrom(value);
        }
        
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        /// <summary>
        /// Url for accessing code review in source control management (i.e. GitHub or VSO)
        /// </summary>
        public virtual string Url {
            get {
                return this.m_Url;
            }
            set {
                this.m_Url = value;
            }
        }
        
        public virtual Codex.CodeReviewStatus Status {
            get {
                return this.m_Status;
            }
            set {
                this.m_Status = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReview value) {
            this.m_Id = value.Id;
            this.m_Description = value.Description;
            this.m_Url = value.Url;
            this.m_Status = value.Status;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewIteration))]
    public partial class CodeReviewIteration : Codex.EntityBase, Codex.ICodeReviewIteration, Codex.IEntityTarget<Codex.ICodeReviewIteration> {
        
        private int m_IterationNumber;
        
        private string m_ReviewId;
        
        private string m_Description;
        
        private System.Collections.Generic.List<CodeReviewFile> m_Files = new System.Collections.Generic.List<CodeReviewFile>();
        
        public CodeReviewIteration() {
        }
        
        public CodeReviewIteration(Codex.ICodeReviewIteration value) {
            this.CopyFrom(value);
        }
        
        public virtual int IterationNumber {
            get {
                return this.m_IterationNumber;
            }
            set {
                this.m_IterationNumber = value;
            }
        }
        
        public virtual string ReviewId {
            get {
                return this.m_ReviewId;
            }
            set {
                this.m_ReviewId = value;
            }
        }
        
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        public virtual System.Collections.Generic.List<CodeReviewFile> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICodeReviewFile> Codex.ICodeReviewIteration.Files {
            get {
                return this.Files;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReviewIteration value) {
            this.m_IterationNumber = value.IterationNumber;
            this.m_ReviewId = value.ReviewId;
            this.m_Description = value.Description;
            this.m_Files = new System.Collections.Generic.List<CodeReviewFile>(System.Linq.Enumerable.Select(value.Files, v => EntityUtilities.NullOrCopy(v, _v => new CodeReviewFile().Apply(_v))));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewerInfo))]
    public partial class CodeReviewerInfo : Codex.EntityBase, Codex.ICodeReviewerInfo, Codex.IEntityTarget<Codex.ICodeReviewerInfo> {
        
        private string m_Name;
        
        public CodeReviewerInfo() {
        }
        
        public CodeReviewerInfo(Codex.ICodeReviewerInfo value) {
            this.CopyFrom(value);
        }
        
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReviewerInfo value) {
            this.m_Name = value.Name;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewFile))]
    public partial class CodeReviewFile : Codex.EntityBase, Codex.ICodeReviewFile, Codex.IEntityTarget<Codex.ICodeReviewFile> {
        
        private int m_StartIteration;
        
        private string m_RepoRelativePath;
        
        private string m_FileId;
        
        private string m_BaselineFileId;
        
        private Codex.FileChangeKind m_ChangeKind;
        
        public CodeReviewFile() {
        }
        
        public CodeReviewFile(Codex.ICodeReviewFile value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The first iteration in which this file appears
        /// </summary>
        public virtual int StartIteration {
            get {
                return this.m_StartIteration;
            }
            set {
                this.m_StartIteration = value;
            }
        }
        
        /// <summary>
        /// The relative path in the repository
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The file id of the new version of the file
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        /// <summary>
        /// The file id of the baseline version of the file
        /// </summary>
        public virtual string BaselineFileId {
            get {
                return this.m_BaselineFileId;
            }
            set {
                this.m_BaselineFileId = value;
            }
        }
        
        /// <summary>
        /// The type of change applied to the file
        /// </summary>
        public virtual Codex.FileChangeKind ChangeKind {
            get {
                return this.m_ChangeKind;
            }
            set {
                this.m_ChangeKind = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReviewFile value) {
            this.m_StartIteration = value.StartIteration;
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.m_FileId = value.FileId;
            this.m_BaselineFileId = value.BaselineFileId;
            this.m_ChangeKind = value.ChangeKind;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewCommentThread))]
    public partial class CodeReviewCommentThread : Codex.EntityBase, Codex.ICodeReviewCommentThread, Codex.IEntityTarget<Codex.ICodeReviewCommentThread> {
        
        private LineSpan m_OriginalSpan;
        
        private int m_StartIteration;
        
        private System.DateTime m_LastUpdated;
        
        private string m_FileRepoRelativePath;
        
        private System.Collections.Generic.List<CodeReviewComment> m_Comments = new System.Collections.Generic.List<CodeReviewComment>();
        
        public CodeReviewCommentThread() {
        }
        
        public CodeReviewCommentThread(Codex.ICodeReviewCommentThread value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The original location for the comment in the originating iteration
        /// </summary>
        public virtual LineSpan OriginalSpan {
            get {
                return this.m_OriginalSpan;
            }
            set {
                this.m_OriginalSpan = value;
            }
        }
        
        /// <summary>
        /// The original location for the comment in the originating iteration
        /// </summary>
        Codex.ILineSpan Codex.ICodeReviewCommentThread.OriginalSpan {
            get {
                return this.OriginalSpan;
            }
        }
        
        /// <summary>
        /// The iteration where the comment originated
        /// </summary>
        public virtual int StartIteration {
            get {
                return this.m_StartIteration;
            }
            set {
                this.m_StartIteration = value;
            }
        }
        
        /// <summary>
        /// The last tie
        /// </summary>
        public virtual System.DateTime LastUpdated {
            get {
                return this.m_LastUpdated;
            }
            set {
                this.m_LastUpdated = value;
            }
        }
        
        public virtual string FileRepoRelativePath {
            get {
                return this.m_FileRepoRelativePath;
            }
            set {
                this.m_FileRepoRelativePath = value;
            }
        }
        
        public virtual System.Collections.Generic.List<CodeReviewComment> Comments {
            get {
                return this.m_Comments;
            }
            set {
                this.m_Comments = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICodeReviewComment> Codex.ICodeReviewCommentThread.Comments {
            get {
                return this.Comments;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReviewCommentThread value) {
            this.m_OriginalSpan = EntityUtilities.NullOrCopy(value.OriginalSpan, v => new LineSpan().Apply(v));;
            this.m_StartIteration = value.StartIteration;
            this.m_LastUpdated = value.LastUpdated;
            this.m_FileRepoRelativePath = value.FileRepoRelativePath;
            this.m_Comments = new System.Collections.Generic.List<CodeReviewComment>(System.Linq.Enumerable.Select(value.Comments, v => EntityUtilities.NullOrCopy(v, _v => new CodeReviewComment().Apply(_v))));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeReviewComment))]
    public partial class CodeReviewComment : Codex.EntityBase, Codex.ICodeReviewComment, Codex.IEntityTarget<Codex.ICodeReviewComment> {
        
        private string m_Text;
        
        private string m_Reviewer;
        
        private Codex.CommentImportance m_Importance;
        
        private System.DateTime m_CommentTime;
        
        public CodeReviewComment() {
        }
        
        public CodeReviewComment(Codex.ICodeReviewComment value) {
            this.CopyFrom(value);
        }
        
        public virtual string Text {
            get {
                return this.m_Text;
            }
            set {
                this.m_Text = value;
            }
        }
        
        /// <summary>
        /// The name of the reviewer which made the comment
        /// </summary>
        public virtual string Reviewer {
            get {
                return this.m_Reviewer;
            }
            set {
                this.m_Reviewer = value;
            }
        }
        
        /// <summary>
        /// The importance of the comment
        /// </summary>
        public virtual Codex.CommentImportance Importance {
            get {
                return this.m_Importance;
            }
            set {
                this.m_Importance = value;
            }
        }
        
        /// <summary>
        /// The time when the comment was submitted
        /// </summary>
        public virtual System.DateTime CommentTime {
            get {
                return this.m_CommentTime;
            }
            set {
                this.m_CommentTime = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeReviewComment value) {
            this.m_Text = value.Text;
            this.m_Reviewer = value.Reviewer;
            this.m_Importance = value.Importance;
            this.m_CommentTime = value.CommentTime;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDocumentationInfo))]
    public partial class DocumentationInfo : Codex.EntityBase, Codex.IDocumentationInfo, Codex.IEntityTarget<Codex.IDocumentationInfo> {
        
        private string m_DeclarationName;
        
        private string m_Comment;
        
        private Symbol m_AssociatedSymbol;
        
        private System.Collections.Generic.List<DocumentationReferenceSymbol> m_References = new System.Collections.Generic.List<DocumentationReferenceSymbol>();
        
        private string m_Summary;
        
        private string m_Remarks;
        
        private System.Collections.Generic.List<TypedParameterDocumentation> m_Arguments = new System.Collections.Generic.List<TypedParameterDocumentation>();
        
        private System.Collections.Generic.List<ParameterDocumentation> m_TypeParameters = new System.Collections.Generic.List<ParameterDocumentation>();
        
        private System.Collections.Generic.List<TypedParameterDocumentation> m_Exceptions = new System.Collections.Generic.List<TypedParameterDocumentation>();
        
        public DocumentationInfo() {
        }
        
        public DocumentationInfo(Codex.IDocumentationInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The declaration name for the symbol
        /// </summary>
        public virtual string DeclarationName {
            get {
                return this.m_DeclarationName;
            }
            set {
                this.m_DeclarationName = value;
            }
        }
        
        /// <summary>
        /// The comment applied to the definition (this is the raw doc comment text)
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        /// <summary>
        /// Identity of symbol which generated this documentation
        /// </summary>
        public virtual Symbol AssociatedSymbol {
            get {
                return this.m_AssociatedSymbol;
            }
            set {
                this.m_AssociatedSymbol = value;
            }
        }
        
        /// <summary>
        /// Identity of symbol which generated this documentation
        /// </summary>
        Codex.ICodeSymbol Codex.IDocumentationInfo.AssociatedSymbol {
            get {
                return this.AssociatedSymbol;
            }
        }
        
        /// <summary>
        /// The other symbols referenced by this symbol (i.e. base type, implemented interface
        /// or interface members, overridden members, return type of method or property type)
        /// </summary>
        public virtual System.Collections.Generic.List<DocumentationReferenceSymbol> References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// The other symbols referenced by this symbol (i.e. base type, implemented interface
        /// or interface members, overridden members, return type of method or property type)
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDocumentationReferenceSymbol> Codex.IDocumentationInfo.References {
            get {
                return this.References;
            }
        }
        
        /// <summary>
        /// Describes the symbol
        /// </summary>
        public virtual string Summary {
            get {
                return this.m_Summary;
            }
            set {
                this.m_Summary = value;
            }
        }
        
        /// <summary>
        /// Supplementation information about the symbol
        /// </summary>
        public virtual string Remarks {
            get {
                return this.m_Remarks;
            }
            set {
                this.m_Remarks = value;
            }
        }
        
        /// <summary>
        /// Comments on arguments
        /// </summary>
        public virtual System.Collections.Generic.List<TypedParameterDocumentation> Arguments {
            get {
                return this.m_Arguments;
            }
            set {
                this.m_Arguments = value;
            }
        }
        
        /// <summary>
        /// Comments on arguments
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ITypedParameterDocumentation> Codex.IDocumentationInfo.Arguments {
            get {
                return this.Arguments;
            }
        }
        
        /// <summary>
        /// Comments on type parameters
        /// </summary>
        public virtual System.Collections.Generic.List<ParameterDocumentation> TypeParameters {
            get {
                return this.m_TypeParameters;
            }
            set {
                this.m_TypeParameters = value;
            }
        }
        
        /// <summary>
        /// Comments on type parameters
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IParameterDocumentation> Codex.IDocumentationInfo.TypeParameters {
            get {
                return this.TypeParameters;
            }
        }
        
        /// <summary>
        /// Information about exceptions which can be thrown
        /// </summary>
        public virtual System.Collections.Generic.List<TypedParameterDocumentation> Exceptions {
            get {
                return this.m_Exceptions;
            }
            set {
                this.m_Exceptions = value;
            }
        }
        
        /// <summary>
        /// Information about exceptions which can be thrown
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ITypedParameterDocumentation> Codex.IDocumentationInfo.Exceptions {
            get {
                return this.Exceptions;
            }
        }
        
        public virtual void CopyFrom(Codex.IDocumentationInfo value) {
            this.m_DeclarationName = value.DeclarationName;
            this.m_Comment = value.Comment;
            this.m_AssociatedSymbol = EntityUtilities.NullOrCopy(value.AssociatedSymbol, v => new Symbol().Apply(v));;
            this.m_References = new System.Collections.Generic.List<DocumentationReferenceSymbol>(System.Linq.Enumerable.Select(value.References, v => EntityUtilities.NullOrCopy(v, _v => new DocumentationReferenceSymbol().Apply(_v))));
            this.m_Summary = value.Summary;
            this.m_Remarks = value.Remarks;
            this.m_Arguments = new System.Collections.Generic.List<TypedParameterDocumentation>(System.Linq.Enumerable.Select(value.Arguments, v => EntityUtilities.NullOrCopy(v, _v => new TypedParameterDocumentation().Apply(_v))));
            this.m_TypeParameters = new System.Collections.Generic.List<ParameterDocumentation>(System.Linq.Enumerable.Select(value.TypeParameters, v => EntityUtilities.NullOrCopy(v, _v => new ParameterDocumentation().Apply(_v))));
            this.m_Exceptions = new System.Collections.Generic.List<TypedParameterDocumentation>(System.Linq.Enumerable.Select(value.Exceptions, v => EntityUtilities.NullOrCopy(v, _v => new TypedParameterDocumentation().Apply(_v))));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IParameterDocumentation))]
    public partial class ParameterDocumentation : Codex.EntityBase, Codex.IParameterDocumentation, Codex.IEntityTarget<Codex.IParameterDocumentation> {
        
        private string m_Name;
        
        private string m_Comment;
        
        public ParameterDocumentation() {
        }
        
        public ParameterDocumentation(Codex.IParameterDocumentation value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the parameter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The comment associated with the symbol
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IParameterDocumentation value) {
            this.m_Name = value.Name;
            this.m_Comment = value.Comment;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITypedParameterDocumentation))]
    public partial class TypedParameterDocumentation : ParameterDocumentation, Codex.ITypedParameterDocumentation, Codex.IEntityTarget<Codex.ITypedParameterDocumentation> {
        
        private DocumentationReferenceSymbol m_Type;
        
        public TypedParameterDocumentation() {
        }
        
        public TypedParameterDocumentation(Codex.ITypedParameterDocumentation value) {
            this.CopyFrom(value);
        }
        
        public TypedParameterDocumentation(Codex.IParameterDocumentation value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The type of the parameter
        /// </summary>
        public virtual DocumentationReferenceSymbol Type {
            get {
                return this.m_Type;
            }
            set {
                this.m_Type = value;
            }
        }
        
        /// <summary>
        /// The type of the parameter
        /// </summary>
        Codex.IDocumentationReferenceSymbol Codex.ITypedParameterDocumentation.Type {
            get {
                return this.Type;
            }
        }
        
        public virtual void CopyFrom(Codex.ITypedParameterDocumentation value) {
            this.m_Type = EntityUtilities.NullOrCopy(value.Type, v => new DocumentationReferenceSymbol().Apply(v));;
            base.CopyFrom(((Codex.IParameterDocumentation)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDocumentationReferenceSymbol))]
    public partial class DocumentationReferenceSymbol : ReferenceSymbol, Codex.IDocumentationReferenceSymbol, Codex.IEntityTarget<Codex.IDocumentationReferenceSymbol> {
        
        private string m_DisplayName;
        
        private string m_Comment;
        
        public DocumentationReferenceSymbol() {
        }
        
        public DocumentationReferenceSymbol(Codex.IDocumentationReferenceSymbol value) {
            this.CopyFrom(value);
        }
        
        public DocumentationReferenceSymbol(Codex.IReferenceSymbol value) {
            this.CopyFrom(value);
        }
        
        public DocumentationReferenceSymbol(Codex.ICodeSymbol value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The display name of the symbol reference as it should appear in documentation
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The comment associated with the reference
        /// (i.e. return type description https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/returns)
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IDocumentationReferenceSymbol value) {
            this.m_DisplayName = value.DisplayName;
            this.m_Comment = value.Comment;
            base.CopyFrom(((Codex.IReferenceSymbol)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILanguageInfo))]
    public partial class LanguageInfo : Codex.EntityBase, Codex.ILanguageInfo, Codex.IEntityTarget<Codex.ILanguageInfo> {
        
        private string m_Name;
        
        private System.Collections.Generic.List<ClassificationStyle> m_Classifications = new System.Collections.Generic.List<ClassificationStyle>();
        
        public LanguageInfo() {
        }
        
        public LanguageInfo(Codex.ILanguageInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the language
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Describes the style for classified spans. See <see cref="P:Codex.IBoundSourceInfo.Classifications" />.
        /// </summary>
        public virtual System.Collections.Generic.List<ClassificationStyle> Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        /// <summary>
        /// Describes the style for classified spans. See <see cref="P:Codex.IBoundSourceInfo.Classifications" />.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IClassificationStyle> Codex.ILanguageInfo.Classifications {
            get {
                return this.Classifications;
            }
        }
        
        public virtual void CopyFrom(Codex.ILanguageInfo value) {
            this.m_Name = value.Name;
            this.m_Classifications = new System.Collections.Generic.List<ClassificationStyle>(System.Linq.Enumerable.Select(value.Classifications, v => EntityUtilities.NullOrCopy(v, _v => new ClassificationStyle().Apply(_v))));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IClassificationStyle))]
    public partial class ClassificationStyle : Codex.EntityBase, Codex.IClassificationStyle, Codex.IEntityTarget<Codex.IClassificationStyle> {
        
        private int m_Color;
        
        private bool m_Italic;
        
        private string m_Name;
        
        public ClassificationStyle() {
        }
        
        public ClassificationStyle(Codex.IClassificationStyle value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The default classification color for the classification. This is used for
        /// contexts where a mapping from classification id to color is not
        /// available.
        /// </summary>
        public virtual int Color {
            get {
                return this.m_Color;
            }
            set {
                this.m_Color = value;
            }
        }
        
        /// <summary>
        /// Indicates whether the spans classified with this classification should have italic font by default
        /// </summary>
        public virtual bool Italic {
            get {
                return this.m_Italic;
            }
            set {
                this.m_Italic = value;
            }
        }
        
        /// <summary>
        /// The name of the classification
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IClassificationStyle value) {
            this.m_Color = value.Color;
            this.m_Italic = value.Italic;
            this.m_Name = value.Name;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProject))]
    public partial class AnalyzedProject : ProjectScopeEntity, Codex.IProject, Codex.IEntityTarget<Codex.IProject> {
        
        private string m_ProjectKind;
        
        private ProjectFileLink m_PrimaryFile;
        
        private System.Collections.Generic.List<ProjectFileLink> m_Files = new System.Collections.Generic.List<ProjectFileLink>();
        
        private System.Collections.Generic.List<ReferencedProject> m_ProjectReferences = new System.Collections.Generic.List<ReferencedProject>();
        
        public AnalyzedProject() {
        }
        
        public AnalyzedProject(Codex.IProject value) {
            this.CopyFrom(value);
        }
        
        public AnalyzedProject(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public AnalyzedProject(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The project kind (see <see cref="T:Codex.ObjectModel.ProjectKind" />)
        /// </summary>
        public virtual string ProjectKind {
            get {
                return this.m_ProjectKind;
            }
            set {
                this.m_ProjectKind = value;
            }
        }
        
        /// <summary>
        /// The primary file of the project (i.e. the .csproj file)
        /// </summary>
        public virtual ProjectFileLink PrimaryFile {
            get {
                return this.m_PrimaryFile;
            }
            set {
                this.m_PrimaryFile = value;
            }
        }
        
        /// <summary>
        /// The primary file of the project (i.e. the .csproj file)
        /// </summary>
        Codex.IProjectFileLink Codex.IProject.PrimaryFile {
            get {
                return this.PrimaryFile;
            }
        }
        
        /// <summary>
        /// References to files in the project
        /// </summary>
        public virtual System.Collections.Generic.List<ProjectFileLink> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        /// <summary>
        /// References to files in the project
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IProjectFileLink> Codex.IProject.Files {
            get {
                return this.Files;
            }
        }
        
        /// <summary>
        /// Descriptions of referenced projects and used definitions from the projects
        /// </summary>
        public virtual System.Collections.Generic.List<ReferencedProject> ProjectReferences {
            get {
                return this.m_ProjectReferences;
            }
            set {
                this.m_ProjectReferences = value;
            }
        }
        
        /// <summary>
        /// Descriptions of referenced projects and used definitions from the projects
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IReferencedProject> Codex.IProject.ProjectReferences {
            get {
                return this.ProjectReferences;
            }
        }
        
        public virtual void CopyFrom(Codex.IProject value) {
            this.m_ProjectKind = value.ProjectKind;
            this.m_PrimaryFile = EntityUtilities.NullOrCopy(value.PrimaryFile, v => new ProjectFileLink().Apply(v));;
            this.m_Files = new System.Collections.Generic.List<ProjectFileLink>(System.Linq.Enumerable.Select(value.Files, v => EntityUtilities.NullOrCopy(v, _v => new ProjectFileLink().Apply(_v))));
            this.m_ProjectReferences = new System.Collections.Generic.List<ReferencedProject>(System.Linq.Enumerable.Select(value.ProjectReferences, v => EntityUtilities.NullOrCopy(v, _v => new ReferencedProject().Apply(_v))));
            base.CopyFrom(((Codex.IProjectScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferencedProject))]
    public partial class ReferencedProject : Codex.EntityBase, Codex.IReferencedProject, Codex.IEntityTarget<Codex.IReferencedProject> {
        
        private string m_ProjectId;
        
        private System.Collections.Generic.List<DefinitionSymbol> m_Definitions = new System.Collections.Generic.List<DefinitionSymbol>();
        
        private string m_DisplayName;
        
        private PropertyMap m_Properties;
        
        public ReferencedProject() {
        }
        
        public ReferencedProject(Codex.IReferencedProject value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The identifier of the referenced project
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// Used definitions for the project. Sorted.
        /// </summary>
        public virtual System.Collections.Generic.List<DefinitionSymbol> Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// Used definitions for the project. Sorted.
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IDefinitionSymbol> Codex.IReferencedProject.Definitions {
            get {
                return this.Definitions;
            }
        }
        
        /// <summary>
        /// The display name of the project
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The properties of the project. Such as Version, PublicKey, etc.
        /// </summary>
        public virtual PropertyMap Properties {
            get {
                return this.m_Properties;
            }
            set {
                this.m_Properties = value;
            }
        }
        
        /// <summary>
        /// The properties of the project. Such as Version, PublicKey, etc.
        /// </summary>
        Codex.IPropertyMap Codex.IReferencedProject.Properties {
            get {
                return this.Properties;
            }
        }
        
        public virtual void CopyFrom(Codex.IReferencedProject value) {
            this.m_ProjectId = value.ProjectId;
            this.m_Definitions = new System.Collections.Generic.List<DefinitionSymbol>(System.Linq.Enumerable.Select(value.Definitions, v => EntityUtilities.NullOrCopy(v, _v => new DefinitionSymbol().Apply(_v))));
            this.m_DisplayName = value.DisplayName;
            this.m_Properties = EntityUtilities.NullOrCopy(value.Properties, v => new PropertyMap().Apply(v));;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectFileLink))]
    public partial class ProjectFileLink : ProjectFileScopeEntity, Codex.IProjectFileLink, Codex.IEntityTarget<Codex.IProjectFileLink> {
        
        private string m_FileId;
        
        public ProjectFileLink() {
        }
        
        public ProjectFileLink(Codex.IProjectFileLink value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileLink(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileLink(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileLink(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileLink(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Unique identifier for file
        /// TODO: Make this checksum and searchable and use for discovering commit from PDB.
        /// TODO: What is this?
        /// </summary>
        public virtual string FileId {
            get {
                return this.m_FileId;
            }
            set {
                this.m_FileId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IProjectFileLink value) {
            this.m_FileId = value.FileId;
            base.CopyFrom(((Codex.IProjectFileScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IPropertySearchModel))]
    public partial class PropertySearchModel : SearchEntity, Codex.IPropertySearchModel, Codex.IEntityTarget<Codex.IPropertySearchModel> {
        
        private string m_Key;
        
        private string m_Value;
        
        private string m_OwnerId;
        
        public PropertySearchModel() {
        }
        
        public PropertySearchModel(Codex.IPropertySearchModel value) {
            this.CopyFrom(value);
        }
        
        public PropertySearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The key of the property
        /// </summary>
        public virtual string Key {
            get {
                return this.m_Key;
            }
            set {
                this.m_Key = value;
            }
        }
        
        /// <summary>
        /// The value of the property
        /// </summary>
        public virtual string Value {
            get {
                return this.m_Value;
            }
            set {
                this.m_Value = value;
            }
        }
        
        /// <summary>
        /// The identifier of the object owning this property
        /// </summary>
        public virtual string OwnerId {
            get {
                return this.m_OwnerId;
            }
            set {
                this.m_OwnerId = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Property, this);
        }
        
        public virtual void CopyFrom(Codex.IPropertySearchModel value) {
            this.m_Key = value.Key;
            this.m_Value = value.Value;
            this.m_OwnerId = value.OwnerId;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IPropertyMap))]
    public partial class PropertyMap : Codex.IPropertyMap, Codex.IEntityTarget<Codex.IPropertyMap> {
        
        public PropertyMap() {
        }
        
        public PropertyMap(Codex.IPropertyMap value) {
            this.CopyFrom(value);
        }
        
        public virtual void CopyFrom(Codex.IPropertyMap value) {
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepository))]
    public partial class Repository : Codex.EntityBase, Codex.IRepository, Codex.IEntityTarget<Codex.IRepository> {
        
        private string m_Name;
        
        private string m_Description;
        
        private string m_Id;
        
        private string m_WebAddress;
        
        private string m_SourceControlWebAddress;
        
        private string m_FileWebAddressTransformInputRegex;
        
        private string m_PrimaryBranch;
        
        private System.Collections.Generic.List<RepositoryReference> m_RepositoryReferences = new System.Collections.Generic.List<RepositoryReference>();
        
        public Repository() {
        }
        
        public Repository(Codex.IRepository value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the repository
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Describes the repository
        /// </summary>
        public virtual string Description {
            get {
                return this.m_Description;
            }
            set {
                this.m_Description = value;
            }
        }
        
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual string WebAddress {
            get {
                return this.m_WebAddress;
            }
            set {
                this.m_WebAddress = value;
            }
        }
        
        /// <summary>
        /// The web address for source control of the repository
        /// </summary>
        public virtual string SourceControlWebAddress {
            get {
                return this.m_SourceControlWebAddress;
            }
            set {
                this.m_SourceControlWebAddress = value;
            }
        }
        
        /// <summary>
        /// The regex for extracting
        /// </summary>
        public virtual string FileWebAddressTransformInputRegex {
            get {
                return this.m_FileWebAddressTransformInputRegex;
            }
            set {
                this.m_FileWebAddressTransformInputRegex = value;
            }
        }
        
        /// <summary>
        /// The name of the primary branch for the repository
        /// </summary>
        public virtual string PrimaryBranch {
            get {
                return this.m_PrimaryBranch;
            }
            set {
                this.m_PrimaryBranch = value;
            }
        }
        
        public virtual System.Collections.Generic.List<RepositoryReference> RepositoryReferences {
            get {
                return this.m_RepositoryReferences;
            }
            set {
                this.m_RepositoryReferences = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.IRepositoryReference> Codex.IRepository.RepositoryReferences {
            get {
                return this.RepositoryReferences;
            }
        }
        
        public virtual void CopyFrom(Codex.IRepository value) {
            this.m_Name = value.Name;
            this.m_Description = value.Description;
            this.m_Id = value.Id;
            this.m_WebAddress = value.WebAddress;
            this.m_SourceControlWebAddress = value.SourceControlWebAddress;
            this.m_FileWebAddressTransformInputRegex = value.FileWebAddressTransformInputRegex;
            this.m_PrimaryBranch = value.PrimaryBranch;
            this.m_RepositoryReferences = new System.Collections.Generic.List<RepositoryReference>(System.Linq.Enumerable.Select(value.RepositoryReferences, v => EntityUtilities.NullOrCopy(v, _v => new RepositoryReference().Apply(_v))));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositoryReference))]
    public partial class RepositoryReference : Codex.EntityBase, Codex.IRepositoryReference, Codex.IEntityTarget<Codex.IRepositoryReference> {
        
        private string m_Name;
        
        private string m_Id;
        
        public RepositoryReference() {
        }
        
        public RepositoryReference(Codex.IRepositoryReference value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the reference repository
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// Optional. Id of repository
        /// </summary>
        public virtual string Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IRepositoryReference value) {
            this.m_Name = value.Name;
            this.m_Id = value.Id;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISearchEntity))]
    public partial class SearchEntity : Codex.EntityBase, Codex.ISearchEntity, Codex.IEntityTarget<Codex.ISearchEntity> {
        
        private string m_Uid;
        
        private string m_EntityContentId;
        
        private int m_EntityContentSize;
        
        private System.Nullable<long> m_EntityVersion;
        
        private int m_RoutingGroup;
        
        private int m_StableId;
        
        private string m_SortKey;
        
        public SearchEntity() {
        }
        
        public SearchEntity(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// Defines the content addressable identifier for the entity. This is used
        /// to determine if an entity with the same <see cref="P:Codex.ISearchEntity.Uid" /> should be updated
        /// </summary>
        public virtual string EntityContentId {
            get {
                return this.m_EntityContentId;
            }
            set {
                this.m_EntityContentId = value;
            }
        }
        
        /// <summary>
        /// Defines the size of the raw serialized entity.
        /// </summary>
        public virtual int EntityContentSize {
            get {
                return this.m_EntityContentSize;
            }
            set {
                this.m_EntityContentSize = value;
            }
        }
        
        /// <summary>
        /// The version number used when storing the entity (for use by ElasticSearch concurrency control
        /// to prevent races when storing values)
        /// </summary>
        public virtual System.Nullable<long> EntityVersion {
            get {
                return this.m_EntityVersion;
            }
            set {
                this.m_EntityVersion = value;
            }
        }
        
        /// <summary>
        /// Entities are split into separate groups (specified by an integral value) which in turn
        /// are sent to specific shards based on the ElasticSearch routing policy (i.e. the routing value is
        /// determined by this value)
        /// NOTE: This value is derived from <see cref="!:RoutingKey" />
        /// </summary>
        public virtual int RoutingGroup {
            get {
                return this.m_RoutingGroup;
            }
            set {
                this.m_RoutingGroup = value;
            }
        }
        
        /// <summary>
        /// The per-group stable identity
        /// </summary>
        public virtual int StableId {
            get {
                return this.m_StableId;
            }
            set {
                this.m_StableId = value;
            }
        }
        
        /// <summary>
        /// Value used for sorting (this should be computed based other values in the entity i.e. {FileName}/{RepoRelativePath} for files)
        /// The goal is so that similar entities should be clustered together to allow maximum compression
        /// </summary>
        public virtual string SortKey {
            get {
                return this.m_SortKey;
            }
            set {
                this.m_SortKey = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ISearchEntity value) {
            this.m_Uid = value.Uid;
            this.m_EntityContentId = value.EntityContentId;
            this.m_EntityContentSize = value.EntityContentSize;
            this.m_EntityVersion = value.EntityVersion;
            this.m_RoutingGroup = value.RoutingGroup;
            this.m_StableId = value.StableId;
            this.m_SortKey = value.SortKey;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepoScopeEntity))]
    public partial class RepoScopeEntity : Codex.EntityBase, Codex.IRepoScopeEntity, Codex.IEntityTarget<Codex.IRepoScopeEntity> {
        
        private string m_RepositoryName;
        
        public RepoScopeEntity() {
        }
        
        public RepoScopeEntity(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IRepoScopeEntity value) {
            this.m_RepositoryName = value.RepositoryName;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitScopeEntity))]
    public partial class CommitScopeEntity : RepoScopeEntity, Codex.ICommitScopeEntity, Codex.IEntityTarget<Codex.ICommitScopeEntity> {
        
        private string m_CommitId;
        
        public CommitScopeEntity() {
        }
        
        public CommitScopeEntity(Codex.ICommitScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public CommitScopeEntity(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The unique identifier for this commit/changeset in version control
        /// (i.e. git commit hash or TFS changeset number)
        /// </summary>
        public virtual string CommitId {
            get {
                return this.m_CommitId;
            }
            set {
                this.m_CommitId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICommitScopeEntity value) {
            this.m_CommitId = value.CommitId;
            base.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectScopeEntity))]
    public partial class ProjectScopeEntity : RepoScopeEntity, Codex.IProjectScopeEntity, Codex.IEntityTarget<Codex.IProjectScopeEntity> {
        
        private string m_ProjectId;
        
        public ProjectScopeEntity() {
        }
        
        public ProjectScopeEntity(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectScopeEntity(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IProjectScopeEntity value) {
            this.m_ProjectId = value.ProjectId;
            base.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepoFileScopeEntity))]
    public partial class RepoFileScopeEntity : RepoScopeEntity, Codex.IRepoFileScopeEntity, Codex.IEntityTarget<Codex.IRepoFileScopeEntity> {
        
        private string m_RepoRelativePath;
        
        public RepoFileScopeEntity() {
        }
        
        public RepoFileScopeEntity(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public RepoFileScopeEntity(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IRepoFileScopeEntity value) {
            this.m_RepoRelativePath = value.RepoRelativePath;
            base.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectFileScopeEntity))]
    public partial class ProjectFileScopeEntity : RepoFileScopeEntity, Codex.IProjectFileScopeEntity, Codex.IEntityTarget<Codex.IProjectFileScopeEntity>, Codex.IEntityTarget<Codex.IProjectScopeEntity> {
        
        private string m_ProjectRelativePath;
        
        private string m_ProjectId;
        
        public ProjectFileScopeEntity() {
        }
        
        public ProjectFileScopeEntity(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileScopeEntity(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileScopeEntity(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectFileScopeEntity(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IProjectFileScopeEntity value) {
            this.m_ProjectRelativePath = value.ProjectRelativePath;
            this.m_ProjectId = value.ProjectId;
            base.CopyFrom(((Codex.IRepoFileScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IProjectScopeEntity value) {
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRegisteredEntity))]
    public partial class RegisteredEntity : SearchEntity, Codex.IRegisteredEntity, Codex.IEntityTarget<Codex.IRegisteredEntity> {
        
        private System.DateTime m_DateAdded;
        
        private string m_EntityUid;
        
        private string m_IndexName;
        
        public RegisteredEntity() {
        }
        
        public RegisteredEntity(Codex.IRegisteredEntity value) {
            this.CopyFrom(value);
        }
        
        public RegisteredEntity(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The date in which the entity was registered (i.e. added to the store)
        /// </summary>
        public virtual System.DateTime DateAdded {
            get {
                return this.m_DateAdded;
            }
            set {
                this.m_DateAdded = value;
            }
        }
        
        /// <summary>
        /// The id of the originating entity
        /// </summary>
        public virtual string EntityUid {
            get {
                return this.m_EntityUid;
            }
            set {
                this.m_EntityUid = value;
            }
        }
        
        /// <summary>
        /// The index of the originating entity
        /// </summary>
        public virtual string IndexName {
            get {
                return this.m_IndexName;
            }
            set {
                this.m_IndexName = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.RegisteredEntity, this);
        }
        
        public virtual void CopyFrom(Codex.IRegisteredEntity value) {
            this.m_DateAdded = value.DateAdded;
            this.m_EntityUid = value.EntityUid;
            this.m_IndexName = value.IndexName;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStoredFilter))]
    public partial class StoredFilter : SearchEntity, Codex.IStoredFilter, Codex.IEntityTarget<Codex.IStoredFilter> {
        
        private System.DateTime m_DateUpdated;
        
        private string m_FullPath;
        
        private string m_Name;
        
        private string m_IndexName;
        
        private byte[] m_StableIds;
        
        private System.Collections.Generic.List<ChildFilterReference> m_Children = new System.Collections.Generic.List<ChildFilterReference>();
        
        private string m_FilterHash;
        
        private int m_Cardinality;
        
        public StoredFilter() {
        }
        
        public StoredFilter(Codex.IStoredFilter value) {
            this.CopyFrom(value);
        }
        
        public StoredFilter(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The time of the last update to the stored filter
        /// </summary>
        public virtual System.DateTime DateUpdated {
            get {
                return this.m_DateUpdated;
            }
            set {
                this.m_DateUpdated = value;
            }
        }
        
        public virtual string FullPath {
            get {
                return this.m_FullPath;
            }
            set {
                this.m_FullPath = value;
            }
        }
        
        /// <summary>
        /// The name of the stored filter
        /// </summary>
        public virtual string Name {
            get {
                return this.m_Name;
            }
            set {
                this.m_Name = value;
            }
        }
        
        /// <summary>
        /// The name of the index to which the stored filter applies
        /// </summary>
        public virtual string IndexName {
            get {
                return this.m_IndexName;
            }
            set {
                this.m_IndexName = value;
            }
        }
        
        /// <summary>
        /// Stored filter bit set
        /// </summary>
        public virtual byte[] StableIds {
            get {
                return this.m_StableIds;
            }
            set {
                this.m_StableIds = value;
            }
        }
        
        public virtual System.Collections.Generic.List<ChildFilterReference> Children {
            get {
                return this.m_Children;
            }
            set {
                this.m_Children = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.IChildFilterReference> Codex.IStoredFilter.Children {
            get {
                return this.Children;
            }
        }
        
        /// <summary>
        /// The hash of <see cref="!:Filter" />
        /// </summary>
        public virtual string FilterHash {
            get {
                return this.m_FilterHash;
            }
            set {
                this.m_FilterHash = value;
            }
        }
        
        /// <summary>
        /// The count of elements matched by <see cref="!:Filter" />
        /// </summary>
        public virtual int Cardinality {
            get {
                return this.m_Cardinality;
            }
            set {
                this.m_Cardinality = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.StoredFilter, this);
        }
        
        public virtual void CopyFrom(Codex.IStoredFilter value) {
            this.m_DateUpdated = value.DateUpdated;
            this.m_FullPath = value.FullPath;
            this.m_Name = value.Name;
            this.m_IndexName = value.IndexName;
            this.m_StableIds = value.StableIds;
            this.m_Children = new System.Collections.Generic.List<ChildFilterReference>(System.Linq.Enumerable.Select(value.Children, v => EntityUtilities.NullOrCopy(v, _v => new ChildFilterReference().Apply(_v))));
            this.m_FilterHash = value.FilterHash;
            this.m_Cardinality = value.Cardinality;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IChildFilterReference))]
    public partial class ChildFilterReference : Codex.EntityBase, Codex.IChildFilterReference, Codex.IEntityTarget<Codex.IChildFilterReference> {
        
        private string m_FullPath;
        
        private string m_Uid;
        
        private byte[] m_StableIds;
        
        private int m_Cardinality;
        
        public ChildFilterReference() {
        }
        
        public ChildFilterReference(Codex.IChildFilterReference value) {
            this.CopyFrom(value);
        }
        
        public virtual string FullPath {
            get {
                return this.m_FullPath;
            }
            set {
                this.m_FullPath = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.ISearchEntity.Uid" /> of the child filter
        /// </summary>
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.IStoredFilter.StableIds" /> of the child filter
        /// </summary>
        public virtual byte[] StableIds {
            get {
                return this.m_StableIds;
            }
            set {
                this.m_StableIds = value;
            }
        }
        
        /// <summary>
        /// The <see cref="P:Codex.IStoredFilter.Cardinality" /> of the child filter
        /// </summary>
        public virtual int Cardinality {
            get {
                return this.m_Cardinality;
            }
            set {
                this.m_Cardinality = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IChildFilterReference value) {
            this.m_FullPath = value.FullPath;
            this.m_Uid = value.Uid;
            this.m_StableIds = value.StableIds;
            this.m_Cardinality = value.Cardinality;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IGroupedStoredFilterIds))]
    public partial class GroupedStoredFilterIds : Codex.IGroupedStoredFilterIds, Codex.IEntityTarget<Codex.IGroupedStoredFilterIds> {
        
        public GroupedStoredFilterIds() {
        }
        
        public GroupedStoredFilterIds(Codex.IGroupedStoredFilterIds value) {
            this.CopyFrom(value);
        }
        
        public virtual void CopyFrom(Codex.IGroupedStoredFilterIds value) {
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSearchModel))]
    public partial class DefinitionSearchModel : SearchEntity, Codex.IDefinitionSearchModel, Codex.IEntityTarget<Codex.IDefinitionSearchModel> {
        
        private DefinitionSymbol m_Definition;
        
        private System.Collections.Generic.List<string> m_Keywords = new System.Collections.Generic.List<string>();
        
        public DefinitionSearchModel() {
        }
        
        public DefinitionSearchModel(Codex.IDefinitionSearchModel value) {
            this.CopyFrom(value);
        }
        
        public DefinitionSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        Codex.IDefinitionSymbol Codex.IDefinitionSearchModel.Definition {
            get {
                return this.Definition;
            }
        }
        
        /// <summary>
        /// Keywords are additional terms which can be used to find a given symbol.
        /// NOTE: Keywords can only be used to select from symbols which have
        /// a primary term match
        /// </summary>
        public virtual System.Collections.Generic.List<string> Keywords {
            get {
                return this.m_Keywords;
            }
            set {
                this.m_Keywords = value;
            }
        }
        
        /// <summary>
        /// Keywords are additional terms which can be used to find a given symbol.
        /// NOTE: Keywords can only be used to select from symbols which have
        /// a primary term match
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.IDefinitionSearchModel.Keywords {
            get {
                return this.Keywords;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Definition, this);
        }
        
        public virtual void CopyFrom(Codex.IDefinitionSearchModel value) {
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().Apply(v));;
            this.m_Keywords = new System.Collections.Generic.List<string>(value.Keywords);
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ILanguageSearchModel))]
    public partial class LanguageSearchModel : SearchEntity, Codex.ILanguageSearchModel, Codex.IEntityTarget<Codex.ILanguageSearchModel> {
        
        private LanguageInfo m_Language;
        
        public LanguageSearchModel() {
        }
        
        public LanguageSearchModel(Codex.ILanguageSearchModel value) {
            this.CopyFrom(value);
        }
        
        public LanguageSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual LanguageInfo Language {
            get {
                return this.m_Language;
            }
            set {
                this.m_Language = value;
            }
        }
        
        Codex.ILanguageInfo Codex.ILanguageSearchModel.Language {
            get {
                return this.Language;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Language, this);
        }
        
        public virtual void CopyFrom(Codex.ILanguageSearchModel value) {
            this.m_Language = EntityUtilities.NullOrCopy(value.Language, v => new LanguageInfo().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSearchModel))]
    public partial class ReferenceSearchModel : SearchEntity, Codex.IReferenceSearchModel, Codex.IEntityTarget<Codex.IReferenceSearchModel>, Codex.IEntityTarget<Codex.IProjectFileScopeEntity>, Codex.IEntityTarget<Codex.IRepoFileScopeEntity>, Codex.IEntityTarget<Codex.IRepoScopeEntity>, Codex.IEntityTarget<Codex.IProjectScopeEntity> {
        
        private ReferenceSymbol m_Reference;
        
        private System.Collections.Generic.IReadOnlyList<SymbolSpan> m_Spans = Codex.Utilities.CollectionUtilities.Empty<SymbolSpan>.Array;
        
        private Codex.ISymbolLineSpanList m_CompressedSpans;
        
        private string m_ProjectRelativePath;
        
        private string m_RepoRelativePath;
        
        private string m_RepositoryName;
        
        private string m_ProjectId;
        
        public ReferenceSearchModel() {
        }
        
        public ReferenceSearchModel(Codex.IReferenceSearchModel value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchModel(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchModel(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchModel(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The reference symbol
        /// </summary>
        public virtual ReferenceSymbol Reference {
            get {
                return this.m_Reference;
            }
            set {
                this.m_Reference = value;
            }
        }
        
        /// <summary>
        /// The reference symbol
        /// </summary>
        Codex.IReferenceSymbol Codex.IReferenceSearchModel.Reference {
            get {
                return this.Reference;
            }
        }
        
        public virtual System.Collections.Generic.IReadOnlyList<SymbolSpan> Spans {
            get {
                return this.CoerceSpans(this.m_Spans);
            }
            set {
                this.m_Spans = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ISymbolSpan> Codex.IReferenceSearchModel.Spans {
            get {
                return this.Spans;
            }
        }
        
        /// <summary>
        /// Compressed list of spans
        /// </summary>
        public virtual Codex.ISymbolLineSpanList CompressedSpans {
            get {
                return this.m_CompressedSpans;
            }
            set {
                this.m_CompressedSpans = value;
            }
        }
        
        /// <summary>
        /// The project relative path of the file
        /// </summary>
        public virtual string ProjectRelativePath {
            get {
                return this.m_ProjectRelativePath;
            }
            set {
                this.m_ProjectRelativePath = value;
            }
        }
        
        /// <summary>
        /// The repo relative path to the file
        /// </summary>
        public virtual string RepoRelativePath {
            get {
                return this.m_RepoRelativePath;
            }
            set {
                this.m_RepoRelativePath = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Reference, this);
        }
        
        public virtual void CopyFrom(Codex.IReferenceSearchModel value) {
            this.m_Reference = EntityUtilities.NullOrCopy(value.Reference, v => new ReferenceSymbol().Apply(v));;
            this.m_Spans = new System.Collections.Generic.List<SymbolSpan>(System.Linq.Enumerable.Select(value.Spans, v => EntityUtilities.NullOrCopy(v, _v => new SymbolSpan().Apply(_v))));
            this.m_CompressedSpans = value.CompressedSpans;
            this.m_ProjectRelativePath = value.ProjectRelativePath;
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.m_RepositoryName = value.RepositoryName;
            this.m_ProjectId = value.ProjectId;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IProjectFileScopeEntity value) {
            this.m_ProjectRelativePath = value.ProjectRelativePath;
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoFileScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoFileScopeEntity value) {
            this.m_RepoRelativePath = value.RepoRelativePath;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoScopeEntity value) {
            this.m_RepositoryName = value.RepositoryName;
        }
        
        public virtual void CopyFrom(Codex.IProjectScopeEntity value) {
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ISourceSearchModelBase))]
    public partial class SourceSearchModelBase : SearchEntity, Codex.ISourceSearchModelBase, Codex.IEntityTarget<Codex.ISourceSearchModelBase> {
        
        private SourceControlFileInfo m_SourceControlInfo;
        
        private ChunkedSourceFile m_File;
        
        public SourceSearchModelBase() {
        }
        
        public SourceSearchModelBase(Codex.ISourceSearchModelBase value) {
            this.CopyFrom(value);
        }
        
        public SourceSearchModelBase(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        public virtual SourceControlFileInfo SourceControlInfo {
            get {
                return this.m_SourceControlInfo;
            }
            set {
                this.m_SourceControlInfo = value;
            }
        }
        
        /// <summary>
        /// Information about the source file from source control provider (may be null)
        /// </summary>
        Codex.ISourceControlFileInfo Codex.ISourceSearchModelBase.SourceControlInfo {
            get {
                return this.SourceControlInfo;
            }
        }
        
        public virtual ChunkedSourceFile File {
            get {
                return this.m_File;
            }
            set {
                this.m_File = value;
            }
        }
        
        Codex.IChunkedSourceFile Codex.ISourceSearchModelBase.File {
            get {
                return this.File;
            }
        }
        
        public virtual void CopyFrom(Codex.ISourceSearchModelBase value) {
            this.m_SourceControlInfo = EntityUtilities.NullOrCopy(value.SourceControlInfo, v => new SourceControlFileInfo().Apply(v));;
            this.m_File = EntityUtilities.NullOrCopy(value.File, v => new ChunkedSourceFile().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IBoundSourceSearchModel))]
    public partial class BoundSourceSearchModel : SourceSearchModelBase, Codex.IBoundSourceSearchModel, Codex.IEntityTarget<Codex.IBoundSourceSearchModel> {
        
        private string m_TextUid;
        
        private BoundSourceInfo m_BindingInfo;
        
        private Codex.IClassificationList m_CompressedClassifications;
        
        private Codex.IReferenceList m_CompressedReferences;
        
        public BoundSourceSearchModel() {
        }
        
        public BoundSourceSearchModel(Codex.IBoundSourceSearchModel value) {
            this.CopyFrom(value);
        }
        
        public BoundSourceSearchModel(Codex.ISourceSearchModelBase value) {
            this.CopyFrom(value);
        }
        
        public BoundSourceSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The unique identifier of the associated <see cref="T:Codex.ISourceFile" />
        /// </summary>
        public virtual string TextUid {
            get {
                return this.m_TextUid;
            }
            set {
                this.m_TextUid = value;
            }
        }
        
        /// <summary>
        /// The binding info
        /// </summary>
        public virtual BoundSourceInfo BindingInfo {
            get {
                return this.m_BindingInfo;
            }
            set {
                this.m_BindingInfo = value;
            }
        }
        
        /// <summary>
        /// The binding info
        /// </summary>
        Codex.IBoundSourceInfo Codex.IBoundSourceSearchModel.BindingInfo {
            get {
                return this.BindingInfo;
            }
        }
        
        /// <summary>
        /// Compressed list of classification spans
        /// </summary>
        public virtual Codex.IClassificationList CompressedClassifications {
            get {
                return this.m_CompressedClassifications;
            }
            set {
                this.m_CompressedClassifications = value;
            }
        }
        
        /// <summary>
        /// Compressed list of reference spans
        /// </summary>
        public virtual Codex.IReferenceList CompressedReferences {
            get {
                return this.m_CompressedReferences;
            }
            set {
                this.m_CompressedReferences = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.BoundSource, this);
        }
        
        public virtual void CopyFrom(Codex.IBoundSourceSearchModel value) {
            this.m_TextUid = value.TextUid;
            this.m_BindingInfo = EntityUtilities.NullOrCopy(value.BindingInfo, v => new BoundSourceInfo().Apply(v));;
            this.m_CompressedClassifications = value.CompressedClassifications;
            this.m_CompressedReferences = value.CompressedReferences;
            base.CopyFrom(((Codex.ISourceSearchModelBase)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITextSourceSearchModel))]
    public partial class TextSourceSearchModel : SourceSearchModelBase, Codex.ITextSourceSearchModel, Codex.IEntityTarget<Codex.ITextSourceSearchModel> {
        
        public TextSourceSearchModel() {
        }
        
        public TextSourceSearchModel(Codex.ITextSourceSearchModel value) {
            this.CopyFrom(value);
        }
        
        public TextSourceSearchModel(Codex.ISourceSearchModelBase value) {
            this.CopyFrom(value);
        }
        
        public TextSourceSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.TextSource, this);
        }
        
        public virtual void CopyFrom(Codex.ITextSourceSearchModel value) {
            base.CopyFrom(((Codex.ISourceSearchModelBase)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ITextChunkSearchModel))]
    public partial class TextChunkSearchModel : SearchEntity, Codex.ITextChunkSearchModel, Codex.IEntityTarget<Codex.ITextChunkSearchModel> {
        
        private SourceFileContentChunk m_Chunk;
        
        private SourceFileContentChunk m_RawChunk;
        
        public TextChunkSearchModel() {
        }
        
        public TextChunkSearchModel(Codex.ITextChunkSearchModel value) {
            this.CopyFrom(value);
        }
        
        public TextChunkSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The text content. Set when the chunk IS searched
        /// </summary>
        public virtual SourceFileContentChunk Chunk {
            get {
                return this.m_Chunk;
            }
            set {
                this.m_Chunk = value;
            }
        }
        
        /// <summary>
        /// The text content. Set when the chunk IS searched
        /// </summary>
        Codex.ISourceFileContentChunk Codex.ITextChunkSearchModel.Chunk {
            get {
                return this.Chunk;
            }
        }
        
        /// <summary>
        /// The text content. Set when the chunk IS NOT searched
        /// </summary>
        public virtual SourceFileContentChunk RawChunk {
            get {
                return this.m_RawChunk;
            }
            set {
                this.m_RawChunk = value;
            }
        }
        
        /// <summary>
        /// The text content. Set when the chunk IS NOT searched
        /// </summary>
        Codex.ISourceFileContentChunk Codex.ITextChunkSearchModel.RawChunk {
            get {
                return this.RawChunk;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.TextChunk, this);
        }
        
        public virtual void CopyFrom(Codex.ITextChunkSearchModel value) {
            this.m_Chunk = EntityUtilities.NullOrCopy(value.Chunk, v => new SourceFileContentChunk().Apply(v));;
            this.m_RawChunk = EntityUtilities.NullOrCopy(value.RawChunk, v => new SourceFileContentChunk().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositorySearchModel))]
    public partial class RepositorySearchModel : SearchEntity, Codex.IRepositorySearchModel, Codex.IEntityTarget<Codex.IRepositorySearchModel> {
        
        private Repository m_Repository;
        
        public RepositorySearchModel() {
        }
        
        public RepositorySearchModel(Codex.IRepositorySearchModel value) {
            this.CopyFrom(value);
        }
        
        public RepositorySearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual Repository Repository {
            get {
                return this.m_Repository;
            }
            set {
                this.m_Repository = value;
            }
        }
        
        Codex.IRepository Codex.IRepositorySearchModel.Repository {
            get {
                return this.Repository;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Repository, this);
        }
        
        public virtual void CopyFrom(Codex.IRepositorySearchModel value) {
            this.m_Repository = EntityUtilities.NullOrCopy(value.Repository, v => new Repository().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectSearchModel))]
    public partial class ProjectSearchModel : SearchEntity, Codex.IProjectSearchModel, Codex.IEntityTarget<Codex.IProjectSearchModel> {
        
        private AnalyzedProject m_Project;
        
        public ProjectSearchModel() {
        }
        
        public ProjectSearchModel(Codex.IProjectSearchModel value) {
            this.CopyFrom(value);
        }
        
        public ProjectSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual AnalyzedProject Project {
            get {
                return this.m_Project;
            }
            set {
                this.m_Project = value;
            }
        }
        
        Codex.IProject Codex.IProjectSearchModel.Project {
            get {
                return this.Project;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Project, this);
        }
        
        public virtual void CopyFrom(Codex.IProjectSearchModel value) {
            this.m_Project = EntityUtilities.NullOrCopy(value.Project, v => new AnalyzedProject().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IProjectReferenceSearchModel))]
    public partial class ProjectReferenceSearchModel : SearchEntity, Codex.IProjectReferenceSearchModel, Codex.IEntityTarget<Codex.IProjectReferenceSearchModel>, Codex.IEntityTarget<Codex.IProjectScopeEntity>, Codex.IEntityTarget<Codex.IRepoScopeEntity> {
        
        private ReferencedProject m_ProjectReference;
        
        private string m_ProjectId;
        
        private string m_RepositoryName;
        
        public ProjectReferenceSearchModel() {
        }
        
        public ProjectReferenceSearchModel(Codex.IProjectReferenceSearchModel value) {
            this.CopyFrom(value);
        }
        
        public ProjectReferenceSearchModel(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectReferenceSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ProjectReferenceSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual ReferencedProject ProjectReference {
            get {
                return this.m_ProjectReference;
            }
            set {
                this.m_ProjectReference = value;
            }
        }
        
        Codex.IReferencedProject Codex.IProjectReferenceSearchModel.ProjectReference {
            get {
                return this.ProjectReference;
            }
        }
        
        /// <summary>
        /// The identifier of the project containing the entity
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.ProjectReference, this);
        }
        
        public virtual void CopyFrom(Codex.IProjectReferenceSearchModel value) {
            this.m_ProjectReference = EntityUtilities.NullOrCopy(value.ProjectReference, v => new ReferencedProject().Apply(v));;
            this.m_ProjectId = value.ProjectId;
            this.m_RepositoryName = value.RepositoryName;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IProjectScopeEntity value) {
            this.m_ProjectId = value.ProjectId;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoScopeEntity value) {
            this.m_RepositoryName = value.RepositoryName;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitSearchModel))]
    public partial class CommitSearchModel : SearchEntity, Codex.ICommitSearchModel, Codex.IEntityTarget<Codex.ICommitSearchModel> {
        
        private Commit m_Commit;
        
        public CommitSearchModel() {
        }
        
        public CommitSearchModel(Codex.ICommitSearchModel value) {
            this.CopyFrom(value);
        }
        
        public CommitSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual Commit Commit {
            get {
                return this.m_Commit;
            }
            set {
                this.m_Commit = value;
            }
        }
        
        Codex.ICommit Codex.ICommitSearchModel.Commit {
            get {
                return this.Commit;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.Commit, this);
        }
        
        public virtual void CopyFrom(Codex.ICommitSearchModel value) {
            this.m_Commit = EntityUtilities.NullOrCopy(value.Commit, v => new Commit().Apply(v));;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFilesSearchModel))]
    public partial class CommitFilesSearchModel : SearchEntity, Codex.ICommitFilesSearchModel, Codex.IEntityTarget<Codex.ICommitFilesSearchModel>, Codex.IEntityTarget<Codex.ICommitScopeEntity>, Codex.IEntityTarget<Codex.IRepoScopeEntity> {
        
        private System.Collections.Generic.List<CommitFileLink> m_CommitFiles = new System.Collections.Generic.List<CommitFileLink>();
        
        private string m_CommitId;
        
        private string m_RepositoryName;
        
        public CommitFilesSearchModel() {
        }
        
        public CommitFilesSearchModel(Codex.ICommitFilesSearchModel value) {
            this.CopyFrom(value);
        }
        
        public CommitFilesSearchModel(Codex.ICommitScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public CommitFilesSearchModel(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public CommitFilesSearchModel(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual System.Collections.Generic.List<CommitFileLink> CommitFiles {
            get {
                return this.m_CommitFiles;
            }
            set {
                this.m_CommitFiles = value;
            }
        }
        
        System.Collections.Generic.IReadOnlyList<Codex.ICommitFileLink> Codex.ICommitFilesSearchModel.CommitFiles {
            get {
                return this.CommitFiles;
            }
        }
        
        /// <summary>
        /// The unique identifier for this commit/changeset in version control
        /// (i.e. git commit hash or TFS changeset number)
        /// </summary>
        public virtual string CommitId {
            get {
                return this.m_CommitId;
            }
            set {
                this.m_CommitId = value;
            }
        }
        
        /// <summary>
        /// The name of the repository containing the entity
        /// </summary>
        public virtual string RepositoryName {
            get {
                return this.m_RepositoryName;
            }
            set {
                this.m_RepositoryName = value;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.CommitFiles, this);
        }
        
        public virtual void CopyFrom(Codex.ICommitFilesSearchModel value) {
            this.m_CommitFiles = new System.Collections.Generic.List<CommitFileLink>(System.Linq.Enumerable.Select(value.CommitFiles, v => EntityUtilities.NullOrCopy(v, _v => new CommitFileLink().Apply(_v))));
            this.m_CommitId = value.CommitId;
            this.m_RepositoryName = value.RepositoryName;
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.ICommitScopeEntity value) {
            this.m_CommitId = value.CommitId;
            this.CopyFrom(((Codex.IRepoScopeEntity)(value)));
        }
        
        public virtual void CopyFrom(Codex.IRepoScopeEntity value) {
            this.m_RepositoryName = value.RepositoryName;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStableIdMarker))]
    public partial class StableIdMarker : SearchEntity, Codex.IStableIdMarker, Codex.IEntityTarget<Codex.IStableIdMarker> {
        
        private int m_NextValue;
        
        private System.Collections.Generic.List<int> m_FreeList = new System.Collections.Generic.List<int>();
        
        private System.Collections.Generic.List<StableIdReservation> m_PendingReservations = new System.Collections.Generic.List<StableIdReservation>();
        
        public StableIdMarker() {
        }
        
        public StableIdMarker(Codex.IStableIdMarker value) {
            this.CopyFrom(value);
        }
        
        public StableIdMarker(Codex.ISearchEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The next tail available stable id
        /// </summary>
        public virtual int NextValue {
            get {
                return this.m_NextValue;
            }
            set {
                this.m_NextValue = value;
            }
        }
        
        /// <summary>
        /// The list of free indices
        /// </summary>
        public virtual System.Collections.Generic.List<int> FreeList {
            get {
                return this.m_FreeList;
            }
            set {
                this.m_FreeList = value;
            }
        }
        
        /// <summary>
        /// The list of free indices
        /// </summary>
        System.Collections.Generic.IReadOnlyList<int> Codex.IStableIdMarker.FreeList {
            get {
                return this.FreeList;
            }
        }
        
        /// <summary>
        /// The uncommitted reservations
        /// </summary>
        public virtual System.Collections.Generic.List<StableIdReservation> PendingReservations {
            get {
                return this.m_PendingReservations;
            }
            set {
                this.m_PendingReservations = value;
            }
        }
        
        /// <summary>
        /// The uncommitted reservations
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.IStableIdReservation> Codex.IStableIdMarker.PendingReservations {
            get {
                return this.PendingReservations;
            }
        }
        
        public override string GetRoutingKey() {
            return this.GetRoutingKey(Codex.SearchTypes.StableIdMarker, this);
        }
        
        public virtual void CopyFrom(Codex.IStableIdMarker value) {
            this.m_NextValue = value.NextValue;
            this.m_FreeList = new System.Collections.Generic.List<int>(value.FreeList);
            this.m_PendingReservations = new System.Collections.Generic.List<StableIdReservation>(System.Linq.Enumerable.Select(value.PendingReservations, v => EntityUtilities.NullOrCopy(v, _v => new StableIdReservation().Apply(_v))));
            base.CopyFrom(((Codex.ISearchEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IStableIdReservation))]
    public partial class StableIdReservation : Codex.EntityBase, Codex.IStableIdReservation, Codex.IEntityTarget<Codex.IStableIdReservation> {
        
        private string m_ReservationId;
        
        private System.DateTime m_ReservationDate;
        
        private System.Collections.Generic.List<int> m_ReservedIds = new System.Collections.Generic.List<int>();
        
        public StableIdReservation() {
        }
        
        public StableIdReservation(Codex.IStableIdReservation value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// Unique id of the reservation. Used during commit to find and remove the reservation.
        /// </summary>
        public virtual string ReservationId {
            get {
                return this.m_ReservationId;
            }
            set {
                this.m_ReservationId = value;
            }
        }
        
        /// <summary>
        /// The date of the id reservation. Used for garbage collection of stale reservations.
        /// </summary>
        public virtual System.DateTime ReservationDate {
            get {
                return this.m_ReservationDate;
            }
            set {
                this.m_ReservationDate = value;
            }
        }
        
        /// <summary>
        /// The list of reserved ids for the reservation
        /// </summary>
        public virtual System.Collections.Generic.List<int> ReservedIds {
            get {
                return this.m_ReservedIds;
            }
            set {
                this.m_ReservedIds = value;
            }
        }
        
        /// <summary>
        /// The list of reserved ids for the reservation
        /// </summary>
        System.Collections.Generic.IReadOnlyList<int> Codex.IStableIdReservation.ReservedIds {
            get {
                return this.ReservedIds;
            }
        }
        
        public virtual void CopyFrom(Codex.IStableIdReservation value) {
            this.m_ReservationId = value.ReservationId;
            this.m_ReservationDate = value.ReservationDate;
            this.m_ReservedIds = new System.Collections.Generic.List<int>(value.ReservedIds);
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IFileStatistics))]
    public partial class FileStatistics : Codex.EntityBase, Codex.IFileStatistics, Codex.IEntityTarget<Codex.IFileStatistics> {
        
        private long m_FileCount;
        
        private long m_Classifications;
        
        private long m_Definitions;
        
        private long m_References;
        
        private long m_Lines;
        
        private long m_Size;
        
        private long m_AnalyzedSize;
        
        public FileStatistics() {
        }
        
        public FileStatistics(Codex.IFileStatistics value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The numbef of files
        /// </summary>
        public virtual long FileCount {
            get {
                return this.m_FileCount;
            }
            set {
                this.m_FileCount = value;
            }
        }
        
        /// <summary>
        /// The number of classifications
        /// </summary>
        public virtual long Classifications {
            get {
                return this.m_Classifications;
            }
            set {
                this.m_Classifications = value;
            }
        }
        
        /// <summary>
        /// The number of definitions
        /// </summary>
        public virtual long Definitions {
            get {
                return this.m_Definitions;
            }
            set {
                this.m_Definitions = value;
            }
        }
        
        /// <summary>
        /// The number of references
        /// </summary>
        public virtual long References {
            get {
                return this.m_References;
            }
            set {
                this.m_References = value;
            }
        }
        
        /// <summary>
        /// The number of lines of code in files
        /// </summary>
        public virtual long Lines {
            get {
                return this.m_Lines;
            }
            set {
                this.m_Lines = value;
            }
        }
        
        /// <summary>
        /// The total size of files
        /// </summary>
        public virtual long Size {
            get {
                return this.m_Size;
            }
            set {
                this.m_Size = value;
            }
        }
        
        /// <summary>
        /// The total size of analysis files
        /// </summary>
        public virtual long AnalyzedSize {
            get {
                return this.m_AnalyzedSize;
            }
            set {
                this.m_AnalyzedSize = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IFileStatistics value) {
            this.m_FileCount = value.FileCount;
            this.m_Classifications = value.Classifications;
            this.m_Definitions = value.Definitions;
            this.m_References = value.References;
            this.m_Lines = value.Lines;
            this.m_Size = value.Size;
            this.m_AnalyzedSize = value.AnalyzedSize;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IRepositoryStoreInfo))]
    public partial class RepositoryStoreInfo : Codex.EntityBase, Codex.IRepositoryStoreInfo, Codex.IEntityTarget<Codex.IRepositoryStoreInfo> {
        
        private Repository m_Repository;
        
        private Branch m_Branch;
        
        private Commit m_Commit;
        
        public RepositoryStoreInfo() {
        }
        
        public RepositoryStoreInfo(Codex.IRepositoryStoreInfo value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The repository being stored
        /// </summary>
        public virtual Repository Repository {
            get {
                return this.m_Repository;
            }
            set {
                this.m_Repository = value;
            }
        }
        
        /// <summary>
        /// The repository being stored
        /// </summary>
        Codex.IRepository Codex.IRepositoryStoreInfo.Repository {
            get {
                return this.Repository;
            }
        }
        
        /// <summary>
        /// The branch being stored
        /// </summary>
        public virtual Branch Branch {
            get {
                return this.m_Branch;
            }
            set {
                this.m_Branch = value;
            }
        }
        
        /// <summary>
        /// The branch being stored
        /// </summary>
        Codex.IBranch Codex.IRepositoryStoreInfo.Branch {
            get {
                return this.Branch;
            }
        }
        
        /// <summary>
        /// The commit being stored
        /// </summary>
        public virtual Commit Commit {
            get {
                return this.m_Commit;
            }
            set {
                this.m_Commit = value;
            }
        }
        
        /// <summary>
        /// The commit being stored
        /// </summary>
        Codex.ICommit Codex.IRepositoryStoreInfo.Commit {
            get {
                return this.Commit;
            }
        }
        
        public virtual void CopyFrom(Codex.IRepositoryStoreInfo value) {
            this.m_Repository = EntityUtilities.NullOrCopy(value.Repository, v => new Repository().Apply(v));;
            this.m_Branch = EntityUtilities.NullOrCopy(value.Branch, v => new Branch().Apply(v));;
            this.m_Commit = EntityUtilities.NullOrCopy(value.Commit, v => new Commit().Apply(v));;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICommitFilesDirectory))]
    public partial class CommitFilesDirectory : RepoFileScopeEntity, Codex.ICommitFilesDirectory, Codex.IEntityTarget<Codex.ICommitFilesDirectory> {
        
        private System.Collections.Generic.List<CommitFileLink> m_Files = new System.Collections.Generic.List<CommitFileLink>();
        
        public CommitFilesDirectory() {
        }
        
        public CommitFilesDirectory(Codex.ICommitFilesDirectory value) {
            this.CopyFrom(value);
        }
        
        public CommitFilesDirectory(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public CommitFilesDirectory(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The files in the directory
        /// </summary>
        public virtual System.Collections.Generic.List<CommitFileLink> Files {
            get {
                return this.m_Files;
            }
            set {
                this.m_Files = value;
            }
        }
        
        /// <summary>
        /// The files in the directory
        /// </summary>
        System.Collections.Generic.IReadOnlyList<Codex.ICommitFileLink> Codex.ICommitFilesDirectory.Files {
            get {
                return this.Files;
            }
        }
        
        public virtual void CopyFrom(Codex.ICommitFilesDirectory value) {
            this.m_Files = new System.Collections.Generic.List<CommitFileLink>(System.Linq.Enumerable.Select(value.Files, v => EntityUtilities.NullOrCopy(v, _v => new CommitFileLink().Apply(_v))));
            base.CopyFrom(((Codex.IRepoFileScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IDefinitionSymbol))]
    public partial class DefinitionSymbol : ReferenceSymbol, Codex.IDefinitionSymbol, Codex.IEntityTarget<Codex.IDefinitionSymbol> {
        
        private string m_Uid;
        
        private string m_DisplayName;
        
        private string m_AbbreviatedName;
        
        private System.Collections.Generic.List<string> m_Keywords = new System.Collections.Generic.List<string>();
        
        private string m_ShortName;
        
        private string m_ContainerQualifiedName;
        
        private System.Collections.Generic.List<string> m_Modifiers = new System.Collections.Generic.List<string>();
        
        private Codex.ObjectModel.Glyph m_Glyph;
        
        private int m_SymbolDepth;
        
        private DocumentationInfo m_DocumentationInfo;
        
        private string m_TypeName;
        
        private string m_DeclarationName;
        
        private string m_Comment;
        
        public DefinitionSymbol() {
        }
        
        public DefinitionSymbol(Codex.IDefinitionSymbol value) {
            this.CopyFrom(value);
        }
        
        public DefinitionSymbol(Codex.IReferenceSymbol value) {
            this.CopyFrom(value);
        }
        
        public DefinitionSymbol(Codex.ICodeSymbol value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The unique identifier for the symbol
        /// NOTE: This is not applicable to most symbols. Only set for symbols
        /// which are added in a shared context and need this for deduplication)
        /// </summary>
        public virtual string Uid {
            get {
                return this.m_Uid;
            }
            set {
                this.m_Uid = value;
            }
        }
        
        /// <summary>
        /// The display name of the symbol
        /// </summary>
        public virtual string DisplayName {
            get {
                return this.m_DisplayName;
            }
            set {
                this.m_DisplayName = value;
            }
        }
        
        /// <summary>
        /// The abbreviated name of the symbol (i.e. ElasticSearchCodex =&gt; esc).
        /// This is used to find the symbol when search term does not contain '.'
        /// </summary>
        public virtual string AbbreviatedName {
            get {
                return this.CoerceAbbreviatedName(this.m_AbbreviatedName);
            }
            set {
                this.m_AbbreviatedName = value;
            }
        }
        
        /// <summary>
        /// Additional search terms for the symbol.
        /// (i.e. integral value for enum field)
        /// </summary>
        public virtual System.Collections.Generic.List<string> Keywords {
            get {
                return this.m_Keywords;
            }
            set {
                this.m_Keywords = value;
            }
        }
        
        /// <summary>
        /// Additional search terms for the symbol.
        /// (i.e. integral value for enum field)
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.IDefinitionSymbol.Keywords {
            get {
                return this.Keywords;
            }
        }
        
        /// <summary>
        /// The short name of the symbol (i.e. Task).
        /// This is used to find the symbol when search term does not contain '.'
        /// </summary>
        public virtual string ShortName {
            get {
                return this.CoerceShortName(this.m_ShortName);
            }
            set {
                this.m_ShortName = value;
            }
        }
        
        /// <summary>
        /// The qualified name of the symbol (i.e. System.Threading.Tasks.Task).
        /// This is used to find the symbol when the search term contains '.'
        /// </summary>
        public virtual string ContainerQualifiedName {
            get {
                return this.m_ContainerQualifiedName;
            }
            set {
                this.m_ContainerQualifiedName = value;
            }
        }
        
        /// <summary>
        /// Modifiers for the symbol such as public
        /// </summary>
        public virtual System.Collections.Generic.List<string> Modifiers {
            get {
                return this.m_Modifiers;
            }
            set {
                this.m_Modifiers = value;
            }
        }
        
        /// <summary>
        /// Modifiers for the symbol such as public
        /// </summary>
        System.Collections.Generic.IReadOnlyList<string> Codex.IDefinitionSymbol.Modifiers {
            get {
                return this.Modifiers;
            }
        }
        
        /// <summary>
        /// The glyph
        /// </summary>
        public virtual Codex.ObjectModel.Glyph Glyph {
            get {
                return this.m_Glyph;
            }
            set {
                this.m_Glyph = value;
            }
        }
        
        /// <summary>
        /// The depth of the symbol in its symbolic tree
        /// </summary>
        public virtual int SymbolDepth {
            get {
                return this.m_SymbolDepth;
            }
            set {
                this.m_SymbolDepth = value;
            }
        }
        
        /// <summary>
        /// Documentation for the symbol (if any)
        /// </summary>
        public virtual DocumentationInfo DocumentationInfo {
            get {
                return this.m_DocumentationInfo;
            }
            set {
                this.m_DocumentationInfo = value;
            }
        }
        
        /// <summary>
        /// Documentation for the symbol (if any)
        /// </summary>
        Codex.IDocumentationInfo Codex.IDefinitionSymbol.DocumentationInfo {
            get {
                return this.DocumentationInfo;
            }
        }
        
        /// <summary>
        /// The name of the type for the symbol
        /// (i.e. return type of method)
        /// </summary>
        public virtual string TypeName {
            get {
                return this.m_TypeName;
            }
            set {
                this.m_TypeName = value;
            }
        }
        
        /// <summary>
        /// The declaration name for the symbol
        /// </summary>
        public virtual string DeclarationName {
            get {
                return this.m_DeclarationName;
            }
            set {
                this.m_DeclarationName = value;
            }
        }
        
        /// <summary>
        /// The comment applied to the definition
        /// </summary>
        public virtual string Comment {
            get {
                return this.m_Comment;
            }
            set {
                this.m_Comment = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IDefinitionSymbol value) {
            this.m_Uid = value.Uid;
            this.m_DisplayName = value.DisplayName;
            this.m_AbbreviatedName = value.AbbreviatedName;
            this.m_Keywords = new System.Collections.Generic.List<string>(value.Keywords);
            this.m_ShortName = value.ShortName;
            this.m_ContainerQualifiedName = value.ContainerQualifiedName;
            this.m_Modifiers = new System.Collections.Generic.List<string>(value.Modifiers);
            this.m_Glyph = value.Glyph;
            this.m_SymbolDepth = value.SymbolDepth;
            this.m_DocumentationInfo = EntityUtilities.NullOrCopy(value.DocumentationInfo, v => new DocumentationInfo().Apply(v));;
            this.m_TypeName = value.TypeName;
            this.m_DeclarationName = value.DeclarationName;
            this.m_Comment = value.Comment;
            base.CopyFrom(((Codex.IReferenceSymbol)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.IReferenceSymbol))]
    public partial class ReferenceSymbol : Symbol, Codex.IReferenceSymbol, Codex.IEntityTarget<Codex.IReferenceSymbol> {
        
        private string m_ReferenceKind;
        
        private bool m_IsImplicitlyDeclared;
        
        private bool m_ExcludeFromDefaultSearch;
        
        private bool m_ExcludeFromSearch;
        
        public ReferenceSymbol() {
        }
        
        public ReferenceSymbol(Codex.IReferenceSymbol value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSymbol(Codex.ICodeSymbol value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The kind of reference. This is used to group references.
        /// (i.e. for C#(aka .NET) MethodOverride, InterfaceMemberImplementation, InterfaceImplementation, etc.)
        /// </summary>
        public virtual string ReferenceKind {
            get {
                return this.m_ReferenceKind;
            }
            set {
                this.m_ReferenceKind = value;
            }
        }
        
        /// <summary>
        /// Indicates the corresponding definition is implicitly declared and therefore this should not be
        /// used for find all references search
        /// </summary>
        public virtual bool IsImplicitlyDeclared {
            get {
                return this.m_IsImplicitlyDeclared;
            }
            set {
                this.m_IsImplicitlyDeclared = value;
            }
        }
        
        /// <summary>
        /// Indicates if the symbol should be excluded from the definition/find all references search (by default).
        /// Symbol will only be included if kind is explicitly specified
        /// </summary>
        public virtual bool ExcludeFromDefaultSearch {
            get {
                return this.m_ExcludeFromDefaultSearch;
            }
            set {
                this.m_ExcludeFromDefaultSearch = value;
            }
        }
        
        /// <summary>
        /// Indicates if the symbol should NEVER be included in the definition/find all references search.
        /// </summary>
        public virtual bool ExcludeFromSearch {
            get {
                return this.m_ExcludeFromSearch;
            }
            set {
                this.m_ExcludeFromSearch = value;
            }
        }
        
        public virtual void CopyFrom(Codex.IReferenceSymbol value) {
            this.m_ReferenceKind = value.ReferenceKind;
            this.m_IsImplicitlyDeclared = value.IsImplicitlyDeclared;
            this.m_ExcludeFromDefaultSearch = value.ExcludeFromDefaultSearch;
            this.m_ExcludeFromSearch = value.ExcludeFromSearch;
            base.CopyFrom(((Codex.ICodeSymbol)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ICodeSymbol))]
    public partial class Symbol : Codex.EntityBase, Codex.ICodeSymbol, Codex.IEntityTarget<Codex.ICodeSymbol> {
        
        private string m_ProjectId;
        
        private Codex.ObjectModel.SymbolId m_Id;
        
        private string m_Kind;
        
        public Symbol() {
        }
        
        public Symbol(Codex.ICodeSymbol value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The identifier of the project in which the symbol appears
        /// </summary>
        public virtual string ProjectId {
            get {
                return this.m_ProjectId;
            }
            set {
                this.m_ProjectId = value;
            }
        }
        
        /// <summary>
        /// The identifier for the symbol
        /// </summary>
        public virtual Codex.ObjectModel.SymbolId Id {
            get {
                return this.m_Id;
            }
            set {
                this.m_Id = value;
            }
        }
        
        /// <summary>
        /// The symbol kind. (i.e. interface, method, field)
        /// </summary>
        public virtual string Kind {
            get {
                return this.m_Kind;
            }
            set {
                this.m_Kind = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ICodeSymbol value) {
            this.m_ProjectId = value.ProjectId;
            this.m_Id = value.Id;
            this.m_Kind = value.Kind;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.IReferenceSearchResult))]
    public partial class ReferenceSearchResult : ProjectFileScopeEntity, Codex.Sdk.Search.IReferenceSearchResult, Codex.IEntityTarget<Codex.Sdk.Search.IReferenceSearchResult> {
        
        private ReferenceSpan m_ReferenceSpan;
        
        public ReferenceSearchResult() {
        }
        
        public ReferenceSearchResult(Codex.Sdk.Search.IReferenceSearchResult value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchResult(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchResult(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchResult(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public ReferenceSearchResult(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual ReferenceSpan ReferenceSpan {
            get {
                return this.m_ReferenceSpan;
            }
            set {
                this.m_ReferenceSpan = value;
            }
        }
        
        Codex.IReferenceSpan Codex.Sdk.Search.IReferenceSearchResult.ReferenceSpan {
            get {
                return this.ReferenceSpan;
            }
        }
        
        public virtual void CopyFrom(Codex.Sdk.Search.IReferenceSearchResult value) {
            this.m_ReferenceSpan = EntityUtilities.NullOrCopy(value.ReferenceSpan, v => new ReferenceSpan().Apply(v));;
            base.CopyFrom(((Codex.IProjectFileScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.ITextLineSpanResult))]
    public partial class TextLineSpanResult : ProjectFileScopeEntity, Codex.Sdk.Search.ITextLineSpanResult, Codex.IEntityTarget<Codex.Sdk.Search.ITextLineSpanResult> {
        
        private TextLineSpan m_TextSpan;
        
        public TextLineSpanResult() {
        }
        
        public TextLineSpanResult(Codex.Sdk.Search.ITextLineSpanResult value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpanResult(Codex.IProjectFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpanResult(Codex.IRepoFileScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpanResult(Codex.IRepoScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public TextLineSpanResult(Codex.IProjectScopeEntity value) {
            this.CopyFrom(value);
        }
        
        public virtual TextLineSpan TextSpan {
            get {
                return this.m_TextSpan;
            }
            set {
                this.m_TextSpan = value;
            }
        }
        
        Codex.ITextLineSpan Codex.Sdk.Search.ITextLineSpanResult.TextSpan {
            get {
                return this.TextSpan;
            }
        }
        
        public virtual void CopyFrom(Codex.Sdk.Search.ITextLineSpanResult value) {
            this.m_TextSpan = EntityUtilities.NullOrCopy(value.TextSpan, v => new TextLineSpan().Apply(v));;
            base.CopyFrom(((Codex.IProjectFileScopeEntity)(value)));
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.ISearchResult))]
    public partial class SearchResult : Codex.EntityBase, Codex.Sdk.Search.ISearchResult, Codex.IEntityTarget<Codex.Sdk.Search.ISearchResult> {
        
        private TextLineSpanResult m_TextLine;
        
        private DefinitionSymbol m_Definition;
        
        public SearchResult() {
        }
        
        public SearchResult(Codex.Sdk.Search.ISearchResult value) {
            this.CopyFrom(value);
        }
        
        /// <summary>
        /// The text span for a text result
        /// </summary>
        public virtual TextLineSpanResult TextLine {
            get {
                return this.m_TextLine;
            }
            set {
                this.m_TextLine = value;
            }
        }
        
        /// <summary>
        /// The text span for a text result
        /// </summary>
        Codex.Sdk.Search.ITextLineSpanResult Codex.Sdk.Search.ISearchResult.TextLine {
            get {
                return this.TextLine;
            }
        }
        
        /// <summary>
        /// The definition of the search result
        /// </summary>
        public virtual DefinitionSymbol Definition {
            get {
                return this.m_Definition;
            }
            set {
                this.m_Definition = value;
            }
        }
        
        /// <summary>
        /// The definition of the search result
        /// </summary>
        Codex.IDefinitionSymbol Codex.Sdk.Search.ISearchResult.Definition {
            get {
                return this.Definition;
            }
        }
        
        public virtual void CopyFrom(Codex.Sdk.Search.ISearchResult value) {
            this.m_TextLine = EntityUtilities.NullOrCopy(value.TextLine, v => new TextLineSpanResult().Apply(v));;
            this.m_Definition = EntityUtilities.NullOrCopy(value.Definition, v => new DefinitionSymbol().Apply(v));;
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.Sdk.Search.IIndex))]
    public partial class Index : Codex.EntityBase, Codex.Sdk.Search.IIndex, Codex.IEntityTarget<Codex.Sdk.Search.IIndex> {
        
        public Index() {
        }
        
        public Index(Codex.Sdk.Search.IIndex value) {
            this.CopyFrom(value);
        }
        
        public virtual void CopyFrom(Codex.Sdk.Search.IIndex value) {
        }
    }
    
    [Codex.SerializationInterfaceAttribute(typeof(Codex.ObjectModel.IMapping))]
    public partial class Mapping : Codex.EntityBase, Codex.ObjectModel.IMapping, Codex.IEntityTarget<Codex.ObjectModel.IMapping> {
        
        private Codex.ObjectModel.MappingInfo m_MappingInfo;
        
        public Mapping() {
        }
        
        public Mapping(Codex.ObjectModel.IMapping value) {
            this.CopyFrom(value);
        }
        
        public virtual Codex.ObjectModel.MappingInfo MappingInfo {
            get {
                return this.m_MappingInfo;
            }
            set {
                this.m_MappingInfo = value;
            }
        }
        
        public virtual void CopyFrom(Codex.ObjectModel.IMapping value) {
            this.m_MappingInfo = value.MappingInfo;
        }
    }
}
namespace Codex.Framework.Types {
    using System.Threading.Tasks;
    using Commit = Codex.ObjectModel.Commit;
    using CommitChangedFile = Codex.ObjectModel.CommitChangedFile;
    using CommitFileLink = Codex.ObjectModel.CommitFileLink;
    using Branch = Codex.ObjectModel.Branch;
    using BoundSourceFile = Codex.ObjectModel.BoundSourceFile;
    using BoundSourceInfo = Codex.ObjectModel.BoundSourceInfo;
    using SourceControlFileInfo = Codex.ObjectModel.SourceControlFileInfo;
    using SourceFileInfo = Codex.ObjectModel.SourceFileInfo;
    using EncodingDescription = Codex.ObjectModel.EncodingDescription;
    using SourceFileBase = Codex.ObjectModel.SourceFileBase;
    using SourceFile = Codex.ObjectModel.SourceFile;
    using ChunkedSourceFile = Codex.ObjectModel.ChunkedSourceFile;
    using ChunkReference = Codex.ObjectModel.ChunkReference;
    using SourceFileContentChunk = Codex.ObjectModel.SourceFileContentChunk;
    using OutliningRegion = Codex.ObjectModel.OutliningRegion;
    using DefinitionSpan = Codex.ObjectModel.DefinitionSpan;
    using ParameterDefinitionSpan = Codex.ObjectModel.ParameterDefinitionSpan;
    using ReferenceSpan = Codex.ObjectModel.ReferenceSpan;
    using ParameterReferenceSpan = Codex.ObjectModel.ParameterReferenceSpan;
    using ClassificationSpan = Codex.ObjectModel.ClassificationSpan;
    using SymbolSpan = Codex.ObjectModel.SymbolSpan;
    using TextLineSpan = Codex.ObjectModel.TextLineSpan;
    using LineSpan = Codex.ObjectModel.LineSpan;
    using Span = Codex.ObjectModel.Span;
    using CodeReview = Codex.ObjectModel.CodeReview;
    using CodeReviewIteration = Codex.ObjectModel.CodeReviewIteration;
    using CodeReviewerInfo = Codex.ObjectModel.CodeReviewerInfo;
    using CodeReviewFile = Codex.ObjectModel.CodeReviewFile;
    using CodeReviewCommentThread = Codex.ObjectModel.CodeReviewCommentThread;
    using CodeReviewComment = Codex.ObjectModel.CodeReviewComment;
    using DocumentationInfo = Codex.ObjectModel.DocumentationInfo;
    using ParameterDocumentation = Codex.ObjectModel.ParameterDocumentation;
    using TypedParameterDocumentation = Codex.ObjectModel.TypedParameterDocumentation;
    using DocumentationReferenceSymbol = Codex.ObjectModel.DocumentationReferenceSymbol;
    using LanguageInfo = Codex.ObjectModel.LanguageInfo;
    using ClassificationStyle = Codex.ObjectModel.ClassificationStyle;
    using AnalyzedProject = Codex.ObjectModel.AnalyzedProject;
    using ReferencedProject = Codex.ObjectModel.ReferencedProject;
    using ProjectFileLink = Codex.ObjectModel.ProjectFileLink;
    using PropertySearchModel = Codex.ObjectModel.PropertySearchModel;
    using PropertyMap = Codex.ObjectModel.PropertyMap;
    using Repository = Codex.ObjectModel.Repository;
    using RepositoryReference = Codex.ObjectModel.RepositoryReference;
    using SearchEntity = Codex.ObjectModel.SearchEntity;
    using RepoScopeEntity = Codex.ObjectModel.RepoScopeEntity;
    using CommitScopeEntity = Codex.ObjectModel.CommitScopeEntity;
    using ProjectScopeEntity = Codex.ObjectModel.ProjectScopeEntity;
    using RepoFileScopeEntity = Codex.ObjectModel.RepoFileScopeEntity;
    using ProjectFileScopeEntity = Codex.ObjectModel.ProjectFileScopeEntity;
    using RegisteredEntity = Codex.ObjectModel.RegisteredEntity;
    using StoredFilter = Codex.ObjectModel.StoredFilter;
    using ChildFilterReference = Codex.ObjectModel.ChildFilterReference;
    using GroupedStoredFilterIds = Codex.ObjectModel.GroupedStoredFilterIds;
    using DefinitionSearchModel = Codex.ObjectModel.DefinitionSearchModel;
    using LanguageSearchModel = Codex.ObjectModel.LanguageSearchModel;
    using ReferenceSearchModel = Codex.ObjectModel.ReferenceSearchModel;
    using SourceSearchModelBase = Codex.ObjectModel.SourceSearchModelBase;
    using BoundSourceSearchModel = Codex.ObjectModel.BoundSourceSearchModel;
    using TextSourceSearchModel = Codex.ObjectModel.TextSourceSearchModel;
    using TextChunkSearchModel = Codex.ObjectModel.TextChunkSearchModel;
    using RepositorySearchModel = Codex.ObjectModel.RepositorySearchModel;
    using ProjectSearchModel = Codex.ObjectModel.ProjectSearchModel;
    using ProjectReferenceSearchModel = Codex.ObjectModel.ProjectReferenceSearchModel;
    using CommitSearchModel = Codex.ObjectModel.CommitSearchModel;
    using CommitFilesSearchModel = Codex.ObjectModel.CommitFilesSearchModel;
    using StableIdMarker = Codex.ObjectModel.StableIdMarker;
    using StableIdReservation = Codex.ObjectModel.StableIdReservation;
    using FileStatistics = Codex.ObjectModel.FileStatistics;
    using RepositoryStoreInfo = Codex.ObjectModel.RepositoryStoreInfo;
    using CommitFilesDirectory = Codex.ObjectModel.CommitFilesDirectory;
    using DefinitionSymbol = Codex.ObjectModel.DefinitionSymbol;
    using ReferenceSymbol = Codex.ObjectModel.ReferenceSymbol;
    using Symbol = Codex.ObjectModel.Symbol;
    using ReferenceSearchResult = Codex.ObjectModel.ReferenceSearchResult;
    using TextLineSpanResult = Codex.ObjectModel.TextLineSpanResult;
    using SearchResult = Codex.ObjectModel.SearchResult;
    using Index = Codex.ObjectModel.Index;
    using Mapping = Codex.ObjectModel.Mapping;
    
    
    public partial interface IStore {
    }
}
